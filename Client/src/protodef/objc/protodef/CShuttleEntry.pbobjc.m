// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_shuttle_entry.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "CShuttleEntry.pbobjc.h"
 #import "BError.pbobjc.h"
 #import "BMath.pbobjc.h"
 #import "BNetwork.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - C_shuttle_entry_CShuttleEntryRoot

@implementation C_shuttle_entry_CShuttleEntryRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - C_shuttle_entry_CShuttleEntryRoot_FileDescriptor

static GPBFileDescriptor *C_shuttle_entry_CShuttleEntryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"c_shuttle_entry"
                                                 objcPrefix:@"C_shuttle_entry_"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum C_shuttle_entry_msg

GPBEnumDescriptor *C_shuttle_entry_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MinId\000MaxId\000";
    static const int32_t values[] = {
        C_shuttle_entry_msg_MinId,
        C_shuttle_entry_msg_MaxId,
    };
    static const char *extraTextFormatInfo = "\002\000#\242\000\001#\242\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_shuttle_entry_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_shuttle_entry_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_shuttle_entry_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_shuttle_entry_msg_MinId:
    case C_shuttle_entry_msg_MaxId:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_shuttle_entry_knock_rq

@implementation C_shuttle_entry_knock_rq

@dynamic hasNativeClientVersion, nativeClientVersion;
@dynamic hasNativeSourceVersion, nativeSourceVersion;
@dynamic hasCoordInfo, coordInfo;

typedef struct C_shuttle_entry_knock_rq__storage_ {
  uint32_t _has_storage_[1];
  NSString *nativeClientVersion;
  NSString *nativeSourceVersion;
  B_math_coord *coordInfo;
} C_shuttle_entry_knock_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nativeClientVersion",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_knock_rq_FieldNumber_NativeClientVersion,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_shuttle_entry_knock_rq__storage_, nativeClientVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nativeSourceVersion",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_knock_rq_FieldNumber_NativeSourceVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_shuttle_entry_knock_rq__storage_, nativeSourceVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "coordInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(B_math_coord),
        .number = C_shuttle_entry_knock_rq_FieldNumber_CoordInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_shuttle_entry_knock_rq__storage_, coordInfo),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_shuttle_entry_knock_rq class]
                                     rootClass:[C_shuttle_entry_CShuttleEntryRoot class]
                                          file:C_shuttle_entry_CShuttleEntryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_shuttle_entry_knock_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_shuttle_entry_knock_rq_msg

GPBEnumDescriptor *C_shuttle_entry_knock_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_shuttle_entry_knock_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_shuttle_entry_knock_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_shuttle_entry_knock_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_shuttle_entry_knock_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_shuttle_entry_knock_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_shuttle_entry_knock_rs

@implementation C_shuttle_entry_knock_rs

@dynamic hasError, error;
@dynamic hasAddr, addr;
@dynamic hasRemoteClientVersion, remoteClientVersion;
@dynamic hasRemoteSourceVersion, remoteSourceVersion;
@dynamic hasRemoteServerVersion, remoteServerVersion;

typedef struct C_shuttle_entry_knock_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  B_network_address *addr;
  NSString *remoteClientVersion;
  NSString *remoteSourceVersion;
  NSString *remoteServerVersion;
} C_shuttle_entry_knock_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_shuttle_entry_knock_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_shuttle_entry_knock_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addr",
        .dataTypeSpecific.className = GPBStringifySymbol(B_network_address),
        .number = C_shuttle_entry_knock_rs_FieldNumber_Addr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_shuttle_entry_knock_rs__storage_, addr),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "remoteClientVersion",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_knock_rs_FieldNumber_RemoteClientVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_shuttle_entry_knock_rs__storage_, remoteClientVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remoteSourceVersion",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_knock_rs_FieldNumber_RemoteSourceVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C_shuttle_entry_knock_rs__storage_, remoteSourceVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remoteServerVersion",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_knock_rs_FieldNumber_RemoteServerVersion,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C_shuttle_entry_knock_rs__storage_, remoteServerVersion),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_shuttle_entry_knock_rs class]
                                     rootClass:[C_shuttle_entry_CShuttleEntryRoot class]
                                          file:C_shuttle_entry_CShuttleEntryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_shuttle_entry_knock_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_shuttle_entry_knock_rs_msg

GPBEnumDescriptor *C_shuttle_entry_knock_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_shuttle_entry_knock_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_shuttle_entry_knock_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_shuttle_entry_knock_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_shuttle_entry_knock_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_shuttle_entry_knock_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_shuttle_entry_exchange_key_rq

@implementation C_shuttle_entry_exchange_key_rq

@dynamic hasN, n;
@dynamic hasE, e;
@dynamic hasVersion, version;

typedef struct C_shuttle_entry_exchange_key_rq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  NSData *n;
  NSData *e;
} C_shuttle_entry_exchange_key_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "n",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_exchange_key_rq_FieldNumber_N,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_shuttle_entry_exchange_key_rq__storage_, n),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "e",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_exchange_key_rq_FieldNumber_E,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_shuttle_entry_exchange_key_rq__storage_, e),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_exchange_key_rq_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_shuttle_entry_exchange_key_rq__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_shuttle_entry_exchange_key_rq class]
                                     rootClass:[C_shuttle_entry_CShuttleEntryRoot class]
                                          file:C_shuttle_entry_CShuttleEntryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_shuttle_entry_exchange_key_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_shuttle_entry_exchange_key_rq_msg

GPBEnumDescriptor *C_shuttle_entry_exchange_key_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_shuttle_entry_exchange_key_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_shuttle_entry_exchange_key_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_shuttle_entry_exchange_key_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_shuttle_entry_exchange_key_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_shuttle_entry_exchange_key_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_shuttle_entry_exchange_key_rs

@implementation C_shuttle_entry_exchange_key_rs

@dynamic hasError, error;
@dynamic hasKey, key;

typedef struct C_shuttle_entry_exchange_key_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  NSData *key;
} C_shuttle_entry_exchange_key_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_shuttle_entry_exchange_key_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_shuttle_entry_exchange_key_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = C_shuttle_entry_exchange_key_rs_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_shuttle_entry_exchange_key_rs__storage_, key),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_shuttle_entry_exchange_key_rs class]
                                     rootClass:[C_shuttle_entry_CShuttleEntryRoot class]
                                          file:C_shuttle_entry_CShuttleEntryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_shuttle_entry_exchange_key_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_shuttle_entry_exchange_key_rs_msg

GPBEnumDescriptor *C_shuttle_entry_exchange_key_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_shuttle_entry_exchange_key_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_shuttle_entry_exchange_key_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_shuttle_entry_exchange_key_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_shuttle_entry_exchange_key_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_shuttle_entry_exchange_key_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
