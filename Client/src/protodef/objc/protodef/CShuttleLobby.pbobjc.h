// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_shuttle_lobby.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class B_error_info;
@class B_math_coord;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum C_shuttle_lobby_msg

typedef GPB_ENUM(C_shuttle_lobby_msg) {
  C_shuttle_lobby_msg_MinId = 33558784,
  C_shuttle_lobby_msg_MaxId = 33559039,
};

GPBEnumDescriptor *C_shuttle_lobby_msg_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL C_shuttle_lobby_msg_IsValidValue(int32_t value);

#pragma mark - Enum C_shuttle_lobby_exchange_key_rq_msg

typedef GPB_ENUM(C_shuttle_lobby_exchange_key_rq_msg) {
  C_shuttle_lobby_exchange_key_rq_msg_Id = 33558784,
};

GPBEnumDescriptor *C_shuttle_lobby_exchange_key_rq_msg_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL C_shuttle_lobby_exchange_key_rq_msg_IsValidValue(int32_t value);

#pragma mark - Enum C_shuttle_lobby_exchange_key_rs_msg

typedef GPB_ENUM(C_shuttle_lobby_exchange_key_rs_msg) {
  C_shuttle_lobby_exchange_key_rs_msg_Id = 33558785,
};

GPBEnumDescriptor *C_shuttle_lobby_exchange_key_rs_msg_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL C_shuttle_lobby_exchange_key_rs_msg_IsValidValue(int32_t value);

#pragma mark - Enum C_shuttle_lobby_token_verify_rq_msg

typedef GPB_ENUM(C_shuttle_lobby_token_verify_rq_msg) {
  C_shuttle_lobby_token_verify_rq_msg_Id = 33558786,
};

GPBEnumDescriptor *C_shuttle_lobby_token_verify_rq_msg_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL C_shuttle_lobby_token_verify_rq_msg_IsValidValue(int32_t value);

#pragma mark - Enum C_shuttle_lobby_token_verify_rs_msg

typedef GPB_ENUM(C_shuttle_lobby_token_verify_rs_msg) {
  C_shuttle_lobby_token_verify_rs_msg_Id = 33558787,
};

GPBEnumDescriptor *C_shuttle_lobby_token_verify_rs_msg_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL C_shuttle_lobby_token_verify_rs_msg_IsValidValue(int32_t value);

#pragma mark - Enum C_shuttle_lobby_token_verify_nt_msg

typedef GPB_ENUM(C_shuttle_lobby_token_verify_nt_msg) {
  C_shuttle_lobby_token_verify_nt_msg_Id = 33558912,
};

GPBEnumDescriptor *C_shuttle_lobby_token_verify_nt_msg_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL C_shuttle_lobby_token_verify_nt_msg_IsValidValue(int32_t value);

#pragma mark - Enum C_shuttle_lobby_heartbeat_rq_msg

typedef GPB_ENUM(C_shuttle_lobby_heartbeat_rq_msg) {
  C_shuttle_lobby_heartbeat_rq_msg_Id = 33558788,
};

GPBEnumDescriptor *C_shuttle_lobby_heartbeat_rq_msg_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL C_shuttle_lobby_heartbeat_rq_msg_IsValidValue(int32_t value);

#pragma mark - Enum C_shuttle_lobby_heartbeat_rs_msg

typedef GPB_ENUM(C_shuttle_lobby_heartbeat_rs_msg) {
  C_shuttle_lobby_heartbeat_rs_msg_Id = 33558789,
};

GPBEnumDescriptor *C_shuttle_lobby_heartbeat_rs_msg_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL C_shuttle_lobby_heartbeat_rs_msg_IsValidValue(int32_t value);

#pragma mark - C_shuttle_lobby_CShuttleLobbyRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface C_shuttle_lobby_CShuttleLobbyRoot : GPBRootObject
@end

#pragma mark - C_shuttle_lobby_exchange_key_rq

typedef GPB_ENUM(C_shuttle_lobby_exchange_key_rq_FieldNumber) {
  C_shuttle_lobby_exchange_key_rq_FieldNumber_PublicKey = 1,
  C_shuttle_lobby_exchange_key_rq_FieldNumber_EncryptKeyL = 2,
  C_shuttle_lobby_exchange_key_rq_FieldNumber_Version = 3,
};

/**
 * 注意: 如果需要加密连接, 那么
 * 1. 在tcp连接成功后的第一个包应该是交换秘钥
 * 2. 在tcp收到交换秘钥回包之前不能往tcp发任何内容
 * 3. 服务端在收到交换秘钥并在发完就按回包之后将对称加密秘钥设置到服务端的tcp上下文
 * 4. 客户端在收到交换秘钥回包之后立即设置对称加密秘钥到客户端的tcp上下文
 * 5. 服务端和客户端在设置好对称加密秘钥tcp上下文后, 即可任意发包, 加密连接完成
 * (tcp)交换秘钥请求
 **/
@interface C_shuttle_lobby_exchange_key_rq : GPBMessage

/** 客户端密钥对的公钥. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *publicKey;
/** Test to see if @c publicKey has been set. */
@property(nonatomic, readwrite) BOOL hasPublicKey;

/** 服务端公钥加密的对称密钥左边. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *encryptKeyL;
/** Test to see if @c encryptKeyL has been set. */
@property(nonatomic, readwrite) BOOL hasEncryptKeyL;

/** 密钥交换协议版本号，初始为0 */
@property(nonatomic, readwrite) uint32_t version;

@property(nonatomic, readwrite) BOOL hasVersion;
@end

#pragma mark - C_shuttle_lobby_exchange_key_rs

typedef GPB_ENUM(C_shuttle_lobby_exchange_key_rs_FieldNumber) {
  C_shuttle_lobby_exchange_key_rs_FieldNumber_Error = 1,
  C_shuttle_lobby_exchange_key_rs_FieldNumber_EncryptKeyR = 2,
};

/**
 * (tcp)交换秘钥返回
 **/
@interface C_shuttle_lobby_exchange_key_rs : GPBMessage

/** error info */
@property(nonatomic, readwrite, strong, null_resettable) B_error_info *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;

/** 客户端公钥加密的对称密钥右边边 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *encryptKeyR;
/** Test to see if @c encryptKeyR has been set. */
@property(nonatomic, readwrite) BOOL hasEncryptKeyR;

@end

#pragma mark - C_shuttle_lobby_token_verify_rq

typedef GPB_ENUM(C_shuttle_lobby_token_verify_rq_FieldNumber) {
  C_shuttle_lobby_token_verify_rq_FieldNumber_Uid = 1,
  C_shuttle_lobby_token_verify_rq_FieldNumber_Token = 2,
};

/**
 * (tcp)令牌校验请求
 **/
@interface C_shuttle_lobby_token_verify_rq : GPBMessage

/** 用户编号 */
@property(nonatomic, readwrite) uint64_t uid;

@property(nonatomic, readwrite) BOOL hasUid;
/** 用户令牌 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

@end

#pragma mark - C_shuttle_lobby_token_verify_rs

typedef GPB_ENUM(C_shuttle_lobby_token_verify_rs_FieldNumber) {
  C_shuttle_lobby_token_verify_rs_FieldNumber_Error = 1,
  C_shuttle_lobby_token_verify_rs_FieldNumber_Uid = 2,
  C_shuttle_lobby_token_verify_rs_FieldNumber_Token = 3,
};

/**
 * (tcp)令牌校验返回
 **/
@interface C_shuttle_lobby_token_verify_rs : GPBMessage

/** error info */
@property(nonatomic, readwrite, strong, null_resettable) B_error_info *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;

/** 用户编号 */
@property(nonatomic, readwrite) uint64_t uid;

@property(nonatomic, readwrite) BOOL hasUid;
/** 用户令牌 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;
/** Test to see if @c token has been set. */
@property(nonatomic, readwrite) BOOL hasToken;

@end

#pragma mark - C_shuttle_lobby_token_verify_nt

typedef GPB_ENUM(C_shuttle_lobby_token_verify_nt_FieldNumber) {
  C_shuttle_lobby_token_verify_nt_FieldNumber_Uid = 1,
  C_shuttle_lobby_token_verify_nt_FieldNumber_TimecodeRemote = 2,
};

/**
 * (tcp)令牌校验通知, 账号被挤掉的时候发给被挤的人, 被挤掉的人将收不到在线回推.
 **/
@interface C_shuttle_lobby_token_verify_nt : GPBMessage

/** 用户编号 */
@property(nonatomic, readwrite) uint64_t uid;

@property(nonatomic, readwrite) BOOL hasUid;
/** 发出的时间点(ms毫秒) */
@property(nonatomic, readwrite) uint64_t timecodeRemote;

@property(nonatomic, readwrite) BOOL hasTimecodeRemote;
@end

#pragma mark - C_shuttle_lobby_heartbeat_rq

typedef GPB_ENUM(C_shuttle_lobby_heartbeat_rq_FieldNumber) {
  C_shuttle_lobby_heartbeat_rq_FieldNumber_Uid = 1,
  C_shuttle_lobby_heartbeat_rq_FieldNumber_TimecodeNative = 2,
  C_shuttle_lobby_heartbeat_rq_FieldNumber_CoordInfo = 3,
};

/**
 * (tcp)大厅心跳请求
 **/
@interface C_shuttle_lobby_heartbeat_rq : GPBMessage

/** 用户ID */
@property(nonatomic, readwrite) uint64_t uid;

@property(nonatomic, readwrite) BOOL hasUid;
/** 发出的时间点(ms毫秒) */
@property(nonatomic, readwrite) uint64_t timecodeNative;

@property(nonatomic, readwrite) BOOL hasTimecodeNative;
/** Earth(j,w). */
@property(nonatomic, readwrite, strong, null_resettable) B_math_coord *coordInfo;
/** Test to see if @c coordInfo has been set. */
@property(nonatomic, readwrite) BOOL hasCoordInfo;

@end

#pragma mark - C_shuttle_lobby_heartbeat_rs

typedef GPB_ENUM(C_shuttle_lobby_heartbeat_rs_FieldNumber) {
  C_shuttle_lobby_heartbeat_rs_FieldNumber_Error = 1,
  C_shuttle_lobby_heartbeat_rs_FieldNumber_Uid = 2,
  C_shuttle_lobby_heartbeat_rs_FieldNumber_TimecodeNative = 3,
  C_shuttle_lobby_heartbeat_rs_FieldNumber_CoordInfo = 4,
};

/**
 * (tcp)大厅心跳返回
 **/
@interface C_shuttle_lobby_heartbeat_rs : GPBMessage

/** error info */
@property(nonatomic, readwrite, strong, null_resettable) B_error_info *error;
/** Test to see if @c error has been set. */
@property(nonatomic, readwrite) BOOL hasError;

/** 用户ID */
@property(nonatomic, readwrite) uint64_t uid;

@property(nonatomic, readwrite) BOOL hasUid;
/** 发出的时间点(ms毫秒) */
@property(nonatomic, readwrite) uint64_t timecodeNative;

@property(nonatomic, readwrite) BOOL hasTimecodeNative;
/** Earth(j,w). */
@property(nonatomic, readwrite, strong, null_resettable) B_math_coord *coordInfo;
/** Test to see if @c coordInfo has been set. */
@property(nonatomic, readwrite) BOOL hasCoordInfo;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
