// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_business_relation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "CBusinessRelation.pbobjc.h"
 #import "BError.pbobjc.h"
 #import "BBusinessAccount.pbobjc.h"
 #import "BBusinessRelation.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - C_business_relation_CBusinessRelationRoot

@implementation C_business_relation_CBusinessRelationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - C_business_relation_CBusinessRelationRoot_FileDescriptor

static GPBFileDescriptor *C_business_relation_CBusinessRelationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"c_business_relation"
                                                 objcPrefix:@"C_business_relation_"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum C_business_relation_msg

GPBEnumDescriptor *C_business_relation_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MinId\000MaxId\000";
    static const int32_t values[] = {
        C_business_relation_msg_MinId,
        C_business_relation_msg_MaxId,
    };
    static const char *extraTextFormatInfo = "\002\000#\242\000\001#\242\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_msg_MinId:
    case C_business_relation_msg_MaxId:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_friend_info

@implementation C_business_relation_friend_info

@dynamic hasUserInfo, userInfo;
@dynamic hasUserGroup, userGroup;
@dynamic hasUserRemark, userRemark;

typedef struct C_business_relation_friend_info__storage_ {
  uint32_t _has_storage_[1];
  B_business_account_user_info *userInfo;
  NSString *userGroup;
  NSString *userRemark;
} C_business_relation_friend_info__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(B_business_account_user_info),
        .number = C_business_relation_friend_info_FieldNumber_UserInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_friend_info__storage_, userInfo),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userGroup",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_friend_info_FieldNumber_UserGroup,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_friend_info__storage_, userGroup),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userRemark",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_friend_info_FieldNumber_UserRemark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_friend_info__storage_, userRemark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_friend_info class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_friend_info__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - C_business_relation_add_friend_rq

@implementation C_business_relation_add_friend_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserAddId, userAddId;
@dynamic hasUserRemark, userRemark;
@dynamic hasDescription_p, description_p;

typedef struct C_business_relation_add_friend_rq__storage_ {
  uint32_t _has_storage_[1];
  NSString *userRemark;
  NSString *description_p;
  uint64_t userMyselfId;
  uint64_t userAddId;
} C_business_relation_add_friend_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userAddId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_rq_FieldNumber_UserAddId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_rq__storage_, userAddId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userRemark",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_rq_FieldNumber_UserRemark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_rq__storage_, userRemark),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_rq_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_rq__storage_, description_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_add_friend_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_add_friend_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_add_friend_rq_msg

GPBEnumDescriptor *C_business_relation_add_friend_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_add_friend_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_add_friend_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_add_friend_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_add_friend_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_add_friend_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_add_friend_rs

@implementation C_business_relation_add_friend_rs

@dynamic hasError, error;
@dynamic hasUserAddId, userAddId;
@dynamic hasUserRemark, userRemark;

typedef struct C_business_relation_add_friend_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  NSString *userRemark;
  uint64_t userAddId;
} C_business_relation_add_friend_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_add_friend_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userAddId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_rs_FieldNumber_UserAddId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_rs__storage_, userAddId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userRemark",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_rs_FieldNumber_UserRemark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_rs__storage_, userRemark),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_add_friend_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_add_friend_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_add_friend_rs_msg

GPBEnumDescriptor *C_business_relation_add_friend_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_add_friend_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_add_friend_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_add_friend_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_add_friend_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_add_friend_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_add_friend_nt

@implementation C_business_relation_add_friend_nt

@dynamic hasApplyUserInfo, applyUserInfo;
@dynamic hasDescription_p, description_p;

typedef struct C_business_relation_add_friend_nt__storage_ {
  uint32_t _has_storage_[1];
  B_business_account_user_info *applyUserInfo;
  NSString *description_p;
} C_business_relation_add_friend_nt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applyUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(B_business_account_user_info),
        .number = C_business_relation_add_friend_nt_FieldNumber_ApplyUserInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_nt__storage_, applyUserInfo),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_nt_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_nt__storage_, description_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_add_friend_nt class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_add_friend_nt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_add_friend_nt_msg

GPBEnumDescriptor *C_business_relation_add_friend_nt_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_add_friend_nt_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_add_friend_nt_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_add_friend_nt_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_add_friend_nt_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_add_friend_nt_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_delete_friend_rq

@implementation C_business_relation_delete_friend_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserDeleteId, userDeleteId;

typedef struct C_business_relation_delete_friend_rq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userMyselfId;
  uint64_t userDeleteId;
} C_business_relation_delete_friend_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userDeleteId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_rq_FieldNumber_UserDeleteId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_rq__storage_, userDeleteId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_delete_friend_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_delete_friend_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_delete_friend_rq_msg

GPBEnumDescriptor *C_business_relation_delete_friend_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_delete_friend_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_delete_friend_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_delete_friend_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_delete_friend_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_delete_friend_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_delete_friend_rs

@implementation C_business_relation_delete_friend_rs

@dynamic hasError, error;
@dynamic hasUserDeleteId, userDeleteId;

typedef struct C_business_relation_delete_friend_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  uint64_t userDeleteId;
} C_business_relation_delete_friend_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_delete_friend_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userDeleteId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_rs_FieldNumber_UserDeleteId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_rs__storage_, userDeleteId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_delete_friend_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_delete_friend_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_delete_friend_rs_msg

GPBEnumDescriptor *C_business_relation_delete_friend_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_delete_friend_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_delete_friend_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_delete_friend_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_delete_friend_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_delete_friend_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_delete_friend_nt

@implementation C_business_relation_delete_friend_nt

@dynamic hasApplyUserId, applyUserId;

typedef struct C_business_relation_delete_friend_nt__storage_ {
  uint32_t _has_storage_[1];
  uint64_t applyUserId;
} C_business_relation_delete_friend_nt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applyUserId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_nt_FieldNumber_ApplyUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_nt__storage_, applyUserId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_delete_friend_nt class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_delete_friend_nt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_delete_friend_nt_msg

GPBEnumDescriptor *C_business_relation_delete_friend_nt_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_delete_friend_nt_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_delete_friend_nt_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_delete_friend_nt_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_delete_friend_nt_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_delete_friend_nt_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_allow_friend_rq

@implementation C_business_relation_allow_friend_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserAllowId, userAllowId;
@dynamic hasUserMyselfNick, userMyselfNick;
@dynamic hasUserAllowNick, userAllowNick;
@dynamic hasOpcode, opcode;

typedef struct C_business_relation_allow_friend_rq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opcode;
  NSString *userMyselfNick;
  NSString *userAllowNick;
  uint64_t userMyselfId;
  uint64_t userAllowId;
} C_business_relation_allow_friend_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_allow_friend_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userAllowId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_allow_friend_rq_FieldNumber_UserAllowId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rq__storage_, userAllowId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userMyselfNick",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_allow_friend_rq_FieldNumber_UserMyselfNick,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rq__storage_, userMyselfNick),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userAllowNick",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_allow_friend_rq_FieldNumber_UserAllowNick,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rq__storage_, userAllowNick),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "opcode",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_allow_friend_rq_FieldNumber_Opcode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rq__storage_, opcode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_allow_friend_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_allow_friend_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_allow_friend_rq_msg

GPBEnumDescriptor *C_business_relation_allow_friend_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_allow_friend_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_allow_friend_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_allow_friend_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_allow_friend_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_allow_friend_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum C_business_relation_allow_friend_rq_opcode_t

GPBEnumDescriptor *C_business_relation_allow_friend_rq_opcode_t_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Allow\000Refuse\000";
    static const int32_t values[] = {
        C_business_relation_allow_friend_rq_opcode_t_Allow,
        C_business_relation_allow_friend_rq_opcode_t_Refuse,
    };
    static const char *extraTextFormatInfo = "\002\000%\000\001&\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_allow_friend_rq_opcode_t)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_allow_friend_rq_opcode_t_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_allow_friend_rq_opcode_t_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_allow_friend_rq_opcode_t_Allow:
    case C_business_relation_allow_friend_rq_opcode_t_Refuse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_allow_friend_rs

@implementation C_business_relation_allow_friend_rs

@dynamic hasError, error;
@dynamic hasUserAllowId, userAllowId;
@dynamic hasOpcode, opcode;
@dynamic relationSArray, relationSArray_Count;

typedef struct C_business_relation_allow_friend_rs__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opcode;
  B_error_info *error;
  NSMutableArray *relationSArray;
  uint64_t userAllowId;
} C_business_relation_allow_friend_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_allow_friend_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userAllowId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_allow_friend_rs_FieldNumber_UserAllowId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rs__storage_, userAllowId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "opcode",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_allow_friend_rs_FieldNumber_Opcode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rs__storage_, opcode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "relationSArray",
        .dataTypeSpecific.className = GPBStringifySymbol(B_business_relation_user_relation),
        .number = C_business_relation_allow_friend_rs_FieldNumber_RelationSArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_rs__storage_, relationSArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_allow_friend_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_allow_friend_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_allow_friend_rs_msg

GPBEnumDescriptor *C_business_relation_allow_friend_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_allow_friend_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_allow_friend_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_allow_friend_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_allow_friend_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_allow_friend_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_allow_friend_nt

@implementation C_business_relation_allow_friend_nt

@dynamic hasApplyUserInfo, applyUserInfo;
@dynamic hasOpcode, opcode;
@dynamic relationSArray, relationSArray_Count;

typedef struct C_business_relation_allow_friend_nt__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opcode;
  B_business_account_user_info *applyUserInfo;
  NSMutableArray *relationSArray;
} C_business_relation_allow_friend_nt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applyUserInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(B_business_account_user_info),
        .number = C_business_relation_allow_friend_nt_FieldNumber_ApplyUserInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_nt__storage_, applyUserInfo),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opcode",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_allow_friend_nt_FieldNumber_Opcode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_nt__storage_, opcode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "relationSArray",
        .dataTypeSpecific.className = GPBStringifySymbol(B_business_relation_user_relation),
        .number = C_business_relation_allow_friend_nt_FieldNumber_RelationSArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(C_business_relation_allow_friend_nt__storage_, relationSArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_allow_friend_nt class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_allow_friend_nt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_allow_friend_nt_msg

GPBEnumDescriptor *C_business_relation_allow_friend_nt_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_allow_friend_nt_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_allow_friend_nt_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_allow_friend_nt_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_allow_friend_nt_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_allow_friend_nt_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_query_friends_rq

@implementation C_business_relation_query_friends_rq

@dynamic hasUserMyselfId, userMyselfId;

typedef struct C_business_relation_query_friends_rq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userMyselfId;
} C_business_relation_query_friends_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_query_friends_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_query_friends_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_query_friends_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_query_friends_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_query_friends_rq_msg

GPBEnumDescriptor *C_business_relation_query_friends_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_query_friends_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_query_friends_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_query_friends_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_query_friends_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_query_friends_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_query_friends_rs

@implementation C_business_relation_query_friends_rs

@dynamic hasError, error;
@dynamic groupSArray, groupSArray_Count;
@dynamic relationSArray, relationSArray_Count;

typedef struct C_business_relation_query_friends_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  NSMutableArray *groupSArray;
  NSMutableArray *relationSArray;
} C_business_relation_query_friends_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_query_friends_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_query_friends_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupSArray",
        .dataTypeSpecific.className = GPBStringifySymbol(B_business_relation_user_relation_group),
        .number = C_business_relation_query_friends_rs_FieldNumber_GroupSArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(C_business_relation_query_friends_rs__storage_, groupSArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "relationSArray",
        .dataTypeSpecific.className = GPBStringifySymbol(B_business_relation_user_relation),
        .number = C_business_relation_query_friends_rs_FieldNumber_RelationSArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(C_business_relation_query_friends_rs__storage_, relationSArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_query_friends_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_query_friends_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_query_friends_rs_msg

GPBEnumDescriptor *C_business_relation_query_friends_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_query_friends_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_query_friends_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_query_friends_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_query_friends_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_query_friends_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_rename_friend_remark_rq

@implementation C_business_relation_rename_friend_remark_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserFriendId, userFriendId;
@dynamic hasUserFriendRemark, userFriendRemark;

typedef struct C_business_relation_rename_friend_remark_rq__storage_ {
  uint32_t _has_storage_[1];
  NSString *userFriendRemark;
  uint64_t userMyselfId;
  uint64_t userFriendId;
} C_business_relation_rename_friend_remark_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_remark_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_remark_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_remark_rq_FieldNumber_UserFriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_remark_rq__storage_, userFriendId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendRemark",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_remark_rq_FieldNumber_UserFriendRemark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_remark_rq__storage_, userFriendRemark),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_rename_friend_remark_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_rename_friend_remark_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_rename_friend_remark_rq_msg

GPBEnumDescriptor *C_business_relation_rename_friend_remark_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_rename_friend_remark_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_rename_friend_remark_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_rename_friend_remark_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_rename_friend_remark_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_rename_friend_remark_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_rename_friend_remark_rs

@implementation C_business_relation_rename_friend_remark_rs

@dynamic hasError, error;
@dynamic hasUserFriendId, userFriendId;
@dynamic hasUserFriendRemark, userFriendRemark;

typedef struct C_business_relation_rename_friend_remark_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  NSString *userFriendRemark;
  uint64_t userFriendId;
} C_business_relation_rename_friend_remark_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_rename_friend_remark_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_remark_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userFriendId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_remark_rs_FieldNumber_UserFriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_remark_rs__storage_, userFriendId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendRemark",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_remark_rs_FieldNumber_UserFriendRemark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_remark_rs__storage_, userFriendRemark),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_rename_friend_remark_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_rename_friend_remark_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_rename_friend_remark_rs_msg

GPBEnumDescriptor *C_business_relation_rename_friend_remark_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_rename_friend_remark_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_rename_friend_remark_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_rename_friend_remark_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_rename_friend_remark_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_rename_friend_remark_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_add_friend_group_rq

@implementation C_business_relation_add_friend_group_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserFriendGroup, userFriendGroup;

typedef struct C_business_relation_add_friend_group_rq__storage_ {
  uint32_t _has_storage_[1];
  NSString *userFriendGroup;
  uint64_t userMyselfId;
} C_business_relation_add_friend_group_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_group_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_group_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroup",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_group_rq_FieldNumber_UserFriendGroup,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_group_rq__storage_, userFriendGroup),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_add_friend_group_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_add_friend_group_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_add_friend_group_rq_msg

GPBEnumDescriptor *C_business_relation_add_friend_group_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_add_friend_group_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_add_friend_group_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_add_friend_group_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_add_friend_group_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_add_friend_group_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_add_friend_group_rs

@implementation C_business_relation_add_friend_group_rs

@dynamic hasError, error;
@dynamic hasUserFriendGroup, userFriendGroup;
@dynamic hasUserFriendGroupId, userFriendGroupId;

typedef struct C_business_relation_add_friend_group_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  NSString *userFriendGroup;
  uint64_t userFriendGroupId;
} C_business_relation_add_friend_group_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_add_friend_group_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_group_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userFriendGroup",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_group_rs_FieldNumber_UserFriendGroup,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_group_rs__storage_, userFriendGroup),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userFriendGroupId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_add_friend_group_rs_FieldNumber_UserFriendGroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_add_friend_group_rs__storage_, userFriendGroupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_add_friend_group_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_add_friend_group_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_add_friend_group_rs_msg

GPBEnumDescriptor *C_business_relation_add_friend_group_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_add_friend_group_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_add_friend_group_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_add_friend_group_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_add_friend_group_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_add_friend_group_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_delete_friend_group_rq

@implementation C_business_relation_delete_friend_group_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserFriendId, userFriendId;
@dynamic hasUserFriendGroupId, userFriendGroupId;

typedef struct C_business_relation_delete_friend_group_rq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userMyselfId;
  uint64_t userFriendId;
  uint64_t userFriendGroupId;
} C_business_relation_delete_friend_group_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_group_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_group_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_group_rq_FieldNumber_UserFriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_group_rq__storage_, userFriendId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroupId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_group_rq_FieldNumber_UserFriendGroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_group_rq__storage_, userFriendGroupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_delete_friend_group_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_delete_friend_group_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_delete_friend_group_rq_msg

GPBEnumDescriptor *C_business_relation_delete_friend_group_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_delete_friend_group_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_delete_friend_group_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_delete_friend_group_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_delete_friend_group_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_delete_friend_group_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_delete_friend_group_rs

@implementation C_business_relation_delete_friend_group_rs

@dynamic hasError, error;
@dynamic hasUserFriendId, userFriendId;
@dynamic hasUserFriendGroupId, userFriendGroupId;

typedef struct C_business_relation_delete_friend_group_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  uint64_t userFriendId;
  uint64_t userFriendGroupId;
} C_business_relation_delete_friend_group_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_delete_friend_group_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_group_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userFriendId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_group_rs_FieldNumber_UserFriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_group_rs__storage_, userFriendId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroupId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_delete_friend_group_rs_FieldNumber_UserFriendGroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_delete_friend_group_rs__storage_, userFriendGroupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_delete_friend_group_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_delete_friend_group_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_delete_friend_group_rs_msg

GPBEnumDescriptor *C_business_relation_delete_friend_group_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_delete_friend_group_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_delete_friend_group_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_delete_friend_group_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_delete_friend_group_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_delete_friend_group_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_rename_friend_group_rq

@implementation C_business_relation_rename_friend_group_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserFriendGroupId, userFriendGroupId;
@dynamic hasUserFriendGroup, userFriendGroup;

typedef struct C_business_relation_rename_friend_group_rq__storage_ {
  uint32_t _has_storage_[1];
  NSString *userFriendGroup;
  uint64_t userMyselfId;
  uint64_t userFriendGroupId;
} C_business_relation_rename_friend_group_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_group_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_group_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroupId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_group_rq_FieldNumber_UserFriendGroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_group_rq__storage_, userFriendGroupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroup",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_group_rq_FieldNumber_UserFriendGroup,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_group_rq__storage_, userFriendGroup),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_rename_friend_group_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_rename_friend_group_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_rename_friend_group_rq_msg

GPBEnumDescriptor *C_business_relation_rename_friend_group_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_rename_friend_group_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_rename_friend_group_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_rename_friend_group_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_rename_friend_group_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_rename_friend_group_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_rename_friend_group_rs

@implementation C_business_relation_rename_friend_group_rs

@dynamic hasError, error;
@dynamic hasUserFriendGroupId, userFriendGroupId;
@dynamic hasUserFriendGroup, userFriendGroup;

typedef struct C_business_relation_rename_friend_group_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  NSString *userFriendGroup;
  uint64_t userFriendGroupId;
} C_business_relation_rename_friend_group_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_rename_friend_group_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_group_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userFriendGroupId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_group_rs_FieldNumber_UserFriendGroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_group_rs__storage_, userFriendGroupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroup",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_rename_friend_group_rs_FieldNumber_UserFriendGroup,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_rename_friend_group_rs__storage_, userFriendGroup),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_rename_friend_group_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_rename_friend_group_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_rename_friend_group_rs_msg

GPBEnumDescriptor *C_business_relation_rename_friend_group_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_rename_friend_group_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_rename_friend_group_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_rename_friend_group_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_rename_friend_group_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_rename_friend_group_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_change_friend_group_rq

@implementation C_business_relation_change_friend_group_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserFriendId, userFriendId;
@dynamic hasUserFriendGroupIdOld, userFriendGroupIdOld;
@dynamic hasUserFriendGroupIdNew, userFriendGroupIdNew;

typedef struct C_business_relation_change_friend_group_rq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userMyselfId;
  uint64_t userFriendId;
  uint64_t userFriendGroupIdOld;
  uint64_t userFriendGroupIdNew;
} C_business_relation_change_friend_group_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_change_friend_group_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_change_friend_group_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_change_friend_group_rq_FieldNumber_UserFriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_change_friend_group_rq__storage_, userFriendId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroupIdOld",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_change_friend_group_rq_FieldNumber_UserFriendGroupIdOld,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_change_friend_group_rq__storage_, userFriendGroupIdOld),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroupIdNew",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_change_friend_group_rq_FieldNumber_UserFriendGroupIdNew,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C_business_relation_change_friend_group_rq__storage_, userFriendGroupIdNew),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_change_friend_group_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_change_friend_group_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_change_friend_group_rq_msg

GPBEnumDescriptor *C_business_relation_change_friend_group_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_change_friend_group_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_change_friend_group_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_change_friend_group_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_change_friend_group_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_change_friend_group_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_change_friend_group_rs

@implementation C_business_relation_change_friend_group_rs

@dynamic hasError, error;
@dynamic hasUserFriendId, userFriendId;
@dynamic hasUserFriendGroupIdOld, userFriendGroupIdOld;
@dynamic hasUserFriendGroupIdNew, userFriendGroupIdNew;

typedef struct C_business_relation_change_friend_group_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  uint64_t userFriendId;
  uint64_t userFriendGroupIdOld;
  uint64_t userFriendGroupIdNew;
} C_business_relation_change_friend_group_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_change_friend_group_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_change_friend_group_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userFriendId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_change_friend_group_rs_FieldNumber_UserFriendId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_change_friend_group_rs__storage_, userFriendId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroupIdOld",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_change_friend_group_rs_FieldNumber_UserFriendGroupIdOld,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_change_friend_group_rs__storage_, userFriendGroupIdOld),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userFriendGroupIdNew",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_change_friend_group_rs_FieldNumber_UserFriendGroupIdNew,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(C_business_relation_change_friend_group_rs__storage_, userFriendGroupIdNew),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_change_friend_group_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_change_friend_group_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_change_friend_group_rs_msg

GPBEnumDescriptor *C_business_relation_change_friend_group_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_change_friend_group_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_change_friend_group_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_change_friend_group_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_change_friend_group_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_change_friend_group_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_query_friends_apply_rq

@implementation C_business_relation_query_friends_apply_rq

@dynamic hasUserMyselfId, userMyselfId;

typedef struct C_business_relation_query_friends_apply_rq__storage_ {
  uint32_t _has_storage_[1];
  uint64_t userMyselfId;
} C_business_relation_query_friends_apply_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_query_friends_apply_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_query_friends_apply_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_query_friends_apply_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_query_friends_apply_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_query_friends_apply_rq_msg

GPBEnumDescriptor *C_business_relation_query_friends_apply_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_query_friends_apply_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_query_friends_apply_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_query_friends_apply_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_query_friends_apply_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_query_friends_apply_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_query_friends_apply_rs

@implementation C_business_relation_query_friends_apply_rs

@dynamic hasError, error;
@dynamic applySArray, applySArray_Count;

typedef struct C_business_relation_query_friends_apply_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  NSMutableArray *applySArray;
} C_business_relation_query_friends_apply_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_query_friends_apply_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_query_friends_apply_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "applySArray",
        .dataTypeSpecific.className = GPBStringifySymbol(B_business_relation_friend_apply),
        .number = C_business_relation_query_friends_apply_rs_FieldNumber_ApplySArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(C_business_relation_query_friends_apply_rs__storage_, applySArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_query_friends_apply_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_query_friends_apply_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_query_friends_apply_rs_msg

GPBEnumDescriptor *C_business_relation_query_friends_apply_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_query_friends_apply_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_query_friends_apply_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_query_friends_apply_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_query_friends_apply_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_query_friends_apply_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_talk_friend_rq

@implementation C_business_relation_talk_friend_rq

@dynamic hasUserMyselfId, userMyselfId;
@dynamic hasUserTalkId, userTalkId;
@dynamic hasTalking, talking;

typedef struct C_business_relation_talk_friend_rq__storage_ {
  uint32_t _has_storage_[1];
  NSString *talking;
  uint64_t userMyselfId;
  uint64_t userTalkId;
} C_business_relation_talk_friend_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userMyselfId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_talk_friend_rq_FieldNumber_UserMyselfId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_talk_friend_rq__storage_, userMyselfId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "userTalkId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_talk_friend_rq_FieldNumber_UserTalkId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_talk_friend_rq__storage_, userTalkId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "talking",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_talk_friend_rq_FieldNumber_Talking,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(C_business_relation_talk_friend_rq__storage_, talking),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_talk_friend_rq class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_talk_friend_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_talk_friend_rq_msg

GPBEnumDescriptor *C_business_relation_talk_friend_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_talk_friend_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_talk_friend_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_talk_friend_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_talk_friend_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_talk_friend_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_talk_friend_rs

@implementation C_business_relation_talk_friend_rs

@dynamic hasError, error;
@dynamic hasUserTalkId, userTalkId;

typedef struct C_business_relation_talk_friend_rs__storage_ {
  uint32_t _has_storage_[1];
  B_error_info *error;
  uint64_t userTalkId;
} C_business_relation_talk_friend_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = C_business_relation_talk_friend_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_talk_friend_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userTalkId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_talk_friend_rs_FieldNumber_UserTalkId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_talk_friend_rs__storage_, userTalkId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_talk_friend_rs class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_talk_friend_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_talk_friend_rs_msg

GPBEnumDescriptor *C_business_relation_talk_friend_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_talk_friend_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_talk_friend_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_talk_friend_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_talk_friend_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_talk_friend_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - C_business_relation_talk_friend_nt

@implementation C_business_relation_talk_friend_nt

@dynamic hasApplyTalkId, applyTalkId;
@dynamic hasTalking, talking;

typedef struct C_business_relation_talk_friend_nt__storage_ {
  uint32_t _has_storage_[1];
  NSString *talking;
  uint64_t applyTalkId;
} C_business_relation_talk_friend_nt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applyTalkId",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_talk_friend_nt_FieldNumber_ApplyTalkId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(C_business_relation_talk_friend_nt__storage_, applyTalkId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "talking",
        .dataTypeSpecific.className = NULL,
        .number = C_business_relation_talk_friend_nt_FieldNumber_Talking,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(C_business_relation_talk_friend_nt__storage_, talking),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[C_business_relation_talk_friend_nt class]
                                     rootClass:[C_business_relation_CBusinessRelationRoot class]
                                          file:C_business_relation_CBusinessRelationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(C_business_relation_talk_friend_nt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum C_business_relation_talk_friend_nt_msg

GPBEnumDescriptor *C_business_relation_talk_friend_nt_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        C_business_relation_talk_friend_nt_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(C_business_relation_talk_friend_nt_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:C_business_relation_talk_friend_nt_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL C_business_relation_talk_friend_nt_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case C_business_relation_talk_friend_nt_msg_Id:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
