// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: b_business_relation.proto

#ifndef PROTOBUF_b_5fbusiness_5frelation_2eproto__INCLUDED
#define PROTOBUF_b_5fbusiness_5frelation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace b_business_relation {
class friend_apply;
class friend_applyDefaultTypeInternal;
extern friend_applyDefaultTypeInternal _friend_apply_default_instance_;
class user_relation;
class user_relationDefaultTypeInternal;
extern user_relationDefaultTypeInternal _user_relation_default_instance_;
class user_relation_group;
class user_relation_groupDefaultTypeInternal;
extern user_relation_groupDefaultTypeInternal _user_relation_group_default_instance_;
}  // namespace b_business_relation

namespace b_business_relation {

namespace protobuf_b_5fbusiness_5frelation_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_b_5fbusiness_5frelation_2eproto

// ===================================================================

class user_relation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:b_business_relation.user_relation) */ {
 public:
  user_relation();
  virtual ~user_relation();

  user_relation(const user_relation& from);

  inline user_relation& operator=(const user_relation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_relation& default_instance();

  static inline const user_relation* internal_default_instance() {
    return reinterpret_cast<const user_relation*>(
               &_user_relation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(user_relation* other);

  // implements Message ----------------------------------------------

  inline user_relation* New() const PROTOBUF_FINAL { return New(NULL); }

  user_relation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_relation& from);
  void MergeFrom(const user_relation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_relation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string friend_remark = 4;
  bool has_friend_remark() const;
  void clear_friend_remark();
  static const int kFriendRemarkFieldNumber = 4;
  const ::std::string& friend_remark() const;
  void set_friend_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_remark(::std::string&& value);
  #endif
  void set_friend_remark(const char* value);
  void set_friend_remark(const char* value, size_t size);
  ::std::string* mutable_friend_remark();
  ::std::string* release_friend_remark();
  void set_allocated_friend_remark(::std::string* friend_remark);

  // required uint64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // required uint64 friend_group_id = 2;
  bool has_friend_group_id() const;
  void clear_friend_group_id();
  static const int kFriendGroupIdFieldNumber = 2;
  ::google::protobuf::uint64 friend_group_id() const;
  void set_friend_group_id(::google::protobuf::uint64 value);

  // required uint64 friend_id = 3;
  bool has_friend_id() const;
  void clear_friend_id();
  static const int kFriendIdFieldNumber = 3;
  ::google::protobuf::uint64 friend_id() const;
  void set_friend_id(::google::protobuf::uint64 value);

  // required uint32 build_friend_time = 5;
  bool has_build_friend_time() const;
  void clear_build_friend_time();
  static const int kBuildFriendTimeFieldNumber = 5;
  ::google::protobuf::uint32 build_friend_time() const;
  void set_build_friend_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:b_business_relation.user_relation)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_friend_group_id();
  void clear_has_friend_group_id();
  void set_has_friend_id();
  void clear_has_friend_id();
  void set_has_friend_remark();
  void clear_has_friend_remark();
  void set_has_build_friend_time();
  void clear_has_build_friend_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr friend_remark_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 friend_group_id_;
  ::google::protobuf::uint64 friend_id_;
  ::google::protobuf::uint32 build_friend_time_;
  friend struct protobuf_b_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_relation_group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:b_business_relation.user_relation_group) */ {
 public:
  user_relation_group();
  virtual ~user_relation_group();

  user_relation_group(const user_relation_group& from);

  inline user_relation_group& operator=(const user_relation_group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_relation_group& default_instance();

  static inline const user_relation_group* internal_default_instance() {
    return reinterpret_cast<const user_relation_group*>(
               &_user_relation_group_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(user_relation_group* other);

  // implements Message ----------------------------------------------

  inline user_relation_group* New() const PROTOBUF_FINAL { return New(NULL); }

  user_relation_group* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_relation_group& from);
  void MergeFrom(const user_relation_group& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_relation_group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string friend_group = 3;
  bool has_friend_group() const;
  void clear_friend_group();
  static const int kFriendGroupFieldNumber = 3;
  const ::std::string& friend_group() const;
  void set_friend_group(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_group(::std::string&& value);
  #endif
  void set_friend_group(const char* value);
  void set_friend_group(const char* value, size_t size);
  ::std::string* mutable_friend_group();
  ::std::string* release_friend_group();
  void set_allocated_friend_group(::std::string* friend_group);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required uint64 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:b_business_relation.user_relation_group)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_friend_group();
  void clear_has_friend_group();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr friend_group_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 user_id_;
  friend struct protobuf_b_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class friend_apply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:b_business_relation.friend_apply) */ {
 public:
  friend_apply();
  virtual ~friend_apply();

  friend_apply(const friend_apply& from);

  inline friend_apply& operator=(const friend_apply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_apply& default_instance();

  static inline const friend_apply* internal_default_instance() {
    return reinterpret_cast<const friend_apply*>(
               &_friend_apply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(friend_apply* other);

  // implements Message ----------------------------------------------

  inline friend_apply* New() const PROTOBUF_FINAL { return New(NULL); }

  friend_apply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const friend_apply& from);
  void MergeFrom(const friend_apply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(friend_apply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_apply_name = 2;
  bool has_user_apply_name() const;
  void clear_user_apply_name();
  static const int kUserApplyNameFieldNumber = 2;
  const ::std::string& user_apply_name() const;
  void set_user_apply_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_apply_name(::std::string&& value);
  #endif
  void set_user_apply_name(const char* value);
  void set_user_apply_name(const char* value, size_t size);
  ::std::string* mutable_user_apply_name();
  ::std::string* release_user_apply_name();
  void set_allocated_user_apply_name(::std::string* user_apply_name);

  // required string user_apply_nick = 3;
  bool has_user_apply_nick() const;
  void clear_user_apply_nick();
  static const int kUserApplyNickFieldNumber = 3;
  const ::std::string& user_apply_nick() const;
  void set_user_apply_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_apply_nick(::std::string&& value);
  #endif
  void set_user_apply_nick(const char* value);
  void set_user_apply_nick(const char* value, size_t size);
  ::std::string* mutable_user_apply_nick();
  ::std::string* release_user_apply_nick();
  void set_allocated_user_apply_nick(::std::string* user_apply_nick);

  // required string user_apply_description = 5;
  bool has_user_apply_description() const;
  void clear_user_apply_description();
  static const int kUserApplyDescriptionFieldNumber = 5;
  const ::std::string& user_apply_description() const;
  void set_user_apply_description(const ::std::string& value);
  #if LANG_CXX11
  void set_user_apply_description(::std::string&& value);
  #endif
  void set_user_apply_description(const char* value);
  void set_user_apply_description(const char* value, size_t size);
  ::std::string* mutable_user_apply_description();
  ::std::string* release_user_apply_description();
  void set_allocated_user_apply_description(::std::string* user_apply_description);

  // required uint64 user_apply_id = 1;
  bool has_user_apply_id() const;
  void clear_user_apply_id();
  static const int kUserApplyIdFieldNumber = 1;
  ::google::protobuf::uint64 user_apply_id() const;
  void set_user_apply_id(::google::protobuf::uint64 value);

  // required uint32 user_apply_create_time = 4;
  bool has_user_apply_create_time() const;
  void clear_user_apply_create_time();
  static const int kUserApplyCreateTimeFieldNumber = 4;
  ::google::protobuf::uint32 user_apply_create_time() const;
  void set_user_apply_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:b_business_relation.friend_apply)
 private:
  void set_has_user_apply_id();
  void clear_has_user_apply_id();
  void set_has_user_apply_name();
  void clear_has_user_apply_name();
  void set_has_user_apply_nick();
  void clear_has_user_apply_nick();
  void set_has_user_apply_create_time();
  void clear_has_user_apply_create_time();
  void set_has_user_apply_description();
  void clear_has_user_apply_description();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_apply_name_;
  ::google::protobuf::internal::ArenaStringPtr user_apply_nick_;
  ::google::protobuf::internal::ArenaStringPtr user_apply_description_;
  ::google::protobuf::uint64 user_apply_id_;
  ::google::protobuf::uint32 user_apply_create_time_;
  friend struct protobuf_b_5fbusiness_5frelation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// user_relation

// required uint64 user_id = 1;
inline bool user_relation::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_relation::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_relation::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_relation::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 user_relation::user_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.user_id)
  return user_id_;
}
inline void user_relation::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.user_id)
}

// required uint64 friend_group_id = 2;
inline bool user_relation::has_friend_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_relation::set_has_friend_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_relation::clear_has_friend_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_relation::clear_friend_group_id() {
  friend_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_group_id();
}
inline ::google::protobuf::uint64 user_relation::friend_group_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.friend_group_id)
  return friend_group_id_;
}
inline void user_relation::set_friend_group_id(::google::protobuf::uint64 value) {
  set_has_friend_group_id();
  friend_group_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.friend_group_id)
}

// required uint64 friend_id = 3;
inline bool user_relation::has_friend_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_relation::set_has_friend_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_relation::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_relation::clear_friend_id() {
  friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_id();
}
inline ::google::protobuf::uint64 user_relation::friend_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.friend_id)
  return friend_id_;
}
inline void user_relation::set_friend_id(::google::protobuf::uint64 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.friend_id)
}

// required string friend_remark = 4;
inline bool user_relation::has_friend_remark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_relation::set_has_friend_remark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_relation::clear_has_friend_remark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_relation::clear_friend_remark() {
  friend_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friend_remark();
}
inline const ::std::string& user_relation::friend_remark() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.friend_remark)
  return friend_remark_.GetNoArena();
}
inline void user_relation::set_friend_remark(const ::std::string& value) {
  set_has_friend_remark();
  friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.friend_remark)
}
#if LANG_CXX11
inline void user_relation::set_friend_remark(::std::string&& value) {
  set_has_friend_remark();
  friend_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.user_relation.friend_remark)
}
#endif
inline void user_relation::set_friend_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_friend_remark();
  friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.user_relation.friend_remark)
}
inline void user_relation::set_friend_remark(const char* value, size_t size) {
  set_has_friend_remark();
  friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.user_relation.friend_remark)
}
inline ::std::string* user_relation::mutable_friend_remark() {
  set_has_friend_remark();
  // @@protoc_insertion_point(field_mutable:b_business_relation.user_relation.friend_remark)
  return friend_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_relation::release_friend_remark() {
  // @@protoc_insertion_point(field_release:b_business_relation.user_relation.friend_remark)
  clear_has_friend_remark();
  return friend_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_relation::set_allocated_friend_remark(::std::string* friend_remark) {
  if (friend_remark != NULL) {
    set_has_friend_remark();
  } else {
    clear_has_friend_remark();
  }
  friend_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_remark);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.user_relation.friend_remark)
}

// required uint32 build_friend_time = 5;
inline bool user_relation::has_build_friend_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_relation::set_has_build_friend_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_relation::clear_has_build_friend_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_relation::clear_build_friend_time() {
  build_friend_time_ = 0u;
  clear_has_build_friend_time();
}
inline ::google::protobuf::uint32 user_relation::build_friend_time() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.build_friend_time)
  return build_friend_time_;
}
inline void user_relation::set_build_friend_time(::google::protobuf::uint32 value) {
  set_has_build_friend_time();
  build_friend_time_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.build_friend_time)
}

// -------------------------------------------------------------------

// user_relation_group

// required uint64 id = 1;
inline bool user_relation_group::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_relation_group::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_relation_group::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_relation_group::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 user_relation_group::id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation_group.id)
  return id_;
}
inline void user_relation_group::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation_group.id)
}

// required uint64 user_id = 2;
inline bool user_relation_group::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_relation_group::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_relation_group::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_relation_group::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 user_relation_group::user_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation_group.user_id)
  return user_id_;
}
inline void user_relation_group::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation_group.user_id)
}

// required string friend_group = 3;
inline bool user_relation_group::has_friend_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_relation_group::set_has_friend_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_relation_group::clear_has_friend_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_relation_group::clear_friend_group() {
  friend_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friend_group();
}
inline const ::std::string& user_relation_group::friend_group() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation_group.friend_group)
  return friend_group_.GetNoArena();
}
inline void user_relation_group::set_friend_group(const ::std::string& value) {
  set_has_friend_group();
  friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation_group.friend_group)
}
#if LANG_CXX11
inline void user_relation_group::set_friend_group(::std::string&& value) {
  set_has_friend_group();
  friend_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.user_relation_group.friend_group)
}
#endif
inline void user_relation_group::set_friend_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_friend_group();
  friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.user_relation_group.friend_group)
}
inline void user_relation_group::set_friend_group(const char* value, size_t size) {
  set_has_friend_group();
  friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.user_relation_group.friend_group)
}
inline ::std::string* user_relation_group::mutable_friend_group() {
  set_has_friend_group();
  // @@protoc_insertion_point(field_mutable:b_business_relation.user_relation_group.friend_group)
  return friend_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_relation_group::release_friend_group() {
  // @@protoc_insertion_point(field_release:b_business_relation.user_relation_group.friend_group)
  clear_has_friend_group();
  return friend_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_relation_group::set_allocated_friend_group(::std::string* friend_group) {
  if (friend_group != NULL) {
    set_has_friend_group();
  } else {
    clear_has_friend_group();
  }
  friend_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_group);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.user_relation_group.friend_group)
}

// -------------------------------------------------------------------

// friend_apply

// required uint64 user_apply_id = 1;
inline bool friend_apply::has_user_apply_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void friend_apply::set_has_user_apply_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void friend_apply::clear_has_user_apply_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void friend_apply::clear_user_apply_id() {
  user_apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_apply_id();
}
inline ::google::protobuf::uint64 friend_apply::user_apply_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_id)
  return user_apply_id_;
}
inline void friend_apply::set_user_apply_id(::google::protobuf::uint64 value) {
  set_has_user_apply_id();
  user_apply_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_id)
}

// required string user_apply_name = 2;
inline bool friend_apply::has_user_apply_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_apply::set_has_user_apply_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_apply::clear_has_user_apply_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_apply::clear_user_apply_name() {
  user_apply_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_apply_name();
}
inline const ::std::string& friend_apply::user_apply_name() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_name)
  return user_apply_name_.GetNoArena();
}
inline void friend_apply::set_user_apply_name(const ::std::string& value) {
  set_has_user_apply_name();
  user_apply_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_name)
}
#if LANG_CXX11
inline void friend_apply::set_user_apply_name(::std::string&& value) {
  set_has_user_apply_name();
  user_apply_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.friend_apply.user_apply_name)
}
#endif
inline void friend_apply::set_user_apply_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_apply_name();
  user_apply_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.friend_apply.user_apply_name)
}
inline void friend_apply::set_user_apply_name(const char* value, size_t size) {
  set_has_user_apply_name();
  user_apply_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.friend_apply.user_apply_name)
}
inline ::std::string* friend_apply::mutable_user_apply_name() {
  set_has_user_apply_name();
  // @@protoc_insertion_point(field_mutable:b_business_relation.friend_apply.user_apply_name)
  return user_apply_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* friend_apply::release_user_apply_name() {
  // @@protoc_insertion_point(field_release:b_business_relation.friend_apply.user_apply_name)
  clear_has_user_apply_name();
  return user_apply_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void friend_apply::set_allocated_user_apply_name(::std::string* user_apply_name) {
  if (user_apply_name != NULL) {
    set_has_user_apply_name();
  } else {
    clear_has_user_apply_name();
  }
  user_apply_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_apply_name);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.friend_apply.user_apply_name)
}

// required string user_apply_nick = 3;
inline bool friend_apply::has_user_apply_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_apply::set_has_user_apply_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_apply::clear_has_user_apply_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_apply::clear_user_apply_nick() {
  user_apply_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_apply_nick();
}
inline const ::std::string& friend_apply::user_apply_nick() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_nick)
  return user_apply_nick_.GetNoArena();
}
inline void friend_apply::set_user_apply_nick(const ::std::string& value) {
  set_has_user_apply_nick();
  user_apply_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_nick)
}
#if LANG_CXX11
inline void friend_apply::set_user_apply_nick(::std::string&& value) {
  set_has_user_apply_nick();
  user_apply_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.friend_apply.user_apply_nick)
}
#endif
inline void friend_apply::set_user_apply_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_apply_nick();
  user_apply_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.friend_apply.user_apply_nick)
}
inline void friend_apply::set_user_apply_nick(const char* value, size_t size) {
  set_has_user_apply_nick();
  user_apply_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.friend_apply.user_apply_nick)
}
inline ::std::string* friend_apply::mutable_user_apply_nick() {
  set_has_user_apply_nick();
  // @@protoc_insertion_point(field_mutable:b_business_relation.friend_apply.user_apply_nick)
  return user_apply_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* friend_apply::release_user_apply_nick() {
  // @@protoc_insertion_point(field_release:b_business_relation.friend_apply.user_apply_nick)
  clear_has_user_apply_nick();
  return user_apply_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void friend_apply::set_allocated_user_apply_nick(::std::string* user_apply_nick) {
  if (user_apply_nick != NULL) {
    set_has_user_apply_nick();
  } else {
    clear_has_user_apply_nick();
  }
  user_apply_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_apply_nick);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.friend_apply.user_apply_nick)
}

// required uint32 user_apply_create_time = 4;
inline bool friend_apply::has_user_apply_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void friend_apply::set_has_user_apply_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void friend_apply::clear_has_user_apply_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void friend_apply::clear_user_apply_create_time() {
  user_apply_create_time_ = 0u;
  clear_has_user_apply_create_time();
}
inline ::google::protobuf::uint32 friend_apply::user_apply_create_time() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_create_time)
  return user_apply_create_time_;
}
inline void friend_apply::set_user_apply_create_time(::google::protobuf::uint32 value) {
  set_has_user_apply_create_time();
  user_apply_create_time_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_create_time)
}

// required string user_apply_description = 5;
inline bool friend_apply::has_user_apply_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_apply::set_has_user_apply_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_apply::clear_has_user_apply_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_apply::clear_user_apply_description() {
  user_apply_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_apply_description();
}
inline const ::std::string& friend_apply::user_apply_description() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_description)
  return user_apply_description_.GetNoArena();
}
inline void friend_apply::set_user_apply_description(const ::std::string& value) {
  set_has_user_apply_description();
  user_apply_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_description)
}
#if LANG_CXX11
inline void friend_apply::set_user_apply_description(::std::string&& value) {
  set_has_user_apply_description();
  user_apply_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.friend_apply.user_apply_description)
}
#endif
inline void friend_apply::set_user_apply_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_apply_description();
  user_apply_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.friend_apply.user_apply_description)
}
inline void friend_apply::set_user_apply_description(const char* value, size_t size) {
  set_has_user_apply_description();
  user_apply_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.friend_apply.user_apply_description)
}
inline ::std::string* friend_apply::mutable_user_apply_description() {
  set_has_user_apply_description();
  // @@protoc_insertion_point(field_mutable:b_business_relation.friend_apply.user_apply_description)
  return user_apply_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* friend_apply::release_user_apply_description() {
  // @@protoc_insertion_point(field_release:b_business_relation.friend_apply.user_apply_description)
  clear_has_user_apply_description();
  return user_apply_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void friend_apply::set_allocated_user_apply_description(::std::string* user_apply_description) {
  if (user_apply_description != NULL) {
    set_has_user_apply_description();
  } else {
    clear_has_user_apply_description();
  }
  user_apply_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_apply_description);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.friend_apply.user_apply_description)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace b_business_relation

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_b_5fbusiness_5frelation_2eproto__INCLUDED
