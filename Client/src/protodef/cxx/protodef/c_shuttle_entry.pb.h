// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_shuttle_entry.proto

#ifndef PROTOBUF_c_5fshuttle_5fentry_2eproto__INCLUDED
#define PROTOBUF_c_5fshuttle_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "b_error.pb.h"
#include "b_math.pb.h"
#include "b_network.pb.h"
// @@protoc_insertion_point(includes)
namespace b_error {
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
}  // namespace b_error
namespace b_math {
class coord;
class coordDefaultTypeInternal;
extern coordDefaultTypeInternal _coord_default_instance_;
class mat3;
class mat3DefaultTypeInternal;
extern mat3DefaultTypeInternal _mat3_default_instance_;
class mat4;
class mat4DefaultTypeInternal;
extern mat4DefaultTypeInternal _mat4_default_instance_;
class vec2;
class vec2DefaultTypeInternal;
extern vec2DefaultTypeInternal _vec2_default_instance_;
class vec3;
class vec3DefaultTypeInternal;
extern vec3DefaultTypeInternal _vec3_default_instance_;
class vec4;
class vec4DefaultTypeInternal;
extern vec4DefaultTypeInternal _vec4_default_instance_;
}  // namespace b_math
namespace b_network {
class address;
class addressDefaultTypeInternal;
extern addressDefaultTypeInternal _address_default_instance_;
}  // namespace b_network
namespace c_shuttle_entry {
class knock_rq;
class knock_rqDefaultTypeInternal;
extern knock_rqDefaultTypeInternal _knock_rq_default_instance_;
class knock_rs;
class knock_rsDefaultTypeInternal;
extern knock_rsDefaultTypeInternal _knock_rs_default_instance_;
}  // namespace c_shuttle_entry

namespace c_shuttle_entry {

namespace protobuf_c_5fshuttle_5fentry_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_c_5fshuttle_5fentry_2eproto

enum knock_rq_msg {
  knock_rq_msg_id = 33558528
};
bool knock_rq_msg_IsValid(int value);
const knock_rq_msg knock_rq_msg_msg_MIN = knock_rq_msg_id;
const knock_rq_msg knock_rq_msg_msg_MAX = knock_rq_msg_id;
const int knock_rq_msg_msg_ARRAYSIZE = knock_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* knock_rq_msg_descriptor();
inline const ::std::string& knock_rq_msg_Name(knock_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    knock_rq_msg_descriptor(), value);
}
inline bool knock_rq_msg_Parse(
    const ::std::string& name, knock_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<knock_rq_msg>(
    knock_rq_msg_descriptor(), name, value);
}
enum knock_rs_msg {
  knock_rs_msg_id = 33558529
};
bool knock_rs_msg_IsValid(int value);
const knock_rs_msg knock_rs_msg_msg_MIN = knock_rs_msg_id;
const knock_rs_msg knock_rs_msg_msg_MAX = knock_rs_msg_id;
const int knock_rs_msg_msg_ARRAYSIZE = knock_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* knock_rs_msg_descriptor();
inline const ::std::string& knock_rs_msg_Name(knock_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    knock_rs_msg_descriptor(), value);
}
inline bool knock_rs_msg_Parse(
    const ::std::string& name, knock_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<knock_rs_msg>(
    knock_rs_msg_descriptor(), name, value);
}
enum msg {
  min_id = 33558528,
  max_id = 33558783
};
bool msg_IsValid(int value);
const msg msg_MIN = min_id;
const msg msg_MAX = max_id;
const int msg_ARRAYSIZE = msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* msg_descriptor();
inline const ::std::string& msg_Name(msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    msg_descriptor(), value);
}
inline bool msg_Parse(
    const ::std::string& name, msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<msg>(
    msg_descriptor(), name, value);
}
// ===================================================================

class knock_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_shuttle_entry.knock_rq) */ {
 public:
  knock_rq();
  virtual ~knock_rq();

  knock_rq(const knock_rq& from);

  inline knock_rq& operator=(const knock_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const knock_rq& default_instance();

  static inline const knock_rq* internal_default_instance() {
    return reinterpret_cast<const knock_rq*>(
               &_knock_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(knock_rq* other);

  // implements Message ----------------------------------------------

  inline knock_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  knock_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const knock_rq& from);
  void MergeFrom(const knock_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(knock_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef knock_rq_msg msg;
  static const msg id =
    knock_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return knock_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    knock_rq_msg_msg_MIN;
  static const msg msg_MAX =
    knock_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    knock_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return knock_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return knock_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return knock_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string native_client_version = 1 [default = ""];
  bool has_native_client_version() const;
  void clear_native_client_version();
  static const int kNativeClientVersionFieldNumber = 1;
  const ::std::string& native_client_version() const;
  void set_native_client_version(const ::std::string& value);
  #if LANG_CXX11
  void set_native_client_version(::std::string&& value);
  #endif
  void set_native_client_version(const char* value);
  void set_native_client_version(const char* value, size_t size);
  ::std::string* mutable_native_client_version();
  ::std::string* release_native_client_version();
  void set_allocated_native_client_version(::std::string* native_client_version);

  // required string native_source_version = 2 [default = ""];
  bool has_native_source_version() const;
  void clear_native_source_version();
  static const int kNativeSourceVersionFieldNumber = 2;
  const ::std::string& native_source_version() const;
  void set_native_source_version(const ::std::string& value);
  #if LANG_CXX11
  void set_native_source_version(::std::string&& value);
  #endif
  void set_native_source_version(const char* value);
  void set_native_source_version(const char* value, size_t size);
  ::std::string* mutable_native_source_version();
  ::std::string* release_native_source_version();
  void set_allocated_native_source_version(::std::string* native_source_version);

  // required .b_math.coord coord_info = 3;
  bool has_coord_info() const;
  void clear_coord_info();
  static const int kCoordInfoFieldNumber = 3;
  const ::b_math::coord& coord_info() const;
  ::b_math::coord* mutable_coord_info();
  ::b_math::coord* release_coord_info();
  void set_allocated_coord_info(::b_math::coord* coord_info);

  // @@protoc_insertion_point(class_scope:c_shuttle_entry.knock_rq)
 private:
  void set_has_native_client_version();
  void clear_has_native_client_version();
  void set_has_native_source_version();
  void clear_has_native_source_version();
  void set_has_coord_info();
  void clear_has_coord_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr native_client_version_;
  ::google::protobuf::internal::ArenaStringPtr native_source_version_;
  ::b_math::coord* coord_info_;
  friend struct protobuf_c_5fshuttle_5fentry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class knock_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_shuttle_entry.knock_rs) */ {
 public:
  knock_rs();
  virtual ~knock_rs();

  knock_rs(const knock_rs& from);

  inline knock_rs& operator=(const knock_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const knock_rs& default_instance();

  static inline const knock_rs* internal_default_instance() {
    return reinterpret_cast<const knock_rs*>(
               &_knock_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(knock_rs* other);

  // implements Message ----------------------------------------------

  inline knock_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  knock_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const knock_rs& from);
  void MergeFrom(const knock_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(knock_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef knock_rs_msg msg;
  static const msg id =
    knock_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return knock_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    knock_rs_msg_msg_MIN;
  static const msg msg_MAX =
    knock_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    knock_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return knock_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return knock_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return knock_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes public_key = 3;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 3;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // required string remote_client_version = 4 [default = ""];
  bool has_remote_client_version() const;
  void clear_remote_client_version();
  static const int kRemoteClientVersionFieldNumber = 4;
  const ::std::string& remote_client_version() const;
  void set_remote_client_version(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_client_version(::std::string&& value);
  #endif
  void set_remote_client_version(const char* value);
  void set_remote_client_version(const char* value, size_t size);
  ::std::string* mutable_remote_client_version();
  ::std::string* release_remote_client_version();
  void set_allocated_remote_client_version(::std::string* remote_client_version);

  // required string remote_source_version = 5 [default = ""];
  bool has_remote_source_version() const;
  void clear_remote_source_version();
  static const int kRemoteSourceVersionFieldNumber = 5;
  const ::std::string& remote_source_version() const;
  void set_remote_source_version(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_source_version(::std::string&& value);
  #endif
  void set_remote_source_version(const char* value);
  void set_remote_source_version(const char* value, size_t size);
  ::std::string* mutable_remote_source_version();
  ::std::string* release_remote_source_version();
  void set_allocated_remote_source_version(::std::string* remote_source_version);

  // required string remote_server_version = 6 [default = ""];
  bool has_remote_server_version() const;
  void clear_remote_server_version();
  static const int kRemoteServerVersionFieldNumber = 6;
  const ::std::string& remote_server_version() const;
  void set_remote_server_version(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_server_version(::std::string&& value);
  #endif
  void set_remote_server_version(const char* value);
  void set_remote_server_version(const char* value, size_t size);
  ::std::string* mutable_remote_server_version();
  ::std::string* release_remote_server_version();
  void set_allocated_remote_server_version(::std::string* remote_server_version);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required .b_network.address addr = 2;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::b_network::address& addr() const;
  ::b_network::address* mutable_addr();
  ::b_network::address* release_addr();
  void set_allocated_addr(::b_network::address* addr);

  // @@protoc_insertion_point(class_scope:c_shuttle_entry.knock_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_addr();
  void clear_has_addr();
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_remote_client_version();
  void clear_has_remote_client_version();
  void set_has_remote_source_version();
  void clear_has_remote_source_version();
  void set_has_remote_server_version();
  void clear_has_remote_server_version();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr remote_client_version_;
  ::google::protobuf::internal::ArenaStringPtr remote_source_version_;
  ::google::protobuf::internal::ArenaStringPtr remote_server_version_;
  ::b_error::info* error_;
  ::b_network::address* addr_;
  friend struct protobuf_c_5fshuttle_5fentry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// knock_rq

// required string native_client_version = 1 [default = ""];
inline bool knock_rq::has_native_client_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void knock_rq::set_has_native_client_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void knock_rq::clear_has_native_client_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void knock_rq::clear_native_client_version() {
  native_client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_native_client_version();
}
inline const ::std::string& knock_rq::native_client_version() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rq.native_client_version)
  return native_client_version_.GetNoArena();
}
inline void knock_rq::set_native_client_version(const ::std::string& value) {
  set_has_native_client_version();
  native_client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_entry.knock_rq.native_client_version)
}
#if LANG_CXX11
inline void knock_rq::set_native_client_version(::std::string&& value) {
  set_has_native_client_version();
  native_client_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_entry.knock_rq.native_client_version)
}
#endif
inline void knock_rq::set_native_client_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_native_client_version();
  native_client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_entry.knock_rq.native_client_version)
}
inline void knock_rq::set_native_client_version(const char* value, size_t size) {
  set_has_native_client_version();
  native_client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_entry.knock_rq.native_client_version)
}
inline ::std::string* knock_rq::mutable_native_client_version() {
  set_has_native_client_version();
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rq.native_client_version)
  return native_client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* knock_rq::release_native_client_version() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rq.native_client_version)
  clear_has_native_client_version();
  return native_client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void knock_rq::set_allocated_native_client_version(::std::string* native_client_version) {
  if (native_client_version != NULL) {
    set_has_native_client_version();
  } else {
    clear_has_native_client_version();
  }
  native_client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), native_client_version);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rq.native_client_version)
}

// required string native_source_version = 2 [default = ""];
inline bool knock_rq::has_native_source_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void knock_rq::set_has_native_source_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void knock_rq::clear_has_native_source_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void knock_rq::clear_native_source_version() {
  native_source_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_native_source_version();
}
inline const ::std::string& knock_rq::native_source_version() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rq.native_source_version)
  return native_source_version_.GetNoArena();
}
inline void knock_rq::set_native_source_version(const ::std::string& value) {
  set_has_native_source_version();
  native_source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_entry.knock_rq.native_source_version)
}
#if LANG_CXX11
inline void knock_rq::set_native_source_version(::std::string&& value) {
  set_has_native_source_version();
  native_source_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_entry.knock_rq.native_source_version)
}
#endif
inline void knock_rq::set_native_source_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_native_source_version();
  native_source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_entry.knock_rq.native_source_version)
}
inline void knock_rq::set_native_source_version(const char* value, size_t size) {
  set_has_native_source_version();
  native_source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_entry.knock_rq.native_source_version)
}
inline ::std::string* knock_rq::mutable_native_source_version() {
  set_has_native_source_version();
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rq.native_source_version)
  return native_source_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* knock_rq::release_native_source_version() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rq.native_source_version)
  clear_has_native_source_version();
  return native_source_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void knock_rq::set_allocated_native_source_version(::std::string* native_source_version) {
  if (native_source_version != NULL) {
    set_has_native_source_version();
  } else {
    clear_has_native_source_version();
  }
  native_source_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), native_source_version);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rq.native_source_version)
}

// required .b_math.coord coord_info = 3;
inline bool knock_rq::has_coord_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void knock_rq::set_has_coord_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void knock_rq::clear_has_coord_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void knock_rq::clear_coord_info() {
  if (coord_info_ != NULL) coord_info_->::b_math::coord::Clear();
  clear_has_coord_info();
}
inline const ::b_math::coord& knock_rq::coord_info() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rq.coord_info)
  return coord_info_ != NULL ? *coord_info_
                         : *::b_math::coord::internal_default_instance();
}
inline ::b_math::coord* knock_rq::mutable_coord_info() {
  set_has_coord_info();
  if (coord_info_ == NULL) {
    coord_info_ = new ::b_math::coord;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rq.coord_info)
  return coord_info_;
}
inline ::b_math::coord* knock_rq::release_coord_info() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rq.coord_info)
  clear_has_coord_info();
  ::b_math::coord* temp = coord_info_;
  coord_info_ = NULL;
  return temp;
}
inline void knock_rq::set_allocated_coord_info(::b_math::coord* coord_info) {
  delete coord_info_;
  coord_info_ = coord_info;
  if (coord_info) {
    set_has_coord_info();
  } else {
    clear_has_coord_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rq.coord_info)
}

// -------------------------------------------------------------------

// knock_rs

// required .b_error.info error = 1;
inline bool knock_rs::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void knock_rs::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void knock_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void knock_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& knock_rs::error() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* knock_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rs.error)
  return error_;
}
inline ::b_error::info* knock_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void knock_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rs.error)
}

// required .b_network.address addr = 2;
inline bool knock_rs::has_addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void knock_rs::set_has_addr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void knock_rs::clear_has_addr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void knock_rs::clear_addr() {
  if (addr_ != NULL) addr_->::b_network::address::Clear();
  clear_has_addr();
}
inline const ::b_network::address& knock_rs::addr() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rs.addr)
  return addr_ != NULL ? *addr_
                         : *::b_network::address::internal_default_instance();
}
inline ::b_network::address* knock_rs::mutable_addr() {
  set_has_addr();
  if (addr_ == NULL) {
    addr_ = new ::b_network::address;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rs.addr)
  return addr_;
}
inline ::b_network::address* knock_rs::release_addr() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rs.addr)
  clear_has_addr();
  ::b_network::address* temp = addr_;
  addr_ = NULL;
  return temp;
}
inline void knock_rs::set_allocated_addr(::b_network::address* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rs.addr)
}

// required bytes public_key = 3;
inline bool knock_rs::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void knock_rs::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void knock_rs::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void knock_rs::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& knock_rs::public_key() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rs.public_key)
  return public_key_.GetNoArena();
}
inline void knock_rs::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_entry.knock_rs.public_key)
}
#if LANG_CXX11
inline void knock_rs::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_entry.knock_rs.public_key)
}
#endif
inline void knock_rs::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_entry.knock_rs.public_key)
}
inline void knock_rs::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_entry.knock_rs.public_key)
}
inline ::std::string* knock_rs::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rs.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* knock_rs::release_public_key() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rs.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void knock_rs::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rs.public_key)
}

// required string remote_client_version = 4 [default = ""];
inline bool knock_rs::has_remote_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void knock_rs::set_has_remote_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void knock_rs::clear_has_remote_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void knock_rs::clear_remote_client_version() {
  remote_client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remote_client_version();
}
inline const ::std::string& knock_rs::remote_client_version() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rs.remote_client_version)
  return remote_client_version_.GetNoArena();
}
inline void knock_rs::set_remote_client_version(const ::std::string& value) {
  set_has_remote_client_version();
  remote_client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_entry.knock_rs.remote_client_version)
}
#if LANG_CXX11
inline void knock_rs::set_remote_client_version(::std::string&& value) {
  set_has_remote_client_version();
  remote_client_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_entry.knock_rs.remote_client_version)
}
#endif
inline void knock_rs::set_remote_client_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remote_client_version();
  remote_client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_entry.knock_rs.remote_client_version)
}
inline void knock_rs::set_remote_client_version(const char* value, size_t size) {
  set_has_remote_client_version();
  remote_client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_entry.knock_rs.remote_client_version)
}
inline ::std::string* knock_rs::mutable_remote_client_version() {
  set_has_remote_client_version();
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rs.remote_client_version)
  return remote_client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* knock_rs::release_remote_client_version() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rs.remote_client_version)
  clear_has_remote_client_version();
  return remote_client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void knock_rs::set_allocated_remote_client_version(::std::string* remote_client_version) {
  if (remote_client_version != NULL) {
    set_has_remote_client_version();
  } else {
    clear_has_remote_client_version();
  }
  remote_client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_client_version);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rs.remote_client_version)
}

// required string remote_source_version = 5 [default = ""];
inline bool knock_rs::has_remote_source_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void knock_rs::set_has_remote_source_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void knock_rs::clear_has_remote_source_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void knock_rs::clear_remote_source_version() {
  remote_source_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remote_source_version();
}
inline const ::std::string& knock_rs::remote_source_version() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rs.remote_source_version)
  return remote_source_version_.GetNoArena();
}
inline void knock_rs::set_remote_source_version(const ::std::string& value) {
  set_has_remote_source_version();
  remote_source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_entry.knock_rs.remote_source_version)
}
#if LANG_CXX11
inline void knock_rs::set_remote_source_version(::std::string&& value) {
  set_has_remote_source_version();
  remote_source_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_entry.knock_rs.remote_source_version)
}
#endif
inline void knock_rs::set_remote_source_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remote_source_version();
  remote_source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_entry.knock_rs.remote_source_version)
}
inline void knock_rs::set_remote_source_version(const char* value, size_t size) {
  set_has_remote_source_version();
  remote_source_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_entry.knock_rs.remote_source_version)
}
inline ::std::string* knock_rs::mutable_remote_source_version() {
  set_has_remote_source_version();
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rs.remote_source_version)
  return remote_source_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* knock_rs::release_remote_source_version() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rs.remote_source_version)
  clear_has_remote_source_version();
  return remote_source_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void knock_rs::set_allocated_remote_source_version(::std::string* remote_source_version) {
  if (remote_source_version != NULL) {
    set_has_remote_source_version();
  } else {
    clear_has_remote_source_version();
  }
  remote_source_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_source_version);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rs.remote_source_version)
}

// required string remote_server_version = 6 [default = ""];
inline bool knock_rs::has_remote_server_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void knock_rs::set_has_remote_server_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void knock_rs::clear_has_remote_server_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void knock_rs::clear_remote_server_version() {
  remote_server_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remote_server_version();
}
inline const ::std::string& knock_rs::remote_server_version() const {
  // @@protoc_insertion_point(field_get:c_shuttle_entry.knock_rs.remote_server_version)
  return remote_server_version_.GetNoArena();
}
inline void knock_rs::set_remote_server_version(const ::std::string& value) {
  set_has_remote_server_version();
  remote_server_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_entry.knock_rs.remote_server_version)
}
#if LANG_CXX11
inline void knock_rs::set_remote_server_version(::std::string&& value) {
  set_has_remote_server_version();
  remote_server_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_entry.knock_rs.remote_server_version)
}
#endif
inline void knock_rs::set_remote_server_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_remote_server_version();
  remote_server_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_entry.knock_rs.remote_server_version)
}
inline void knock_rs::set_remote_server_version(const char* value, size_t size) {
  set_has_remote_server_version();
  remote_server_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_entry.knock_rs.remote_server_version)
}
inline ::std::string* knock_rs::mutable_remote_server_version() {
  set_has_remote_server_version();
  // @@protoc_insertion_point(field_mutable:c_shuttle_entry.knock_rs.remote_server_version)
  return remote_server_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* knock_rs::release_remote_server_version() {
  // @@protoc_insertion_point(field_release:c_shuttle_entry.knock_rs.remote_server_version)
  clear_has_remote_server_version();
  return remote_server_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void knock_rs::set_allocated_remote_server_version(::std::string* remote_server_version) {
  if (remote_server_version != NULL) {
    set_has_remote_server_version();
  } else {
    clear_has_remote_server_version();
  }
  remote_server_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_server_version);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_entry.knock_rs.remote_server_version)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace c_shuttle_entry

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::c_shuttle_entry::knock_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_entry::knock_rq_msg>() {
  return ::c_shuttle_entry::knock_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_shuttle_entry::knock_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_entry::knock_rs_msg>() {
  return ::c_shuttle_entry::knock_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_shuttle_entry::msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_entry::msg>() {
  return ::c_shuttle_entry::msg_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_c_5fshuttle_5fentry_2eproto__INCLUDED
