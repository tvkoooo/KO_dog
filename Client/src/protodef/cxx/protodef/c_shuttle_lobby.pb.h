// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_shuttle_lobby.proto

#ifndef PROTOBUF_c_5fshuttle_5flobby_2eproto__INCLUDED
#define PROTOBUF_c_5fshuttle_5flobby_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "b_error.pb.h"
#include "b_math.pb.h"
// @@protoc_insertion_point(includes)
namespace b_error {
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
}  // namespace b_error
namespace b_math {
class coord;
class coordDefaultTypeInternal;
extern coordDefaultTypeInternal _coord_default_instance_;
class mat3;
class mat3DefaultTypeInternal;
extern mat3DefaultTypeInternal _mat3_default_instance_;
class mat4;
class mat4DefaultTypeInternal;
extern mat4DefaultTypeInternal _mat4_default_instance_;
class vec2;
class vec2DefaultTypeInternal;
extern vec2DefaultTypeInternal _vec2_default_instance_;
class vec3;
class vec3DefaultTypeInternal;
extern vec3DefaultTypeInternal _vec3_default_instance_;
class vec4;
class vec4DefaultTypeInternal;
extern vec4DefaultTypeInternal _vec4_default_instance_;
}  // namespace b_math
namespace c_shuttle_lobby {
class exchange_key_rq;
class exchange_key_rqDefaultTypeInternal;
extern exchange_key_rqDefaultTypeInternal _exchange_key_rq_default_instance_;
class exchange_key_rs;
class exchange_key_rsDefaultTypeInternal;
extern exchange_key_rsDefaultTypeInternal _exchange_key_rs_default_instance_;
class heartbeat_rq;
class heartbeat_rqDefaultTypeInternal;
extern heartbeat_rqDefaultTypeInternal _heartbeat_rq_default_instance_;
class heartbeat_rs;
class heartbeat_rsDefaultTypeInternal;
extern heartbeat_rsDefaultTypeInternal _heartbeat_rs_default_instance_;
class token_verify_rq;
class token_verify_rqDefaultTypeInternal;
extern token_verify_rqDefaultTypeInternal _token_verify_rq_default_instance_;
class token_verify_rs;
class token_verify_rsDefaultTypeInternal;
extern token_verify_rsDefaultTypeInternal _token_verify_rs_default_instance_;
}  // namespace c_shuttle_lobby

namespace c_shuttle_lobby {

namespace protobuf_c_5fshuttle_5flobby_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_c_5fshuttle_5flobby_2eproto

enum exchange_key_rq_msg {
  exchange_key_rq_msg_id = 33558784
};
bool exchange_key_rq_msg_IsValid(int value);
const exchange_key_rq_msg exchange_key_rq_msg_msg_MIN = exchange_key_rq_msg_id;
const exchange_key_rq_msg exchange_key_rq_msg_msg_MAX = exchange_key_rq_msg_id;
const int exchange_key_rq_msg_msg_ARRAYSIZE = exchange_key_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* exchange_key_rq_msg_descriptor();
inline const ::std::string& exchange_key_rq_msg_Name(exchange_key_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    exchange_key_rq_msg_descriptor(), value);
}
inline bool exchange_key_rq_msg_Parse(
    const ::std::string& name, exchange_key_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<exchange_key_rq_msg>(
    exchange_key_rq_msg_descriptor(), name, value);
}
enum exchange_key_rs_msg {
  exchange_key_rs_msg_id = 33558785
};
bool exchange_key_rs_msg_IsValid(int value);
const exchange_key_rs_msg exchange_key_rs_msg_msg_MIN = exchange_key_rs_msg_id;
const exchange_key_rs_msg exchange_key_rs_msg_msg_MAX = exchange_key_rs_msg_id;
const int exchange_key_rs_msg_msg_ARRAYSIZE = exchange_key_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* exchange_key_rs_msg_descriptor();
inline const ::std::string& exchange_key_rs_msg_Name(exchange_key_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    exchange_key_rs_msg_descriptor(), value);
}
inline bool exchange_key_rs_msg_Parse(
    const ::std::string& name, exchange_key_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<exchange_key_rs_msg>(
    exchange_key_rs_msg_descriptor(), name, value);
}
enum token_verify_rq_msg {
  token_verify_rq_msg_id = 33558786
};
bool token_verify_rq_msg_IsValid(int value);
const token_verify_rq_msg token_verify_rq_msg_msg_MIN = token_verify_rq_msg_id;
const token_verify_rq_msg token_verify_rq_msg_msg_MAX = token_verify_rq_msg_id;
const int token_verify_rq_msg_msg_ARRAYSIZE = token_verify_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* token_verify_rq_msg_descriptor();
inline const ::std::string& token_verify_rq_msg_Name(token_verify_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    token_verify_rq_msg_descriptor(), value);
}
inline bool token_verify_rq_msg_Parse(
    const ::std::string& name, token_verify_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<token_verify_rq_msg>(
    token_verify_rq_msg_descriptor(), name, value);
}
enum token_verify_rs_msg {
  token_verify_rs_msg_id = 33558787
};
bool token_verify_rs_msg_IsValid(int value);
const token_verify_rs_msg token_verify_rs_msg_msg_MIN = token_verify_rs_msg_id;
const token_verify_rs_msg token_verify_rs_msg_msg_MAX = token_verify_rs_msg_id;
const int token_verify_rs_msg_msg_ARRAYSIZE = token_verify_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* token_verify_rs_msg_descriptor();
inline const ::std::string& token_verify_rs_msg_Name(token_verify_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    token_verify_rs_msg_descriptor(), value);
}
inline bool token_verify_rs_msg_Parse(
    const ::std::string& name, token_verify_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<token_verify_rs_msg>(
    token_verify_rs_msg_descriptor(), name, value);
}
enum heartbeat_rq_msg {
  heartbeat_rq_msg_id = 33558788
};
bool heartbeat_rq_msg_IsValid(int value);
const heartbeat_rq_msg heartbeat_rq_msg_msg_MIN = heartbeat_rq_msg_id;
const heartbeat_rq_msg heartbeat_rq_msg_msg_MAX = heartbeat_rq_msg_id;
const int heartbeat_rq_msg_msg_ARRAYSIZE = heartbeat_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* heartbeat_rq_msg_descriptor();
inline const ::std::string& heartbeat_rq_msg_Name(heartbeat_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    heartbeat_rq_msg_descriptor(), value);
}
inline bool heartbeat_rq_msg_Parse(
    const ::std::string& name, heartbeat_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<heartbeat_rq_msg>(
    heartbeat_rq_msg_descriptor(), name, value);
}
enum heartbeat_rs_msg {
  heartbeat_rs_msg_id = 33558789
};
bool heartbeat_rs_msg_IsValid(int value);
const heartbeat_rs_msg heartbeat_rs_msg_msg_MIN = heartbeat_rs_msg_id;
const heartbeat_rs_msg heartbeat_rs_msg_msg_MAX = heartbeat_rs_msg_id;
const int heartbeat_rs_msg_msg_ARRAYSIZE = heartbeat_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* heartbeat_rs_msg_descriptor();
inline const ::std::string& heartbeat_rs_msg_Name(heartbeat_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    heartbeat_rs_msg_descriptor(), value);
}
inline bool heartbeat_rs_msg_Parse(
    const ::std::string& name, heartbeat_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<heartbeat_rs_msg>(
    heartbeat_rs_msg_descriptor(), name, value);
}
enum msg {
  min_id = 33558784,
  max_id = 33559039
};
bool msg_IsValid(int value);
const msg msg_MIN = min_id;
const msg msg_MAX = max_id;
const int msg_ARRAYSIZE = msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* msg_descriptor();
inline const ::std::string& msg_Name(msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    msg_descriptor(), value);
}
inline bool msg_Parse(
    const ::std::string& name, msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<msg>(
    msg_descriptor(), name, value);
}
// ===================================================================

class exchange_key_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_shuttle_lobby.exchange_key_rq) */ {
 public:
  exchange_key_rq();
  virtual ~exchange_key_rq();

  exchange_key_rq(const exchange_key_rq& from);

  inline exchange_key_rq& operator=(const exchange_key_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exchange_key_rq& default_instance();

  static inline const exchange_key_rq* internal_default_instance() {
    return reinterpret_cast<const exchange_key_rq*>(
               &_exchange_key_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(exchange_key_rq* other);

  // implements Message ----------------------------------------------

  inline exchange_key_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  exchange_key_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const exchange_key_rq& from);
  void MergeFrom(const exchange_key_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(exchange_key_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef exchange_key_rq_msg msg;
  static const msg id =
    exchange_key_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return exchange_key_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    exchange_key_rq_msg_msg_MIN;
  static const msg msg_MAX =
    exchange_key_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    exchange_key_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return exchange_key_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return exchange_key_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return exchange_key_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes public_key = 1;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // required bytes encrypt_key_l = 2;
  bool has_encrypt_key_l() const;
  void clear_encrypt_key_l();
  static const int kEncryptKeyLFieldNumber = 2;
  const ::std::string& encrypt_key_l() const;
  void set_encrypt_key_l(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypt_key_l(::std::string&& value);
  #endif
  void set_encrypt_key_l(const char* value);
  void set_encrypt_key_l(const void* value, size_t size);
  ::std::string* mutable_encrypt_key_l();
  ::std::string* release_encrypt_key_l();
  void set_allocated_encrypt_key_l(::std::string* encrypt_key_l);

  // required uint32 version = 3 [default = 0];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_shuttle_lobby.exchange_key_rq)
 private:
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_encrypt_key_l();
  void clear_has_encrypt_key_l();
  void set_has_version();
  void clear_has_version();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr encrypt_key_l_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_c_5fshuttle_5flobby_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class exchange_key_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_shuttle_lobby.exchange_key_rs) */ {
 public:
  exchange_key_rs();
  virtual ~exchange_key_rs();

  exchange_key_rs(const exchange_key_rs& from);

  inline exchange_key_rs& operator=(const exchange_key_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exchange_key_rs& default_instance();

  static inline const exchange_key_rs* internal_default_instance() {
    return reinterpret_cast<const exchange_key_rs*>(
               &_exchange_key_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(exchange_key_rs* other);

  // implements Message ----------------------------------------------

  inline exchange_key_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  exchange_key_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const exchange_key_rs& from);
  void MergeFrom(const exchange_key_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(exchange_key_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef exchange_key_rs_msg msg;
  static const msg id =
    exchange_key_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return exchange_key_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    exchange_key_rs_msg_msg_MIN;
  static const msg msg_MAX =
    exchange_key_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    exchange_key_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return exchange_key_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return exchange_key_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return exchange_key_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes encrypt_key_r = 2;
  bool has_encrypt_key_r() const;
  void clear_encrypt_key_r();
  static const int kEncryptKeyRFieldNumber = 2;
  const ::std::string& encrypt_key_r() const;
  void set_encrypt_key_r(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypt_key_r(::std::string&& value);
  #endif
  void set_encrypt_key_r(const char* value);
  void set_encrypt_key_r(const void* value, size_t size);
  ::std::string* mutable_encrypt_key_r();
  ::std::string* release_encrypt_key_r();
  void set_allocated_encrypt_key_r(::std::string* encrypt_key_r);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // @@protoc_insertion_point(class_scope:c_shuttle_lobby.exchange_key_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_encrypt_key_r();
  void clear_has_encrypt_key_r();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr encrypt_key_r_;
  ::b_error::info* error_;
  friend struct protobuf_c_5fshuttle_5flobby_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class token_verify_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_shuttle_lobby.token_verify_rq) */ {
 public:
  token_verify_rq();
  virtual ~token_verify_rq();

  token_verify_rq(const token_verify_rq& from);

  inline token_verify_rq& operator=(const token_verify_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const token_verify_rq& default_instance();

  static inline const token_verify_rq* internal_default_instance() {
    return reinterpret_cast<const token_verify_rq*>(
               &_token_verify_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(token_verify_rq* other);

  // implements Message ----------------------------------------------

  inline token_verify_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  token_verify_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const token_verify_rq& from);
  void MergeFrom(const token_verify_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(token_verify_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef token_verify_rq_msg msg;
  static const msg id =
    token_verify_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return token_verify_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    token_verify_rq_msg_msg_MIN;
  static const msg msg_MAX =
    token_verify_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    token_verify_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return token_verify_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return token_verify_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return token_verify_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string token = 2 [default = ""];
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required uint64 uid = 1 [default = 0];
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_shuttle_lobby.token_verify_rq)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_token();
  void clear_has_token();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 uid_;
  friend struct protobuf_c_5fshuttle_5flobby_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class token_verify_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_shuttle_lobby.token_verify_rs) */ {
 public:
  token_verify_rs();
  virtual ~token_verify_rs();

  token_verify_rs(const token_verify_rs& from);

  inline token_verify_rs& operator=(const token_verify_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const token_verify_rs& default_instance();

  static inline const token_verify_rs* internal_default_instance() {
    return reinterpret_cast<const token_verify_rs*>(
               &_token_verify_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(token_verify_rs* other);

  // implements Message ----------------------------------------------

  inline token_verify_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  token_verify_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const token_verify_rs& from);
  void MergeFrom(const token_verify_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(token_verify_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef token_verify_rs_msg msg;
  static const msg id =
    token_verify_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return token_verify_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    token_verify_rs_msg_msg_MIN;
  static const msg msg_MAX =
    token_verify_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    token_verify_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return token_verify_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return token_verify_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return token_verify_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string token = 3 [default = ""];
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 uid = 2 [default = 0];
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_shuttle_lobby.token_verify_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_uid();
  void clear_has_uid();
  void set_has_token();
  void clear_has_token();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 uid_;
  friend struct protobuf_c_5fshuttle_5flobby_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class heartbeat_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_shuttle_lobby.heartbeat_rq) */ {
 public:
  heartbeat_rq();
  virtual ~heartbeat_rq();

  heartbeat_rq(const heartbeat_rq& from);

  inline heartbeat_rq& operator=(const heartbeat_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const heartbeat_rq& default_instance();

  static inline const heartbeat_rq* internal_default_instance() {
    return reinterpret_cast<const heartbeat_rq*>(
               &_heartbeat_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(heartbeat_rq* other);

  // implements Message ----------------------------------------------

  inline heartbeat_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  heartbeat_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const heartbeat_rq& from);
  void MergeFrom(const heartbeat_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(heartbeat_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef heartbeat_rq_msg msg;
  static const msg id =
    heartbeat_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return heartbeat_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    heartbeat_rq_msg_msg_MIN;
  static const msg msg_MAX =
    heartbeat_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    heartbeat_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return heartbeat_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return heartbeat_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return heartbeat_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_math.coord coord_info = 3;
  bool has_coord_info() const;
  void clear_coord_info();
  static const int kCoordInfoFieldNumber = 3;
  const ::b_math::coord& coord_info() const;
  ::b_math::coord* mutable_coord_info();
  ::b_math::coord* release_coord_info();
  void set_allocated_coord_info(::b_math::coord* coord_info);

  // required uint64 uid = 1 [default = 0];
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // required uint64 timecode_native = 2 [default = 0];
  bool has_timecode_native() const;
  void clear_timecode_native();
  static const int kTimecodeNativeFieldNumber = 2;
  ::google::protobuf::uint64 timecode_native() const;
  void set_timecode_native(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_shuttle_lobby.heartbeat_rq)
 private:
  void set_has_uid();
  void clear_has_uid();
  void set_has_timecode_native();
  void clear_has_timecode_native();
  void set_has_coord_info();
  void clear_has_coord_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_math::coord* coord_info_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 timecode_native_;
  friend struct protobuf_c_5fshuttle_5flobby_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class heartbeat_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_shuttle_lobby.heartbeat_rs) */ {
 public:
  heartbeat_rs();
  virtual ~heartbeat_rs();

  heartbeat_rs(const heartbeat_rs& from);

  inline heartbeat_rs& operator=(const heartbeat_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const heartbeat_rs& default_instance();

  static inline const heartbeat_rs* internal_default_instance() {
    return reinterpret_cast<const heartbeat_rs*>(
               &_heartbeat_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(heartbeat_rs* other);

  // implements Message ----------------------------------------------

  inline heartbeat_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  heartbeat_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const heartbeat_rs& from);
  void MergeFrom(const heartbeat_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(heartbeat_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef heartbeat_rs_msg msg;
  static const msg id =
    heartbeat_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return heartbeat_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    heartbeat_rs_msg_msg_MIN;
  static const msg msg_MAX =
    heartbeat_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    heartbeat_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return heartbeat_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return heartbeat_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return heartbeat_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required .b_math.coord coord_info = 4;
  bool has_coord_info() const;
  void clear_coord_info();
  static const int kCoordInfoFieldNumber = 4;
  const ::b_math::coord& coord_info() const;
  ::b_math::coord* mutable_coord_info();
  ::b_math::coord* release_coord_info();
  void set_allocated_coord_info(::b_math::coord* coord_info);

  // required uint64 uid = 2 [default = 0];
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // required uint64 timecode_native = 3 [default = 0];
  bool has_timecode_native() const;
  void clear_timecode_native();
  static const int kTimecodeNativeFieldNumber = 3;
  ::google::protobuf::uint64 timecode_native() const;
  void set_timecode_native(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_shuttle_lobby.heartbeat_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_uid();
  void clear_has_uid();
  void set_has_timecode_native();
  void clear_has_timecode_native();
  void set_has_coord_info();
  void clear_has_coord_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::b_math::coord* coord_info_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 timecode_native_;
  friend struct protobuf_c_5fshuttle_5flobby_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// exchange_key_rq

// required bytes public_key = 1;
inline bool exchange_key_rq::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exchange_key_rq::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exchange_key_rq::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exchange_key_rq::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& exchange_key_rq::public_key() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rq.public_key)
  return public_key_.GetNoArena();
}
inline void exchange_key_rq::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.exchange_key_rq.public_key)
}
#if LANG_CXX11
inline void exchange_key_rq::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.exchange_key_rq.public_key)
}
#endif
inline void exchange_key_rq::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.exchange_key_rq.public_key)
}
inline void exchange_key_rq::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.exchange_key_rq.public_key)
}
inline ::std::string* exchange_key_rq::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.exchange_key_rq.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* exchange_key_rq::release_public_key() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.exchange_key_rq.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void exchange_key_rq::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.exchange_key_rq.public_key)
}

// required bytes encrypt_key_l = 2;
inline bool exchange_key_rq::has_encrypt_key_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exchange_key_rq::set_has_encrypt_key_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exchange_key_rq::clear_has_encrypt_key_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exchange_key_rq::clear_encrypt_key_l() {
  encrypt_key_l_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypt_key_l();
}
inline const ::std::string& exchange_key_rq::encrypt_key_l() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rq.encrypt_key_l)
  return encrypt_key_l_.GetNoArena();
}
inline void exchange_key_rq::set_encrypt_key_l(const ::std::string& value) {
  set_has_encrypt_key_l();
  encrypt_key_l_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.exchange_key_rq.encrypt_key_l)
}
#if LANG_CXX11
inline void exchange_key_rq::set_encrypt_key_l(::std::string&& value) {
  set_has_encrypt_key_l();
  encrypt_key_l_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.exchange_key_rq.encrypt_key_l)
}
#endif
inline void exchange_key_rq::set_encrypt_key_l(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encrypt_key_l();
  encrypt_key_l_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.exchange_key_rq.encrypt_key_l)
}
inline void exchange_key_rq::set_encrypt_key_l(const void* value, size_t size) {
  set_has_encrypt_key_l();
  encrypt_key_l_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.exchange_key_rq.encrypt_key_l)
}
inline ::std::string* exchange_key_rq::mutable_encrypt_key_l() {
  set_has_encrypt_key_l();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.exchange_key_rq.encrypt_key_l)
  return encrypt_key_l_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* exchange_key_rq::release_encrypt_key_l() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.exchange_key_rq.encrypt_key_l)
  clear_has_encrypt_key_l();
  return encrypt_key_l_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void exchange_key_rq::set_allocated_encrypt_key_l(::std::string* encrypt_key_l) {
  if (encrypt_key_l != NULL) {
    set_has_encrypt_key_l();
  } else {
    clear_has_encrypt_key_l();
  }
  encrypt_key_l_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypt_key_l);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.exchange_key_rq.encrypt_key_l)
}

// required uint32 version = 3 [default = 0];
inline bool exchange_key_rq::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void exchange_key_rq::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void exchange_key_rq::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void exchange_key_rq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 exchange_key_rq::version() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rq.version)
  return version_;
}
inline void exchange_key_rq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.exchange_key_rq.version)
}

// -------------------------------------------------------------------

// exchange_key_rs

// required .b_error.info error = 1;
inline bool exchange_key_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exchange_key_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exchange_key_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exchange_key_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& exchange_key_rs::error() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* exchange_key_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.exchange_key_rs.error)
  return error_;
}
inline ::b_error::info* exchange_key_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.exchange_key_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void exchange_key_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.exchange_key_rs.error)
}

// required bytes encrypt_key_r = 2;
inline bool exchange_key_rs::has_encrypt_key_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exchange_key_rs::set_has_encrypt_key_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exchange_key_rs::clear_has_encrypt_key_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exchange_key_rs::clear_encrypt_key_r() {
  encrypt_key_r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypt_key_r();
}
inline const ::std::string& exchange_key_rs::encrypt_key_r() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rs.encrypt_key_r)
  return encrypt_key_r_.GetNoArena();
}
inline void exchange_key_rs::set_encrypt_key_r(const ::std::string& value) {
  set_has_encrypt_key_r();
  encrypt_key_r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.exchange_key_rs.encrypt_key_r)
}
#if LANG_CXX11
inline void exchange_key_rs::set_encrypt_key_r(::std::string&& value) {
  set_has_encrypt_key_r();
  encrypt_key_r_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.exchange_key_rs.encrypt_key_r)
}
#endif
inline void exchange_key_rs::set_encrypt_key_r(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encrypt_key_r();
  encrypt_key_r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.exchange_key_rs.encrypt_key_r)
}
inline void exchange_key_rs::set_encrypt_key_r(const void* value, size_t size) {
  set_has_encrypt_key_r();
  encrypt_key_r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.exchange_key_rs.encrypt_key_r)
}
inline ::std::string* exchange_key_rs::mutable_encrypt_key_r() {
  set_has_encrypt_key_r();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.exchange_key_rs.encrypt_key_r)
  return encrypt_key_r_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* exchange_key_rs::release_encrypt_key_r() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.exchange_key_rs.encrypt_key_r)
  clear_has_encrypt_key_r();
  return encrypt_key_r_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void exchange_key_rs::set_allocated_encrypt_key_r(::std::string* encrypt_key_r) {
  if (encrypt_key_r != NULL) {
    set_has_encrypt_key_r();
  } else {
    clear_has_encrypt_key_r();
  }
  encrypt_key_r_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypt_key_r);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.exchange_key_rs.encrypt_key_r)
}

// -------------------------------------------------------------------

// token_verify_rq

// required uint64 uid = 1 [default = 0];
inline bool token_verify_rq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void token_verify_rq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void token_verify_rq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void token_verify_rq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 token_verify_rq::uid() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rq.uid)
  return uid_;
}
inline void token_verify_rq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.token_verify_rq.uid)
}

// required string token = 2 [default = ""];
inline bool token_verify_rq::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void token_verify_rq::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void token_verify_rq::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void token_verify_rq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& token_verify_rq::token() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rq.token)
  return token_.GetNoArena();
}
inline void token_verify_rq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.token_verify_rq.token)
}
#if LANG_CXX11
inline void token_verify_rq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.token_verify_rq.token)
}
#endif
inline void token_verify_rq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.token_verify_rq.token)
}
inline void token_verify_rq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.token_verify_rq.token)
}
inline ::std::string* token_verify_rq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.token_verify_rq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* token_verify_rq::release_token() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.token_verify_rq.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void token_verify_rq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.token_verify_rq.token)
}

// -------------------------------------------------------------------

// token_verify_rs

// required .b_error.info error = 1;
inline bool token_verify_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void token_verify_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void token_verify_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void token_verify_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& token_verify_rs::error() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* token_verify_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.token_verify_rs.error)
  return error_;
}
inline ::b_error::info* token_verify_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.token_verify_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void token_verify_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.token_verify_rs.error)
}

// required uint64 uid = 2 [default = 0];
inline bool token_verify_rs::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void token_verify_rs::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void token_verify_rs::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void token_verify_rs::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 token_verify_rs::uid() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rs.uid)
  return uid_;
}
inline void token_verify_rs::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.token_verify_rs.uid)
}

// required string token = 3 [default = ""];
inline bool token_verify_rs::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void token_verify_rs::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void token_verify_rs::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void token_verify_rs::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& token_verify_rs::token() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rs.token)
  return token_.GetNoArena();
}
inline void token_verify_rs::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.token_verify_rs.token)
}
#if LANG_CXX11
inline void token_verify_rs::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.token_verify_rs.token)
}
#endif
inline void token_verify_rs::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.token_verify_rs.token)
}
inline void token_verify_rs::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.token_verify_rs.token)
}
inline ::std::string* token_verify_rs::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.token_verify_rs.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* token_verify_rs::release_token() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.token_verify_rs.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void token_verify_rs::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.token_verify_rs.token)
}

// -------------------------------------------------------------------

// heartbeat_rq

// required uint64 uid = 1 [default = 0];
inline bool heartbeat_rq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void heartbeat_rq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void heartbeat_rq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void heartbeat_rq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 heartbeat_rq::uid() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rq.uid)
  return uid_;
}
inline void heartbeat_rq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rq.uid)
}

// required uint64 timecode_native = 2 [default = 0];
inline bool heartbeat_rq::has_timecode_native() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void heartbeat_rq::set_has_timecode_native() {
  _has_bits_[0] |= 0x00000004u;
}
inline void heartbeat_rq::clear_has_timecode_native() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void heartbeat_rq::clear_timecode_native() {
  timecode_native_ = GOOGLE_ULONGLONG(0);
  clear_has_timecode_native();
}
inline ::google::protobuf::uint64 heartbeat_rq::timecode_native() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rq.timecode_native)
  return timecode_native_;
}
inline void heartbeat_rq::set_timecode_native(::google::protobuf::uint64 value) {
  set_has_timecode_native();
  timecode_native_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rq.timecode_native)
}

// required .b_math.coord coord_info = 3;
inline bool heartbeat_rq::has_coord_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void heartbeat_rq::set_has_coord_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void heartbeat_rq::clear_has_coord_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void heartbeat_rq::clear_coord_info() {
  if (coord_info_ != NULL) coord_info_->::b_math::coord::Clear();
  clear_has_coord_info();
}
inline const ::b_math::coord& heartbeat_rq::coord_info() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rq.coord_info)
  return coord_info_ != NULL ? *coord_info_
                         : *::b_math::coord::internal_default_instance();
}
inline ::b_math::coord* heartbeat_rq::mutable_coord_info() {
  set_has_coord_info();
  if (coord_info_ == NULL) {
    coord_info_ = new ::b_math::coord;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.heartbeat_rq.coord_info)
  return coord_info_;
}
inline ::b_math::coord* heartbeat_rq::release_coord_info() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.heartbeat_rq.coord_info)
  clear_has_coord_info();
  ::b_math::coord* temp = coord_info_;
  coord_info_ = NULL;
  return temp;
}
inline void heartbeat_rq::set_allocated_coord_info(::b_math::coord* coord_info) {
  delete coord_info_;
  coord_info_ = coord_info;
  if (coord_info) {
    set_has_coord_info();
  } else {
    clear_has_coord_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.heartbeat_rq.coord_info)
}

// -------------------------------------------------------------------

// heartbeat_rs

// required .b_error.info error = 1;
inline bool heartbeat_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void heartbeat_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void heartbeat_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void heartbeat_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& heartbeat_rs::error() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* heartbeat_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.heartbeat_rs.error)
  return error_;
}
inline ::b_error::info* heartbeat_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.heartbeat_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void heartbeat_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.heartbeat_rs.error)
}

// required uint64 uid = 2 [default = 0];
inline bool heartbeat_rs::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void heartbeat_rs::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void heartbeat_rs::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void heartbeat_rs::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 heartbeat_rs::uid() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.uid)
  return uid_;
}
inline void heartbeat_rs::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rs.uid)
}

// required uint64 timecode_native = 3 [default = 0];
inline bool heartbeat_rs::has_timecode_native() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void heartbeat_rs::set_has_timecode_native() {
  _has_bits_[0] |= 0x00000008u;
}
inline void heartbeat_rs::clear_has_timecode_native() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void heartbeat_rs::clear_timecode_native() {
  timecode_native_ = GOOGLE_ULONGLONG(0);
  clear_has_timecode_native();
}
inline ::google::protobuf::uint64 heartbeat_rs::timecode_native() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.timecode_native)
  return timecode_native_;
}
inline void heartbeat_rs::set_timecode_native(::google::protobuf::uint64 value) {
  set_has_timecode_native();
  timecode_native_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rs.timecode_native)
}

// required .b_math.coord coord_info = 4;
inline bool heartbeat_rs::has_coord_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void heartbeat_rs::set_has_coord_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void heartbeat_rs::clear_has_coord_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void heartbeat_rs::clear_coord_info() {
  if (coord_info_ != NULL) coord_info_->::b_math::coord::Clear();
  clear_has_coord_info();
}
inline const ::b_math::coord& heartbeat_rs::coord_info() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.coord_info)
  return coord_info_ != NULL ? *coord_info_
                         : *::b_math::coord::internal_default_instance();
}
inline ::b_math::coord* heartbeat_rs::mutable_coord_info() {
  set_has_coord_info();
  if (coord_info_ == NULL) {
    coord_info_ = new ::b_math::coord;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.heartbeat_rs.coord_info)
  return coord_info_;
}
inline ::b_math::coord* heartbeat_rs::release_coord_info() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.heartbeat_rs.coord_info)
  clear_has_coord_info();
  ::b_math::coord* temp = coord_info_;
  coord_info_ = NULL;
  return temp;
}
inline void heartbeat_rs::set_allocated_coord_info(::b_math::coord* coord_info) {
  delete coord_info_;
  coord_info_ = coord_info;
  if (coord_info) {
    set_has_coord_info();
  } else {
    clear_has_coord_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.heartbeat_rs.coord_info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace c_shuttle_lobby

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::c_shuttle_lobby::exchange_key_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_lobby::exchange_key_rq_msg>() {
  return ::c_shuttle_lobby::exchange_key_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_shuttle_lobby::exchange_key_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_lobby::exchange_key_rs_msg>() {
  return ::c_shuttle_lobby::exchange_key_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_shuttle_lobby::token_verify_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_lobby::token_verify_rq_msg>() {
  return ::c_shuttle_lobby::token_verify_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_shuttle_lobby::token_verify_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_lobby::token_verify_rs_msg>() {
  return ::c_shuttle_lobby::token_verify_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_shuttle_lobby::heartbeat_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_lobby::heartbeat_rq_msg>() {
  return ::c_shuttle_lobby::heartbeat_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_shuttle_lobby::heartbeat_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_lobby::heartbeat_rs_msg>() {
  return ::c_shuttle_lobby::heartbeat_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_shuttle_lobby::msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_shuttle_lobby::msg>() {
  return ::c_shuttle_lobby::msg_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_c_5fshuttle_5flobby_2eproto__INCLUDED
