// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_business_relation.proto

#ifndef PROTOBUF_c_5fbusiness_5frelation_2eproto__INCLUDED
#define PROTOBUF_c_5fbusiness_5frelation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "b_error.pb.h"
#include "b_business_account.pb.h"
#include "b_business_relation.pb.h"
// @@protoc_insertion_point(includes)
namespace b_business_account {
class user_info;
class user_infoDefaultTypeInternal;
extern user_infoDefaultTypeInternal _user_info_default_instance_;
}  // namespace b_business_account
namespace b_business_relation {
class friend_apply;
class friend_applyDefaultTypeInternal;
extern friend_applyDefaultTypeInternal _friend_apply_default_instance_;
class user_relation;
class user_relationDefaultTypeInternal;
extern user_relationDefaultTypeInternal _user_relation_default_instance_;
class user_relation_group;
class user_relation_groupDefaultTypeInternal;
extern user_relation_groupDefaultTypeInternal _user_relation_group_default_instance_;
}  // namespace b_business_relation
namespace b_error {
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
}  // namespace b_error
namespace c_business_relation {
class add_friend_group_rq;
class add_friend_group_rqDefaultTypeInternal;
extern add_friend_group_rqDefaultTypeInternal _add_friend_group_rq_default_instance_;
class add_friend_group_rs;
class add_friend_group_rsDefaultTypeInternal;
extern add_friend_group_rsDefaultTypeInternal _add_friend_group_rs_default_instance_;
class add_friend_nt;
class add_friend_ntDefaultTypeInternal;
extern add_friend_ntDefaultTypeInternal _add_friend_nt_default_instance_;
class add_friend_rq;
class add_friend_rqDefaultTypeInternal;
extern add_friend_rqDefaultTypeInternal _add_friend_rq_default_instance_;
class add_friend_rs;
class add_friend_rsDefaultTypeInternal;
extern add_friend_rsDefaultTypeInternal _add_friend_rs_default_instance_;
class allow_friend_nt;
class allow_friend_ntDefaultTypeInternal;
extern allow_friend_ntDefaultTypeInternal _allow_friend_nt_default_instance_;
class allow_friend_rq;
class allow_friend_rqDefaultTypeInternal;
extern allow_friend_rqDefaultTypeInternal _allow_friend_rq_default_instance_;
class allow_friend_rs;
class allow_friend_rsDefaultTypeInternal;
extern allow_friend_rsDefaultTypeInternal _allow_friend_rs_default_instance_;
class change_friend_group_rq;
class change_friend_group_rqDefaultTypeInternal;
extern change_friend_group_rqDefaultTypeInternal _change_friend_group_rq_default_instance_;
class change_friend_group_rs;
class change_friend_group_rsDefaultTypeInternal;
extern change_friend_group_rsDefaultTypeInternal _change_friend_group_rs_default_instance_;
class delete_friend_group_rq;
class delete_friend_group_rqDefaultTypeInternal;
extern delete_friend_group_rqDefaultTypeInternal _delete_friend_group_rq_default_instance_;
class delete_friend_group_rs;
class delete_friend_group_rsDefaultTypeInternal;
extern delete_friend_group_rsDefaultTypeInternal _delete_friend_group_rs_default_instance_;
class delete_friend_nt;
class delete_friend_ntDefaultTypeInternal;
extern delete_friend_ntDefaultTypeInternal _delete_friend_nt_default_instance_;
class delete_friend_rq;
class delete_friend_rqDefaultTypeInternal;
extern delete_friend_rqDefaultTypeInternal _delete_friend_rq_default_instance_;
class delete_friend_rs;
class delete_friend_rsDefaultTypeInternal;
extern delete_friend_rsDefaultTypeInternal _delete_friend_rs_default_instance_;
class friend_info;
class friend_infoDefaultTypeInternal;
extern friend_infoDefaultTypeInternal _friend_info_default_instance_;
class query_friends_apply_rq;
class query_friends_apply_rqDefaultTypeInternal;
extern query_friends_apply_rqDefaultTypeInternal _query_friends_apply_rq_default_instance_;
class query_friends_apply_rs;
class query_friends_apply_rsDefaultTypeInternal;
extern query_friends_apply_rsDefaultTypeInternal _query_friends_apply_rs_default_instance_;
class query_friends_rq;
class query_friends_rqDefaultTypeInternal;
extern query_friends_rqDefaultTypeInternal _query_friends_rq_default_instance_;
class query_friends_rs;
class query_friends_rsDefaultTypeInternal;
extern query_friends_rsDefaultTypeInternal _query_friends_rs_default_instance_;
class rename_friend_group_rq;
class rename_friend_group_rqDefaultTypeInternal;
extern rename_friend_group_rqDefaultTypeInternal _rename_friend_group_rq_default_instance_;
class rename_friend_group_rs;
class rename_friend_group_rsDefaultTypeInternal;
extern rename_friend_group_rsDefaultTypeInternal _rename_friend_group_rs_default_instance_;
class rename_friend_remark_rq;
class rename_friend_remark_rqDefaultTypeInternal;
extern rename_friend_remark_rqDefaultTypeInternal _rename_friend_remark_rq_default_instance_;
class rename_friend_remark_rs;
class rename_friend_remark_rsDefaultTypeInternal;
extern rename_friend_remark_rsDefaultTypeInternal _rename_friend_remark_rs_default_instance_;
class talk_friend_nt;
class talk_friend_ntDefaultTypeInternal;
extern talk_friend_ntDefaultTypeInternal _talk_friend_nt_default_instance_;
class talk_friend_rq;
class talk_friend_rqDefaultTypeInternal;
extern talk_friend_rqDefaultTypeInternal _talk_friend_rq_default_instance_;
class talk_friend_rs;
class talk_friend_rsDefaultTypeInternal;
extern talk_friend_rsDefaultTypeInternal _talk_friend_rs_default_instance_;
}  // namespace c_business_relation

namespace c_business_relation {

namespace protobuf_c_5fbusiness_5frelation_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_c_5fbusiness_5frelation_2eproto

enum add_friend_rq_msg {
  add_friend_rq_msg_id = 33562897
};
bool add_friend_rq_msg_IsValid(int value);
const add_friend_rq_msg add_friend_rq_msg_msg_MIN = add_friend_rq_msg_id;
const add_friend_rq_msg add_friend_rq_msg_msg_MAX = add_friend_rq_msg_id;
const int add_friend_rq_msg_msg_ARRAYSIZE = add_friend_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* add_friend_rq_msg_descriptor();
inline const ::std::string& add_friend_rq_msg_Name(add_friend_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    add_friend_rq_msg_descriptor(), value);
}
inline bool add_friend_rq_msg_Parse(
    const ::std::string& name, add_friend_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<add_friend_rq_msg>(
    add_friend_rq_msg_descriptor(), name, value);
}
enum add_friend_rs_msg {
  add_friend_rs_msg_id = 33562898
};
bool add_friend_rs_msg_IsValid(int value);
const add_friend_rs_msg add_friend_rs_msg_msg_MIN = add_friend_rs_msg_id;
const add_friend_rs_msg add_friend_rs_msg_msg_MAX = add_friend_rs_msg_id;
const int add_friend_rs_msg_msg_ARRAYSIZE = add_friend_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* add_friend_rs_msg_descriptor();
inline const ::std::string& add_friend_rs_msg_Name(add_friend_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    add_friend_rs_msg_descriptor(), value);
}
inline bool add_friend_rs_msg_Parse(
    const ::std::string& name, add_friend_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<add_friend_rs_msg>(
    add_friend_rs_msg_descriptor(), name, value);
}
enum add_friend_nt_msg {
  add_friend_nt_msg_id = 33563009
};
bool add_friend_nt_msg_IsValid(int value);
const add_friend_nt_msg add_friend_nt_msg_msg_MIN = add_friend_nt_msg_id;
const add_friend_nt_msg add_friend_nt_msg_msg_MAX = add_friend_nt_msg_id;
const int add_friend_nt_msg_msg_ARRAYSIZE = add_friend_nt_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* add_friend_nt_msg_descriptor();
inline const ::std::string& add_friend_nt_msg_Name(add_friend_nt_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    add_friend_nt_msg_descriptor(), value);
}
inline bool add_friend_nt_msg_Parse(
    const ::std::string& name, add_friend_nt_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<add_friend_nt_msg>(
    add_friend_nt_msg_descriptor(), name, value);
}
enum delete_friend_rq_msg {
  delete_friend_rq_msg_id = 33562899
};
bool delete_friend_rq_msg_IsValid(int value);
const delete_friend_rq_msg delete_friend_rq_msg_msg_MIN = delete_friend_rq_msg_id;
const delete_friend_rq_msg delete_friend_rq_msg_msg_MAX = delete_friend_rq_msg_id;
const int delete_friend_rq_msg_msg_ARRAYSIZE = delete_friend_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* delete_friend_rq_msg_descriptor();
inline const ::std::string& delete_friend_rq_msg_Name(delete_friend_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    delete_friend_rq_msg_descriptor(), value);
}
inline bool delete_friend_rq_msg_Parse(
    const ::std::string& name, delete_friend_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<delete_friend_rq_msg>(
    delete_friend_rq_msg_descriptor(), name, value);
}
enum delete_friend_rs_msg {
  delete_friend_rs_msg_id = 33562900
};
bool delete_friend_rs_msg_IsValid(int value);
const delete_friend_rs_msg delete_friend_rs_msg_msg_MIN = delete_friend_rs_msg_id;
const delete_friend_rs_msg delete_friend_rs_msg_msg_MAX = delete_friend_rs_msg_id;
const int delete_friend_rs_msg_msg_ARRAYSIZE = delete_friend_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* delete_friend_rs_msg_descriptor();
inline const ::std::string& delete_friend_rs_msg_Name(delete_friend_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    delete_friend_rs_msg_descriptor(), value);
}
inline bool delete_friend_rs_msg_Parse(
    const ::std::string& name, delete_friend_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<delete_friend_rs_msg>(
    delete_friend_rs_msg_descriptor(), name, value);
}
enum delete_friend_nt_msg {
  delete_friend_nt_msg_id = 33563010
};
bool delete_friend_nt_msg_IsValid(int value);
const delete_friend_nt_msg delete_friend_nt_msg_msg_MIN = delete_friend_nt_msg_id;
const delete_friend_nt_msg delete_friend_nt_msg_msg_MAX = delete_friend_nt_msg_id;
const int delete_friend_nt_msg_msg_ARRAYSIZE = delete_friend_nt_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* delete_friend_nt_msg_descriptor();
inline const ::std::string& delete_friend_nt_msg_Name(delete_friend_nt_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    delete_friend_nt_msg_descriptor(), value);
}
inline bool delete_friend_nt_msg_Parse(
    const ::std::string& name, delete_friend_nt_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<delete_friend_nt_msg>(
    delete_friend_nt_msg_descriptor(), name, value);
}
enum allow_friend_rq_msg {
  allow_friend_rq_msg_id = 33562901
};
bool allow_friend_rq_msg_IsValid(int value);
const allow_friend_rq_msg allow_friend_rq_msg_msg_MIN = allow_friend_rq_msg_id;
const allow_friend_rq_msg allow_friend_rq_msg_msg_MAX = allow_friend_rq_msg_id;
const int allow_friend_rq_msg_msg_ARRAYSIZE = allow_friend_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* allow_friend_rq_msg_descriptor();
inline const ::std::string& allow_friend_rq_msg_Name(allow_friend_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    allow_friend_rq_msg_descriptor(), value);
}
inline bool allow_friend_rq_msg_Parse(
    const ::std::string& name, allow_friend_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<allow_friend_rq_msg>(
    allow_friend_rq_msg_descriptor(), name, value);
}
enum allow_friend_rq_opcode_t {
  allow_friend_rq_opcode_t_allow = 1,
  allow_friend_rq_opcode_t_refuse = 2
};
bool allow_friend_rq_opcode_t_IsValid(int value);
const allow_friend_rq_opcode_t allow_friend_rq_opcode_t_opcode_t_MIN = allow_friend_rq_opcode_t_allow;
const allow_friend_rq_opcode_t allow_friend_rq_opcode_t_opcode_t_MAX = allow_friend_rq_opcode_t_refuse;
const int allow_friend_rq_opcode_t_opcode_t_ARRAYSIZE = allow_friend_rq_opcode_t_opcode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* allow_friend_rq_opcode_t_descriptor();
inline const ::std::string& allow_friend_rq_opcode_t_Name(allow_friend_rq_opcode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    allow_friend_rq_opcode_t_descriptor(), value);
}
inline bool allow_friend_rq_opcode_t_Parse(
    const ::std::string& name, allow_friend_rq_opcode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<allow_friend_rq_opcode_t>(
    allow_friend_rq_opcode_t_descriptor(), name, value);
}
enum allow_friend_rs_msg {
  allow_friend_rs_msg_id = 33562902
};
bool allow_friend_rs_msg_IsValid(int value);
const allow_friend_rs_msg allow_friend_rs_msg_msg_MIN = allow_friend_rs_msg_id;
const allow_friend_rs_msg allow_friend_rs_msg_msg_MAX = allow_friend_rs_msg_id;
const int allow_friend_rs_msg_msg_ARRAYSIZE = allow_friend_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* allow_friend_rs_msg_descriptor();
inline const ::std::string& allow_friend_rs_msg_Name(allow_friend_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    allow_friend_rs_msg_descriptor(), value);
}
inline bool allow_friend_rs_msg_Parse(
    const ::std::string& name, allow_friend_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<allow_friend_rs_msg>(
    allow_friend_rs_msg_descriptor(), name, value);
}
enum allow_friend_nt_msg {
  allow_friend_nt_msg_id = 33563011
};
bool allow_friend_nt_msg_IsValid(int value);
const allow_friend_nt_msg allow_friend_nt_msg_msg_MIN = allow_friend_nt_msg_id;
const allow_friend_nt_msg allow_friend_nt_msg_msg_MAX = allow_friend_nt_msg_id;
const int allow_friend_nt_msg_msg_ARRAYSIZE = allow_friend_nt_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* allow_friend_nt_msg_descriptor();
inline const ::std::string& allow_friend_nt_msg_Name(allow_friend_nt_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    allow_friend_nt_msg_descriptor(), value);
}
inline bool allow_friend_nt_msg_Parse(
    const ::std::string& name, allow_friend_nt_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<allow_friend_nt_msg>(
    allow_friend_nt_msg_descriptor(), name, value);
}
enum query_friends_rq_msg {
  query_friends_rq_msg_id = 33562903
};
bool query_friends_rq_msg_IsValid(int value);
const query_friends_rq_msg query_friends_rq_msg_msg_MIN = query_friends_rq_msg_id;
const query_friends_rq_msg query_friends_rq_msg_msg_MAX = query_friends_rq_msg_id;
const int query_friends_rq_msg_msg_ARRAYSIZE = query_friends_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* query_friends_rq_msg_descriptor();
inline const ::std::string& query_friends_rq_msg_Name(query_friends_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    query_friends_rq_msg_descriptor(), value);
}
inline bool query_friends_rq_msg_Parse(
    const ::std::string& name, query_friends_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<query_friends_rq_msg>(
    query_friends_rq_msg_descriptor(), name, value);
}
enum query_friends_rs_msg {
  query_friends_rs_msg_id = 33562904
};
bool query_friends_rs_msg_IsValid(int value);
const query_friends_rs_msg query_friends_rs_msg_msg_MIN = query_friends_rs_msg_id;
const query_friends_rs_msg query_friends_rs_msg_msg_MAX = query_friends_rs_msg_id;
const int query_friends_rs_msg_msg_ARRAYSIZE = query_friends_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* query_friends_rs_msg_descriptor();
inline const ::std::string& query_friends_rs_msg_Name(query_friends_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    query_friends_rs_msg_descriptor(), value);
}
inline bool query_friends_rs_msg_Parse(
    const ::std::string& name, query_friends_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<query_friends_rs_msg>(
    query_friends_rs_msg_descriptor(), name, value);
}
enum rename_friend_remark_rq_msg {
  rename_friend_remark_rq_msg_id = 33562905
};
bool rename_friend_remark_rq_msg_IsValid(int value);
const rename_friend_remark_rq_msg rename_friend_remark_rq_msg_msg_MIN = rename_friend_remark_rq_msg_id;
const rename_friend_remark_rq_msg rename_friend_remark_rq_msg_msg_MAX = rename_friend_remark_rq_msg_id;
const int rename_friend_remark_rq_msg_msg_ARRAYSIZE = rename_friend_remark_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* rename_friend_remark_rq_msg_descriptor();
inline const ::std::string& rename_friend_remark_rq_msg_Name(rename_friend_remark_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    rename_friend_remark_rq_msg_descriptor(), value);
}
inline bool rename_friend_remark_rq_msg_Parse(
    const ::std::string& name, rename_friend_remark_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rename_friend_remark_rq_msg>(
    rename_friend_remark_rq_msg_descriptor(), name, value);
}
enum rename_friend_remark_rs_msg {
  rename_friend_remark_rs_msg_id = 33562912
};
bool rename_friend_remark_rs_msg_IsValid(int value);
const rename_friend_remark_rs_msg rename_friend_remark_rs_msg_msg_MIN = rename_friend_remark_rs_msg_id;
const rename_friend_remark_rs_msg rename_friend_remark_rs_msg_msg_MAX = rename_friend_remark_rs_msg_id;
const int rename_friend_remark_rs_msg_msg_ARRAYSIZE = rename_friend_remark_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* rename_friend_remark_rs_msg_descriptor();
inline const ::std::string& rename_friend_remark_rs_msg_Name(rename_friend_remark_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    rename_friend_remark_rs_msg_descriptor(), value);
}
inline bool rename_friend_remark_rs_msg_Parse(
    const ::std::string& name, rename_friend_remark_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rename_friend_remark_rs_msg>(
    rename_friend_remark_rs_msg_descriptor(), name, value);
}
enum add_friend_group_rq_msg {
  add_friend_group_rq_msg_id = 33562913
};
bool add_friend_group_rq_msg_IsValid(int value);
const add_friend_group_rq_msg add_friend_group_rq_msg_msg_MIN = add_friend_group_rq_msg_id;
const add_friend_group_rq_msg add_friend_group_rq_msg_msg_MAX = add_friend_group_rq_msg_id;
const int add_friend_group_rq_msg_msg_ARRAYSIZE = add_friend_group_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* add_friend_group_rq_msg_descriptor();
inline const ::std::string& add_friend_group_rq_msg_Name(add_friend_group_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    add_friend_group_rq_msg_descriptor(), value);
}
inline bool add_friend_group_rq_msg_Parse(
    const ::std::string& name, add_friend_group_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<add_friend_group_rq_msg>(
    add_friend_group_rq_msg_descriptor(), name, value);
}
enum add_friend_group_rs_msg {
  add_friend_group_rs_msg_id = 33562914
};
bool add_friend_group_rs_msg_IsValid(int value);
const add_friend_group_rs_msg add_friend_group_rs_msg_msg_MIN = add_friend_group_rs_msg_id;
const add_friend_group_rs_msg add_friend_group_rs_msg_msg_MAX = add_friend_group_rs_msg_id;
const int add_friend_group_rs_msg_msg_ARRAYSIZE = add_friend_group_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* add_friend_group_rs_msg_descriptor();
inline const ::std::string& add_friend_group_rs_msg_Name(add_friend_group_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    add_friend_group_rs_msg_descriptor(), value);
}
inline bool add_friend_group_rs_msg_Parse(
    const ::std::string& name, add_friend_group_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<add_friend_group_rs_msg>(
    add_friend_group_rs_msg_descriptor(), name, value);
}
enum delete_friend_group_rq_msg {
  delete_friend_group_rq_msg_id = 33562913
};
bool delete_friend_group_rq_msg_IsValid(int value);
const delete_friend_group_rq_msg delete_friend_group_rq_msg_msg_MIN = delete_friend_group_rq_msg_id;
const delete_friend_group_rq_msg delete_friend_group_rq_msg_msg_MAX = delete_friend_group_rq_msg_id;
const int delete_friend_group_rq_msg_msg_ARRAYSIZE = delete_friend_group_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* delete_friend_group_rq_msg_descriptor();
inline const ::std::string& delete_friend_group_rq_msg_Name(delete_friend_group_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    delete_friend_group_rq_msg_descriptor(), value);
}
inline bool delete_friend_group_rq_msg_Parse(
    const ::std::string& name, delete_friend_group_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<delete_friend_group_rq_msg>(
    delete_friend_group_rq_msg_descriptor(), name, value);
}
enum delete_friend_group_rs_msg {
  delete_friend_group_rs_msg_id = 33562914
};
bool delete_friend_group_rs_msg_IsValid(int value);
const delete_friend_group_rs_msg delete_friend_group_rs_msg_msg_MIN = delete_friend_group_rs_msg_id;
const delete_friend_group_rs_msg delete_friend_group_rs_msg_msg_MAX = delete_friend_group_rs_msg_id;
const int delete_friend_group_rs_msg_msg_ARRAYSIZE = delete_friend_group_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* delete_friend_group_rs_msg_descriptor();
inline const ::std::string& delete_friend_group_rs_msg_Name(delete_friend_group_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    delete_friend_group_rs_msg_descriptor(), value);
}
inline bool delete_friend_group_rs_msg_Parse(
    const ::std::string& name, delete_friend_group_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<delete_friend_group_rs_msg>(
    delete_friend_group_rs_msg_descriptor(), name, value);
}
enum rename_friend_group_rq_msg {
  rename_friend_group_rq_msg_id = 33562913
};
bool rename_friend_group_rq_msg_IsValid(int value);
const rename_friend_group_rq_msg rename_friend_group_rq_msg_msg_MIN = rename_friend_group_rq_msg_id;
const rename_friend_group_rq_msg rename_friend_group_rq_msg_msg_MAX = rename_friend_group_rq_msg_id;
const int rename_friend_group_rq_msg_msg_ARRAYSIZE = rename_friend_group_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* rename_friend_group_rq_msg_descriptor();
inline const ::std::string& rename_friend_group_rq_msg_Name(rename_friend_group_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    rename_friend_group_rq_msg_descriptor(), value);
}
inline bool rename_friend_group_rq_msg_Parse(
    const ::std::string& name, rename_friend_group_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rename_friend_group_rq_msg>(
    rename_friend_group_rq_msg_descriptor(), name, value);
}
enum rename_friend_group_rs_msg {
  rename_friend_group_rs_msg_id = 33562914
};
bool rename_friend_group_rs_msg_IsValid(int value);
const rename_friend_group_rs_msg rename_friend_group_rs_msg_msg_MIN = rename_friend_group_rs_msg_id;
const rename_friend_group_rs_msg rename_friend_group_rs_msg_msg_MAX = rename_friend_group_rs_msg_id;
const int rename_friend_group_rs_msg_msg_ARRAYSIZE = rename_friend_group_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* rename_friend_group_rs_msg_descriptor();
inline const ::std::string& rename_friend_group_rs_msg_Name(rename_friend_group_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    rename_friend_group_rs_msg_descriptor(), value);
}
inline bool rename_friend_group_rs_msg_Parse(
    const ::std::string& name, rename_friend_group_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rename_friend_group_rs_msg>(
    rename_friend_group_rs_msg_descriptor(), name, value);
}
enum change_friend_group_rq_msg {
  change_friend_group_rq_msg_id = 33562915
};
bool change_friend_group_rq_msg_IsValid(int value);
const change_friend_group_rq_msg change_friend_group_rq_msg_msg_MIN = change_friend_group_rq_msg_id;
const change_friend_group_rq_msg change_friend_group_rq_msg_msg_MAX = change_friend_group_rq_msg_id;
const int change_friend_group_rq_msg_msg_ARRAYSIZE = change_friend_group_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* change_friend_group_rq_msg_descriptor();
inline const ::std::string& change_friend_group_rq_msg_Name(change_friend_group_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    change_friend_group_rq_msg_descriptor(), value);
}
inline bool change_friend_group_rq_msg_Parse(
    const ::std::string& name, change_friend_group_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<change_friend_group_rq_msg>(
    change_friend_group_rq_msg_descriptor(), name, value);
}
enum change_friend_group_rs_msg {
  change_friend_group_rs_msg_id = 33562916
};
bool change_friend_group_rs_msg_IsValid(int value);
const change_friend_group_rs_msg change_friend_group_rs_msg_msg_MIN = change_friend_group_rs_msg_id;
const change_friend_group_rs_msg change_friend_group_rs_msg_msg_MAX = change_friend_group_rs_msg_id;
const int change_friend_group_rs_msg_msg_ARRAYSIZE = change_friend_group_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* change_friend_group_rs_msg_descriptor();
inline const ::std::string& change_friend_group_rs_msg_Name(change_friend_group_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    change_friend_group_rs_msg_descriptor(), value);
}
inline bool change_friend_group_rs_msg_Parse(
    const ::std::string& name, change_friend_group_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<change_friend_group_rs_msg>(
    change_friend_group_rs_msg_descriptor(), name, value);
}
enum query_friends_apply_rq_msg {
  query_friends_apply_rq_msg_id = 33562917
};
bool query_friends_apply_rq_msg_IsValid(int value);
const query_friends_apply_rq_msg query_friends_apply_rq_msg_msg_MIN = query_friends_apply_rq_msg_id;
const query_friends_apply_rq_msg query_friends_apply_rq_msg_msg_MAX = query_friends_apply_rq_msg_id;
const int query_friends_apply_rq_msg_msg_ARRAYSIZE = query_friends_apply_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* query_friends_apply_rq_msg_descriptor();
inline const ::std::string& query_friends_apply_rq_msg_Name(query_friends_apply_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    query_friends_apply_rq_msg_descriptor(), value);
}
inline bool query_friends_apply_rq_msg_Parse(
    const ::std::string& name, query_friends_apply_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<query_friends_apply_rq_msg>(
    query_friends_apply_rq_msg_descriptor(), name, value);
}
enum query_friends_apply_rs_msg {
  query_friends_apply_rs_msg_id = 33562918
};
bool query_friends_apply_rs_msg_IsValid(int value);
const query_friends_apply_rs_msg query_friends_apply_rs_msg_msg_MIN = query_friends_apply_rs_msg_id;
const query_friends_apply_rs_msg query_friends_apply_rs_msg_msg_MAX = query_friends_apply_rs_msg_id;
const int query_friends_apply_rs_msg_msg_ARRAYSIZE = query_friends_apply_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* query_friends_apply_rs_msg_descriptor();
inline const ::std::string& query_friends_apply_rs_msg_Name(query_friends_apply_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    query_friends_apply_rs_msg_descriptor(), value);
}
inline bool query_friends_apply_rs_msg_Parse(
    const ::std::string& name, query_friends_apply_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<query_friends_apply_rs_msg>(
    query_friends_apply_rs_msg_descriptor(), name, value);
}
enum talk_friend_rq_msg {
  talk_friend_rq_msg_id = 33562961
};
bool talk_friend_rq_msg_IsValid(int value);
const talk_friend_rq_msg talk_friend_rq_msg_msg_MIN = talk_friend_rq_msg_id;
const talk_friend_rq_msg talk_friend_rq_msg_msg_MAX = talk_friend_rq_msg_id;
const int talk_friend_rq_msg_msg_ARRAYSIZE = talk_friend_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* talk_friend_rq_msg_descriptor();
inline const ::std::string& talk_friend_rq_msg_Name(talk_friend_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    talk_friend_rq_msg_descriptor(), value);
}
inline bool talk_friend_rq_msg_Parse(
    const ::std::string& name, talk_friend_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<talk_friend_rq_msg>(
    talk_friend_rq_msg_descriptor(), name, value);
}
enum talk_friend_rs_msg {
  talk_friend_rs_msg_id = 33562962
};
bool talk_friend_rs_msg_IsValid(int value);
const talk_friend_rs_msg talk_friend_rs_msg_msg_MIN = talk_friend_rs_msg_id;
const talk_friend_rs_msg talk_friend_rs_msg_msg_MAX = talk_friend_rs_msg_id;
const int talk_friend_rs_msg_msg_ARRAYSIZE = talk_friend_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* talk_friend_rs_msg_descriptor();
inline const ::std::string& talk_friend_rs_msg_Name(talk_friend_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    talk_friend_rs_msg_descriptor(), value);
}
inline bool talk_friend_rs_msg_Parse(
    const ::std::string& name, talk_friend_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<talk_friend_rs_msg>(
    talk_friend_rs_msg_descriptor(), name, value);
}
enum talk_friend_nt_msg {
  talk_friend_nt_msg_id = 33563025
};
bool talk_friend_nt_msg_IsValid(int value);
const talk_friend_nt_msg talk_friend_nt_msg_msg_MIN = talk_friend_nt_msg_id;
const talk_friend_nt_msg talk_friend_nt_msg_msg_MAX = talk_friend_nt_msg_id;
const int talk_friend_nt_msg_msg_ARRAYSIZE = talk_friend_nt_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* talk_friend_nt_msg_descriptor();
inline const ::std::string& talk_friend_nt_msg_Name(talk_friend_nt_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    talk_friend_nt_msg_descriptor(), value);
}
inline bool talk_friend_nt_msg_Parse(
    const ::std::string& name, talk_friend_nt_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<talk_friend_nt_msg>(
    talk_friend_nt_msg_descriptor(), name, value);
}
enum msg {
  min_id = 33562880,
  max_id = 33563135
};
bool msg_IsValid(int value);
const msg msg_MIN = min_id;
const msg msg_MAX = max_id;
const int msg_ARRAYSIZE = msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* msg_descriptor();
inline const ::std::string& msg_Name(msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    msg_descriptor(), value);
}
inline bool msg_Parse(
    const ::std::string& name, msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<msg>(
    msg_descriptor(), name, value);
}
// ===================================================================

class friend_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.friend_info) */ {
 public:
  friend_info();
  virtual ~friend_info();

  friend_info(const friend_info& from);

  inline friend_info& operator=(const friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_info& default_instance();

  static inline const friend_info* internal_default_instance() {
    return reinterpret_cast<const friend_info*>(
               &_friend_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(friend_info* other);

  // implements Message ----------------------------------------------

  inline friend_info* New() const PROTOBUF_FINAL { return New(NULL); }

  friend_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const friend_info& from);
  void MergeFrom(const friend_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(friend_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_group = 2;
  bool has_user_group() const;
  void clear_user_group();
  static const int kUserGroupFieldNumber = 2;
  const ::std::string& user_group() const;
  void set_user_group(const ::std::string& value);
  #if LANG_CXX11
  void set_user_group(::std::string&& value);
  #endif
  void set_user_group(const char* value);
  void set_user_group(const char* value, size_t size);
  ::std::string* mutable_user_group();
  ::std::string* release_user_group();
  void set_allocated_user_group(::std::string* user_group);

  // optional string user_remark = 3;
  bool has_user_remark() const;
  void clear_user_remark();
  static const int kUserRemarkFieldNumber = 3;
  const ::std::string& user_remark() const;
  void set_user_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_user_remark(::std::string&& value);
  #endif
  void set_user_remark(const char* value);
  void set_user_remark(const char* value, size_t size);
  ::std::string* mutable_user_remark();
  ::std::string* release_user_remark();
  void set_allocated_user_remark(::std::string* user_remark);

  // required .b_business_account.user_info user_info = 1;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  const ::b_business_account::user_info& user_info() const;
  ::b_business_account::user_info* mutable_user_info();
  ::b_business_account::user_info* release_user_info();
  void set_allocated_user_info(::b_business_account::user_info* user_info);

  // @@protoc_insertion_point(class_scope:c_business_relation.friend_info)
 private:
  void set_has_user_info();
  void clear_has_user_info();
  void set_has_user_group();
  void clear_has_user_group();
  void set_has_user_remark();
  void clear_has_user_remark();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_group_;
  ::google::protobuf::internal::ArenaStringPtr user_remark_;
  ::b_business_account::user_info* user_info_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class add_friend_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.add_friend_rq) */ {
 public:
  add_friend_rq();
  virtual ~add_friend_rq();

  add_friend_rq(const add_friend_rq& from);

  inline add_friend_rq& operator=(const add_friend_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_friend_rq& default_instance();

  static inline const add_friend_rq* internal_default_instance() {
    return reinterpret_cast<const add_friend_rq*>(
               &_add_friend_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(add_friend_rq* other);

  // implements Message ----------------------------------------------

  inline add_friend_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  add_friend_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const add_friend_rq& from);
  void MergeFrom(const add_friend_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(add_friend_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef add_friend_rq_msg msg;
  static const msg id =
    add_friend_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return add_friend_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    add_friend_rq_msg_msg_MIN;
  static const msg msg_MAX =
    add_friend_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    add_friend_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return add_friend_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return add_friend_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return add_friend_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_remark = 3;
  bool has_user_remark() const;
  void clear_user_remark();
  static const int kUserRemarkFieldNumber = 3;
  const ::std::string& user_remark() const;
  void set_user_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_user_remark(::std::string&& value);
  #endif
  void set_user_remark(const char* value);
  void set_user_remark(const char* value, size_t size);
  ::std::string* mutable_user_remark();
  ::std::string* release_user_remark();
  void set_allocated_user_remark(::std::string* user_remark);

  // required string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // required uint64 user_add_id = 2;
  bool has_user_add_id() const;
  void clear_user_add_id();
  static const int kUserAddIdFieldNumber = 2;
  ::google::protobuf::uint64 user_add_id() const;
  void set_user_add_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.add_friend_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_add_id();
  void clear_has_user_add_id();
  void set_has_user_remark();
  void clear_has_user_remark();
  void set_has_description();
  void clear_has_description();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_remark_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint64 user_myself_id_;
  ::google::protobuf::uint64 user_add_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class add_friend_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.add_friend_rs) */ {
 public:
  add_friend_rs();
  virtual ~add_friend_rs();

  add_friend_rs(const add_friend_rs& from);

  inline add_friend_rs& operator=(const add_friend_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_friend_rs& default_instance();

  static inline const add_friend_rs* internal_default_instance() {
    return reinterpret_cast<const add_friend_rs*>(
               &_add_friend_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(add_friend_rs* other);

  // implements Message ----------------------------------------------

  inline add_friend_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  add_friend_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const add_friend_rs& from);
  void MergeFrom(const add_friend_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(add_friend_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef add_friend_rs_msg msg;
  static const msg id =
    add_friend_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return add_friend_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    add_friend_rs_msg_msg_MIN;
  static const msg msg_MAX =
    add_friend_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    add_friend_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return add_friend_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return add_friend_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return add_friend_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_remark = 3;
  bool has_user_remark() const;
  void clear_user_remark();
  static const int kUserRemarkFieldNumber = 3;
  const ::std::string& user_remark() const;
  void set_user_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_user_remark(::std::string&& value);
  #endif
  void set_user_remark(const char* value);
  void set_user_remark(const char* value, size_t size);
  ::std::string* mutable_user_remark();
  ::std::string* release_user_remark();
  void set_allocated_user_remark(::std::string* user_remark);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_add_id = 2;
  bool has_user_add_id() const;
  void clear_user_add_id();
  static const int kUserAddIdFieldNumber = 2;
  ::google::protobuf::uint64 user_add_id() const;
  void set_user_add_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.add_friend_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_add_id();
  void clear_has_user_add_id();
  void set_has_user_remark();
  void clear_has_user_remark();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_remark_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_add_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class add_friend_nt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.add_friend_nt) */ {
 public:
  add_friend_nt();
  virtual ~add_friend_nt();

  add_friend_nt(const add_friend_nt& from);

  inline add_friend_nt& operator=(const add_friend_nt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_friend_nt& default_instance();

  static inline const add_friend_nt* internal_default_instance() {
    return reinterpret_cast<const add_friend_nt*>(
               &_add_friend_nt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(add_friend_nt* other);

  // implements Message ----------------------------------------------

  inline add_friend_nt* New() const PROTOBUF_FINAL { return New(NULL); }

  add_friend_nt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const add_friend_nt& from);
  void MergeFrom(const add_friend_nt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(add_friend_nt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef add_friend_nt_msg msg;
  static const msg id =
    add_friend_nt_msg_id;
  static inline bool msg_IsValid(int value) {
    return add_friend_nt_msg_IsValid(value);
  }
  static const msg msg_MIN =
    add_friend_nt_msg_msg_MIN;
  static const msg msg_MAX =
    add_friend_nt_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    add_friend_nt_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return add_friend_nt_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return add_friend_nt_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return add_friend_nt_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required .b_business_account.user_info apply_user_info = 1;
  bool has_apply_user_info() const;
  void clear_apply_user_info();
  static const int kApplyUserInfoFieldNumber = 1;
  const ::b_business_account::user_info& apply_user_info() const;
  ::b_business_account::user_info* mutable_apply_user_info();
  ::b_business_account::user_info* release_apply_user_info();
  void set_allocated_apply_user_info(::b_business_account::user_info* apply_user_info);

  // @@protoc_insertion_point(class_scope:c_business_relation.add_friend_nt)
 private:
  void set_has_apply_user_info();
  void clear_has_apply_user_info();
  void set_has_description();
  void clear_has_description();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::b_business_account::user_info* apply_user_info_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class delete_friend_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.delete_friend_rq) */ {
 public:
  delete_friend_rq();
  virtual ~delete_friend_rq();

  delete_friend_rq(const delete_friend_rq& from);

  inline delete_friend_rq& operator=(const delete_friend_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delete_friend_rq& default_instance();

  static inline const delete_friend_rq* internal_default_instance() {
    return reinterpret_cast<const delete_friend_rq*>(
               &_delete_friend_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(delete_friend_rq* other);

  // implements Message ----------------------------------------------

  inline delete_friend_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  delete_friend_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const delete_friend_rq& from);
  void MergeFrom(const delete_friend_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(delete_friend_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef delete_friend_rq_msg msg;
  static const msg id =
    delete_friend_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return delete_friend_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    delete_friend_rq_msg_msg_MIN;
  static const msg msg_MAX =
    delete_friend_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    delete_friend_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return delete_friend_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return delete_friend_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return delete_friend_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // required uint64 user_delete_id = 2;
  bool has_user_delete_id() const;
  void clear_user_delete_id();
  static const int kUserDeleteIdFieldNumber = 2;
  ::google::protobuf::uint64 user_delete_id() const;
  void set_user_delete_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.delete_friend_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_delete_id();
  void clear_has_user_delete_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_myself_id_;
  ::google::protobuf::uint64 user_delete_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class delete_friend_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.delete_friend_rs) */ {
 public:
  delete_friend_rs();
  virtual ~delete_friend_rs();

  delete_friend_rs(const delete_friend_rs& from);

  inline delete_friend_rs& operator=(const delete_friend_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delete_friend_rs& default_instance();

  static inline const delete_friend_rs* internal_default_instance() {
    return reinterpret_cast<const delete_friend_rs*>(
               &_delete_friend_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(delete_friend_rs* other);

  // implements Message ----------------------------------------------

  inline delete_friend_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  delete_friend_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const delete_friend_rs& from);
  void MergeFrom(const delete_friend_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(delete_friend_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef delete_friend_rs_msg msg;
  static const msg id =
    delete_friend_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return delete_friend_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    delete_friend_rs_msg_msg_MIN;
  static const msg msg_MAX =
    delete_friend_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    delete_friend_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return delete_friend_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return delete_friend_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return delete_friend_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_delete_id = 2;
  bool has_user_delete_id() const;
  void clear_user_delete_id();
  static const int kUserDeleteIdFieldNumber = 2;
  ::google::protobuf::uint64 user_delete_id() const;
  void set_user_delete_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.delete_friend_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_delete_id();
  void clear_has_user_delete_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_delete_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class delete_friend_nt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.delete_friend_nt) */ {
 public:
  delete_friend_nt();
  virtual ~delete_friend_nt();

  delete_friend_nt(const delete_friend_nt& from);

  inline delete_friend_nt& operator=(const delete_friend_nt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delete_friend_nt& default_instance();

  static inline const delete_friend_nt* internal_default_instance() {
    return reinterpret_cast<const delete_friend_nt*>(
               &_delete_friend_nt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(delete_friend_nt* other);

  // implements Message ----------------------------------------------

  inline delete_friend_nt* New() const PROTOBUF_FINAL { return New(NULL); }

  delete_friend_nt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const delete_friend_nt& from);
  void MergeFrom(const delete_friend_nt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(delete_friend_nt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef delete_friend_nt_msg msg;
  static const msg id =
    delete_friend_nt_msg_id;
  static inline bool msg_IsValid(int value) {
    return delete_friend_nt_msg_IsValid(value);
  }
  static const msg msg_MIN =
    delete_friend_nt_msg_msg_MIN;
  static const msg msg_MAX =
    delete_friend_nt_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    delete_friend_nt_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return delete_friend_nt_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return delete_friend_nt_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return delete_friend_nt_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 apply_user_id = 1;
  bool has_apply_user_id() const;
  void clear_apply_user_id();
  static const int kApplyUserIdFieldNumber = 1;
  ::google::protobuf::uint64 apply_user_id() const;
  void set_apply_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.delete_friend_nt)
 private:
  void set_has_apply_user_id();
  void clear_has_apply_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 apply_user_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class allow_friend_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.allow_friend_rq) */ {
 public:
  allow_friend_rq();
  virtual ~allow_friend_rq();

  allow_friend_rq(const allow_friend_rq& from);

  inline allow_friend_rq& operator=(const allow_friend_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const allow_friend_rq& default_instance();

  static inline const allow_friend_rq* internal_default_instance() {
    return reinterpret_cast<const allow_friend_rq*>(
               &_allow_friend_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(allow_friend_rq* other);

  // implements Message ----------------------------------------------

  inline allow_friend_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  allow_friend_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const allow_friend_rq& from);
  void MergeFrom(const allow_friend_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(allow_friend_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef allow_friend_rq_msg msg;
  static const msg id =
    allow_friend_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return allow_friend_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    allow_friend_rq_msg_msg_MIN;
  static const msg msg_MAX =
    allow_friend_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    allow_friend_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return allow_friend_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return allow_friend_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return allow_friend_rq_msg_Parse(name, value);
  }

  typedef allow_friend_rq_opcode_t opcode_t;
  static const opcode_t allow =
    allow_friend_rq_opcode_t_allow;
  static const opcode_t refuse =
    allow_friend_rq_opcode_t_refuse;
  static inline bool opcode_t_IsValid(int value) {
    return allow_friend_rq_opcode_t_IsValid(value);
  }
  static const opcode_t opcode_t_MIN =
    allow_friend_rq_opcode_t_opcode_t_MIN;
  static const opcode_t opcode_t_MAX =
    allow_friend_rq_opcode_t_opcode_t_MAX;
  static const int opcode_t_ARRAYSIZE =
    allow_friend_rq_opcode_t_opcode_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  opcode_t_descriptor() {
    return allow_friend_rq_opcode_t_descriptor();
  }
  static inline const ::std::string& opcode_t_Name(opcode_t value) {
    return allow_friend_rq_opcode_t_Name(value);
  }
  static inline bool opcode_t_Parse(const ::std::string& name,
      opcode_t* value) {
    return allow_friend_rq_opcode_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_myself_nick = 3;
  bool has_user_myself_nick() const;
  void clear_user_myself_nick();
  static const int kUserMyselfNickFieldNumber = 3;
  const ::std::string& user_myself_nick() const;
  void set_user_myself_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_myself_nick(::std::string&& value);
  #endif
  void set_user_myself_nick(const char* value);
  void set_user_myself_nick(const char* value, size_t size);
  ::std::string* mutable_user_myself_nick();
  ::std::string* release_user_myself_nick();
  void set_allocated_user_myself_nick(::std::string* user_myself_nick);

  // required string user_allow_nick = 4;
  bool has_user_allow_nick() const;
  void clear_user_allow_nick();
  static const int kUserAllowNickFieldNumber = 4;
  const ::std::string& user_allow_nick() const;
  void set_user_allow_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_user_allow_nick(::std::string&& value);
  #endif
  void set_user_allow_nick(const char* value);
  void set_user_allow_nick(const char* value, size_t size);
  ::std::string* mutable_user_allow_nick();
  ::std::string* release_user_allow_nick();
  void set_allocated_user_allow_nick(::std::string* user_allow_nick);

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // required uint64 user_allow_id = 2;
  bool has_user_allow_id() const;
  void clear_user_allow_id();
  static const int kUserAllowIdFieldNumber = 2;
  ::google::protobuf::uint64 user_allow_id() const;
  void set_user_allow_id(::google::protobuf::uint64 value);

  // required uint64 friend_group_id = 5;
  bool has_friend_group_id() const;
  void clear_friend_group_id();
  static const int kFriendGroupIdFieldNumber = 5;
  ::google::protobuf::uint64 friend_group_id() const;
  void set_friend_group_id(::google::protobuf::uint64 value);

  // required uint32 opcode = 6;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 6;
  ::google::protobuf::uint32 opcode() const;
  void set_opcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.allow_friend_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_allow_id();
  void clear_has_user_allow_id();
  void set_has_user_myself_nick();
  void clear_has_user_myself_nick();
  void set_has_user_allow_nick();
  void clear_has_user_allow_nick();
  void set_has_friend_group_id();
  void clear_has_friend_group_id();
  void set_has_opcode();
  void clear_has_opcode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_myself_nick_;
  ::google::protobuf::internal::ArenaStringPtr user_allow_nick_;
  ::google::protobuf::uint64 user_myself_id_;
  ::google::protobuf::uint64 user_allow_id_;
  ::google::protobuf::uint64 friend_group_id_;
  ::google::protobuf::uint32 opcode_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class allow_friend_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.allow_friend_rs) */ {
 public:
  allow_friend_rs();
  virtual ~allow_friend_rs();

  allow_friend_rs(const allow_friend_rs& from);

  inline allow_friend_rs& operator=(const allow_friend_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const allow_friend_rs& default_instance();

  static inline const allow_friend_rs* internal_default_instance() {
    return reinterpret_cast<const allow_friend_rs*>(
               &_allow_friend_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(allow_friend_rs* other);

  // implements Message ----------------------------------------------

  inline allow_friend_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  allow_friend_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const allow_friend_rs& from);
  void MergeFrom(const allow_friend_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(allow_friend_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef allow_friend_rs_msg msg;
  static const msg id =
    allow_friend_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return allow_friend_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    allow_friend_rs_msg_msg_MIN;
  static const msg msg_MAX =
    allow_friend_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    allow_friend_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return allow_friend_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return allow_friend_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return allow_friend_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .b_business_relation.user_relation relation_s = 4;
  int relation_s_size() const;
  void clear_relation_s();
  static const int kRelationSFieldNumber = 4;
  const ::b_business_relation::user_relation& relation_s(int index) const;
  ::b_business_relation::user_relation* mutable_relation_s(int index);
  ::b_business_relation::user_relation* add_relation_s();
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >*
      mutable_relation_s();
  const ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >&
      relation_s() const;

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_allow_id = 2;
  bool has_user_allow_id() const;
  void clear_user_allow_id();
  static const int kUserAllowIdFieldNumber = 2;
  ::google::protobuf::uint64 user_allow_id() const;
  void set_user_allow_id(::google::protobuf::uint64 value);

  // required uint32 opcode = 3;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 3;
  ::google::protobuf::uint32 opcode() const;
  void set_opcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.allow_friend_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_allow_id();
  void clear_has_user_allow_id();
  void set_has_opcode();
  void clear_has_opcode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation > relation_s_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_allow_id_;
  ::google::protobuf::uint32 opcode_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class allow_friend_nt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.allow_friend_nt) */ {
 public:
  allow_friend_nt();
  virtual ~allow_friend_nt();

  allow_friend_nt(const allow_friend_nt& from);

  inline allow_friend_nt& operator=(const allow_friend_nt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const allow_friend_nt& default_instance();

  static inline const allow_friend_nt* internal_default_instance() {
    return reinterpret_cast<const allow_friend_nt*>(
               &_allow_friend_nt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(allow_friend_nt* other);

  // implements Message ----------------------------------------------

  inline allow_friend_nt* New() const PROTOBUF_FINAL { return New(NULL); }

  allow_friend_nt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const allow_friend_nt& from);
  void MergeFrom(const allow_friend_nt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(allow_friend_nt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef allow_friend_nt_msg msg;
  static const msg id =
    allow_friend_nt_msg_id;
  static inline bool msg_IsValid(int value) {
    return allow_friend_nt_msg_IsValid(value);
  }
  static const msg msg_MIN =
    allow_friend_nt_msg_msg_MIN;
  static const msg msg_MAX =
    allow_friend_nt_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    allow_friend_nt_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return allow_friend_nt_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return allow_friend_nt_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return allow_friend_nt_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .b_business_relation.user_relation relation_s = 3;
  int relation_s_size() const;
  void clear_relation_s();
  static const int kRelationSFieldNumber = 3;
  const ::b_business_relation::user_relation& relation_s(int index) const;
  ::b_business_relation::user_relation* mutable_relation_s(int index);
  ::b_business_relation::user_relation* add_relation_s();
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >*
      mutable_relation_s();
  const ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >&
      relation_s() const;

  // required .b_business_account.user_info apply_user_info = 1;
  bool has_apply_user_info() const;
  void clear_apply_user_info();
  static const int kApplyUserInfoFieldNumber = 1;
  const ::b_business_account::user_info& apply_user_info() const;
  ::b_business_account::user_info* mutable_apply_user_info();
  ::b_business_account::user_info* release_apply_user_info();
  void set_allocated_apply_user_info(::b_business_account::user_info* apply_user_info);

  // required uint32 opcode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 2;
  ::google::protobuf::uint32 opcode() const;
  void set_opcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.allow_friend_nt)
 private:
  void set_has_apply_user_info();
  void clear_has_apply_user_info();
  void set_has_opcode();
  void clear_has_opcode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation > relation_s_;
  ::b_business_account::user_info* apply_user_info_;
  ::google::protobuf::uint32 opcode_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class query_friends_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.query_friends_rq) */ {
 public:
  query_friends_rq();
  virtual ~query_friends_rq();

  query_friends_rq(const query_friends_rq& from);

  inline query_friends_rq& operator=(const query_friends_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_friends_rq& default_instance();

  static inline const query_friends_rq* internal_default_instance() {
    return reinterpret_cast<const query_friends_rq*>(
               &_query_friends_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(query_friends_rq* other);

  // implements Message ----------------------------------------------

  inline query_friends_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  query_friends_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const query_friends_rq& from);
  void MergeFrom(const query_friends_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(query_friends_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef query_friends_rq_msg msg;
  static const msg id =
    query_friends_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return query_friends_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    query_friends_rq_msg_msg_MIN;
  static const msg msg_MAX =
    query_friends_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    query_friends_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return query_friends_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return query_friends_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return query_friends_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.query_friends_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_myself_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class query_friends_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.query_friends_rs) */ {
 public:
  query_friends_rs();
  virtual ~query_friends_rs();

  query_friends_rs(const query_friends_rs& from);

  inline query_friends_rs& operator=(const query_friends_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_friends_rs& default_instance();

  static inline const query_friends_rs* internal_default_instance() {
    return reinterpret_cast<const query_friends_rs*>(
               &_query_friends_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(query_friends_rs* other);

  // implements Message ----------------------------------------------

  inline query_friends_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  query_friends_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const query_friends_rs& from);
  void MergeFrom(const query_friends_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(query_friends_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef query_friends_rs_msg msg;
  static const msg id =
    query_friends_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return query_friends_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    query_friends_rs_msg_msg_MIN;
  static const msg msg_MAX =
    query_friends_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    query_friends_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return query_friends_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return query_friends_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return query_friends_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .b_business_relation.user_relation_group group_s = 2;
  int group_s_size() const;
  void clear_group_s();
  static const int kGroupSFieldNumber = 2;
  const ::b_business_relation::user_relation_group& group_s(int index) const;
  ::b_business_relation::user_relation_group* mutable_group_s(int index);
  ::b_business_relation::user_relation_group* add_group_s();
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation_group >*
      mutable_group_s();
  const ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation_group >&
      group_s() const;

  // repeated .b_business_relation.user_relation relation_s = 3;
  int relation_s_size() const;
  void clear_relation_s();
  static const int kRelationSFieldNumber = 3;
  const ::b_business_relation::user_relation& relation_s(int index) const;
  ::b_business_relation::user_relation* mutable_relation_s(int index);
  ::b_business_relation::user_relation* add_relation_s();
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >*
      mutable_relation_s();
  const ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >&
      relation_s() const;

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // @@protoc_insertion_point(class_scope:c_business_relation.query_friends_rs)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation_group > group_s_;
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation > relation_s_;
  ::b_error::info* error_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rename_friend_remark_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.rename_friend_remark_rq) */ {
 public:
  rename_friend_remark_rq();
  virtual ~rename_friend_remark_rq();

  rename_friend_remark_rq(const rename_friend_remark_rq& from);

  inline rename_friend_remark_rq& operator=(const rename_friend_remark_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rename_friend_remark_rq& default_instance();

  static inline const rename_friend_remark_rq* internal_default_instance() {
    return reinterpret_cast<const rename_friend_remark_rq*>(
               &_rename_friend_remark_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(rename_friend_remark_rq* other);

  // implements Message ----------------------------------------------

  inline rename_friend_remark_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  rename_friend_remark_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rename_friend_remark_rq& from);
  void MergeFrom(const rename_friend_remark_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rename_friend_remark_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef rename_friend_remark_rq_msg msg;
  static const msg id =
    rename_friend_remark_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return rename_friend_remark_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    rename_friend_remark_rq_msg_msg_MIN;
  static const msg msg_MAX =
    rename_friend_remark_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    rename_friend_remark_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return rename_friend_remark_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return rename_friend_remark_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return rename_friend_remark_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_friend_remark = 3;
  bool has_user_friend_remark() const;
  void clear_user_friend_remark();
  static const int kUserFriendRemarkFieldNumber = 3;
  const ::std::string& user_friend_remark() const;
  void set_user_friend_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_user_friend_remark(::std::string&& value);
  #endif
  void set_user_friend_remark(const char* value);
  void set_user_friend_remark(const char* value, size_t size);
  ::std::string* mutable_user_friend_remark();
  ::std::string* release_user_friend_remark();
  void set_allocated_user_friend_remark(::std::string* user_friend_remark);

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // required uint64 user_friend_id = 2;
  bool has_user_friend_id() const;
  void clear_user_friend_id();
  static const int kUserFriendIdFieldNumber = 2;
  ::google::protobuf::uint64 user_friend_id() const;
  void set_user_friend_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.rename_friend_remark_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_friend_id();
  void clear_has_user_friend_id();
  void set_has_user_friend_remark();
  void clear_has_user_friend_remark();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_friend_remark_;
  ::google::protobuf::uint64 user_myself_id_;
  ::google::protobuf::uint64 user_friend_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rename_friend_remark_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.rename_friend_remark_rs) */ {
 public:
  rename_friend_remark_rs();
  virtual ~rename_friend_remark_rs();

  rename_friend_remark_rs(const rename_friend_remark_rs& from);

  inline rename_friend_remark_rs& operator=(const rename_friend_remark_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rename_friend_remark_rs& default_instance();

  static inline const rename_friend_remark_rs* internal_default_instance() {
    return reinterpret_cast<const rename_friend_remark_rs*>(
               &_rename_friend_remark_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(rename_friend_remark_rs* other);

  // implements Message ----------------------------------------------

  inline rename_friend_remark_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  rename_friend_remark_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rename_friend_remark_rs& from);
  void MergeFrom(const rename_friend_remark_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rename_friend_remark_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef rename_friend_remark_rs_msg msg;
  static const msg id =
    rename_friend_remark_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return rename_friend_remark_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    rename_friend_remark_rs_msg_msg_MIN;
  static const msg msg_MAX =
    rename_friend_remark_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    rename_friend_remark_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return rename_friend_remark_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return rename_friend_remark_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return rename_friend_remark_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_friend_remark = 3;
  bool has_user_friend_remark() const;
  void clear_user_friend_remark();
  static const int kUserFriendRemarkFieldNumber = 3;
  const ::std::string& user_friend_remark() const;
  void set_user_friend_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_user_friend_remark(::std::string&& value);
  #endif
  void set_user_friend_remark(const char* value);
  void set_user_friend_remark(const char* value, size_t size);
  ::std::string* mutable_user_friend_remark();
  ::std::string* release_user_friend_remark();
  void set_allocated_user_friend_remark(::std::string* user_friend_remark);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_friend_id = 2;
  bool has_user_friend_id() const;
  void clear_user_friend_id();
  static const int kUserFriendIdFieldNumber = 2;
  ::google::protobuf::uint64 user_friend_id() const;
  void set_user_friend_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.rename_friend_remark_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_friend_id();
  void clear_has_user_friend_id();
  void set_has_user_friend_remark();
  void clear_has_user_friend_remark();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_friend_remark_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_friend_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class add_friend_group_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.add_friend_group_rq) */ {
 public:
  add_friend_group_rq();
  virtual ~add_friend_group_rq();

  add_friend_group_rq(const add_friend_group_rq& from);

  inline add_friend_group_rq& operator=(const add_friend_group_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_friend_group_rq& default_instance();

  static inline const add_friend_group_rq* internal_default_instance() {
    return reinterpret_cast<const add_friend_group_rq*>(
               &_add_friend_group_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(add_friend_group_rq* other);

  // implements Message ----------------------------------------------

  inline add_friend_group_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  add_friend_group_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const add_friend_group_rq& from);
  void MergeFrom(const add_friend_group_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(add_friend_group_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef add_friend_group_rq_msg msg;
  static const msg id =
    add_friend_group_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return add_friend_group_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    add_friend_group_rq_msg_msg_MIN;
  static const msg msg_MAX =
    add_friend_group_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    add_friend_group_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return add_friend_group_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return add_friend_group_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return add_friend_group_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_friend_group = 2;
  bool has_user_friend_group() const;
  void clear_user_friend_group();
  static const int kUserFriendGroupFieldNumber = 2;
  const ::std::string& user_friend_group() const;
  void set_user_friend_group(const ::std::string& value);
  #if LANG_CXX11
  void set_user_friend_group(::std::string&& value);
  #endif
  void set_user_friend_group(const char* value);
  void set_user_friend_group(const char* value, size_t size);
  ::std::string* mutable_user_friend_group();
  ::std::string* release_user_friend_group();
  void set_allocated_user_friend_group(::std::string* user_friend_group);

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.add_friend_group_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_friend_group();
  void clear_has_user_friend_group();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_friend_group_;
  ::google::protobuf::uint64 user_myself_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class add_friend_group_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.add_friend_group_rs) */ {
 public:
  add_friend_group_rs();
  virtual ~add_friend_group_rs();

  add_friend_group_rs(const add_friend_group_rs& from);

  inline add_friend_group_rs& operator=(const add_friend_group_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_friend_group_rs& default_instance();

  static inline const add_friend_group_rs* internal_default_instance() {
    return reinterpret_cast<const add_friend_group_rs*>(
               &_add_friend_group_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(add_friend_group_rs* other);

  // implements Message ----------------------------------------------

  inline add_friend_group_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  add_friend_group_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const add_friend_group_rs& from);
  void MergeFrom(const add_friend_group_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(add_friend_group_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef add_friend_group_rs_msg msg;
  static const msg id =
    add_friend_group_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return add_friend_group_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    add_friend_group_rs_msg_msg_MIN;
  static const msg msg_MAX =
    add_friend_group_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    add_friend_group_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return add_friend_group_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return add_friend_group_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return add_friend_group_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_friend_group = 2;
  bool has_user_friend_group() const;
  void clear_user_friend_group();
  static const int kUserFriendGroupFieldNumber = 2;
  const ::std::string& user_friend_group() const;
  void set_user_friend_group(const ::std::string& value);
  #if LANG_CXX11
  void set_user_friend_group(::std::string&& value);
  #endif
  void set_user_friend_group(const char* value);
  void set_user_friend_group(const char* value, size_t size);
  ::std::string* mutable_user_friend_group();
  ::std::string* release_user_friend_group();
  void set_allocated_user_friend_group(::std::string* user_friend_group);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_friend_group_id = 3;
  bool has_user_friend_group_id() const;
  void clear_user_friend_group_id();
  static const int kUserFriendGroupIdFieldNumber = 3;
  ::google::protobuf::uint64 user_friend_group_id() const;
  void set_user_friend_group_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.add_friend_group_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_friend_group();
  void clear_has_user_friend_group();
  void set_has_user_friend_group_id();
  void clear_has_user_friend_group_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_friend_group_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_friend_group_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class delete_friend_group_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.delete_friend_group_rq) */ {
 public:
  delete_friend_group_rq();
  virtual ~delete_friend_group_rq();

  delete_friend_group_rq(const delete_friend_group_rq& from);

  inline delete_friend_group_rq& operator=(const delete_friend_group_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delete_friend_group_rq& default_instance();

  static inline const delete_friend_group_rq* internal_default_instance() {
    return reinterpret_cast<const delete_friend_group_rq*>(
               &_delete_friend_group_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(delete_friend_group_rq* other);

  // implements Message ----------------------------------------------

  inline delete_friend_group_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  delete_friend_group_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const delete_friend_group_rq& from);
  void MergeFrom(const delete_friend_group_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(delete_friend_group_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef delete_friend_group_rq_msg msg;
  static const msg id =
    delete_friend_group_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return delete_friend_group_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    delete_friend_group_rq_msg_msg_MIN;
  static const msg msg_MAX =
    delete_friend_group_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    delete_friend_group_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return delete_friend_group_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return delete_friend_group_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return delete_friend_group_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // required uint64 user_friend_id = 2;
  bool has_user_friend_id() const;
  void clear_user_friend_id();
  static const int kUserFriendIdFieldNumber = 2;
  ::google::protobuf::uint64 user_friend_id() const;
  void set_user_friend_id(::google::protobuf::uint64 value);

  // required uint64 user_friend_group_id = 3;
  bool has_user_friend_group_id() const;
  void clear_user_friend_group_id();
  static const int kUserFriendGroupIdFieldNumber = 3;
  ::google::protobuf::uint64 user_friend_group_id() const;
  void set_user_friend_group_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.delete_friend_group_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_friend_id();
  void clear_has_user_friend_id();
  void set_has_user_friend_group_id();
  void clear_has_user_friend_group_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_myself_id_;
  ::google::protobuf::uint64 user_friend_id_;
  ::google::protobuf::uint64 user_friend_group_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class delete_friend_group_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.delete_friend_group_rs) */ {
 public:
  delete_friend_group_rs();
  virtual ~delete_friend_group_rs();

  delete_friend_group_rs(const delete_friend_group_rs& from);

  inline delete_friend_group_rs& operator=(const delete_friend_group_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delete_friend_group_rs& default_instance();

  static inline const delete_friend_group_rs* internal_default_instance() {
    return reinterpret_cast<const delete_friend_group_rs*>(
               &_delete_friend_group_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(delete_friend_group_rs* other);

  // implements Message ----------------------------------------------

  inline delete_friend_group_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  delete_friend_group_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const delete_friend_group_rs& from);
  void MergeFrom(const delete_friend_group_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(delete_friend_group_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef delete_friend_group_rs_msg msg;
  static const msg id =
    delete_friend_group_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return delete_friend_group_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    delete_friend_group_rs_msg_msg_MIN;
  static const msg msg_MAX =
    delete_friend_group_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    delete_friend_group_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return delete_friend_group_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return delete_friend_group_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return delete_friend_group_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_friend_id = 2;
  bool has_user_friend_id() const;
  void clear_user_friend_id();
  static const int kUserFriendIdFieldNumber = 2;
  ::google::protobuf::uint64 user_friend_id() const;
  void set_user_friend_id(::google::protobuf::uint64 value);

  // required uint64 user_friend_group_id = 3;
  bool has_user_friend_group_id() const;
  void clear_user_friend_group_id();
  static const int kUserFriendGroupIdFieldNumber = 3;
  ::google::protobuf::uint64 user_friend_group_id() const;
  void set_user_friend_group_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.delete_friend_group_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_friend_id();
  void clear_has_user_friend_id();
  void set_has_user_friend_group_id();
  void clear_has_user_friend_group_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_friend_id_;
  ::google::protobuf::uint64 user_friend_group_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rename_friend_group_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.rename_friend_group_rq) */ {
 public:
  rename_friend_group_rq();
  virtual ~rename_friend_group_rq();

  rename_friend_group_rq(const rename_friend_group_rq& from);

  inline rename_friend_group_rq& operator=(const rename_friend_group_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rename_friend_group_rq& default_instance();

  static inline const rename_friend_group_rq* internal_default_instance() {
    return reinterpret_cast<const rename_friend_group_rq*>(
               &_rename_friend_group_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(rename_friend_group_rq* other);

  // implements Message ----------------------------------------------

  inline rename_friend_group_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  rename_friend_group_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rename_friend_group_rq& from);
  void MergeFrom(const rename_friend_group_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rename_friend_group_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef rename_friend_group_rq_msg msg;
  static const msg id =
    rename_friend_group_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return rename_friend_group_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    rename_friend_group_rq_msg_msg_MIN;
  static const msg msg_MAX =
    rename_friend_group_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    rename_friend_group_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return rename_friend_group_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return rename_friend_group_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return rename_friend_group_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_friend_group = 4;
  bool has_user_friend_group() const;
  void clear_user_friend_group();
  static const int kUserFriendGroupFieldNumber = 4;
  const ::std::string& user_friend_group() const;
  void set_user_friend_group(const ::std::string& value);
  #if LANG_CXX11
  void set_user_friend_group(::std::string&& value);
  #endif
  void set_user_friend_group(const char* value);
  void set_user_friend_group(const char* value, size_t size);
  ::std::string* mutable_user_friend_group();
  ::std::string* release_user_friend_group();
  void set_allocated_user_friend_group(::std::string* user_friend_group);

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // required uint64 user_friend_group_id = 3;
  bool has_user_friend_group_id() const;
  void clear_user_friend_group_id();
  static const int kUserFriendGroupIdFieldNumber = 3;
  ::google::protobuf::uint64 user_friend_group_id() const;
  void set_user_friend_group_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.rename_friend_group_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_friend_group_id();
  void clear_has_user_friend_group_id();
  void set_has_user_friend_group();
  void clear_has_user_friend_group();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_friend_group_;
  ::google::protobuf::uint64 user_myself_id_;
  ::google::protobuf::uint64 user_friend_group_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rename_friend_group_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.rename_friend_group_rs) */ {
 public:
  rename_friend_group_rs();
  virtual ~rename_friend_group_rs();

  rename_friend_group_rs(const rename_friend_group_rs& from);

  inline rename_friend_group_rs& operator=(const rename_friend_group_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rename_friend_group_rs& default_instance();

  static inline const rename_friend_group_rs* internal_default_instance() {
    return reinterpret_cast<const rename_friend_group_rs*>(
               &_rename_friend_group_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(rename_friend_group_rs* other);

  // implements Message ----------------------------------------------

  inline rename_friend_group_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  rename_friend_group_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const rename_friend_group_rs& from);
  void MergeFrom(const rename_friend_group_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(rename_friend_group_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef rename_friend_group_rs_msg msg;
  static const msg id =
    rename_friend_group_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return rename_friend_group_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    rename_friend_group_rs_msg_msg_MIN;
  static const msg msg_MAX =
    rename_friend_group_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    rename_friend_group_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return rename_friend_group_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return rename_friend_group_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return rename_friend_group_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_friend_group = 4;
  bool has_user_friend_group() const;
  void clear_user_friend_group();
  static const int kUserFriendGroupFieldNumber = 4;
  const ::std::string& user_friend_group() const;
  void set_user_friend_group(const ::std::string& value);
  #if LANG_CXX11
  void set_user_friend_group(::std::string&& value);
  #endif
  void set_user_friend_group(const char* value);
  void set_user_friend_group(const char* value, size_t size);
  ::std::string* mutable_user_friend_group();
  ::std::string* release_user_friend_group();
  void set_allocated_user_friend_group(::std::string* user_friend_group);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_friend_group_id = 3;
  bool has_user_friend_group_id() const;
  void clear_user_friend_group_id();
  static const int kUserFriendGroupIdFieldNumber = 3;
  ::google::protobuf::uint64 user_friend_group_id() const;
  void set_user_friend_group_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.rename_friend_group_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_friend_group_id();
  void clear_has_user_friend_group_id();
  void set_has_user_friend_group();
  void clear_has_user_friend_group();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_friend_group_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_friend_group_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class change_friend_group_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.change_friend_group_rq) */ {
 public:
  change_friend_group_rq();
  virtual ~change_friend_group_rq();

  change_friend_group_rq(const change_friend_group_rq& from);

  inline change_friend_group_rq& operator=(const change_friend_group_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const change_friend_group_rq& default_instance();

  static inline const change_friend_group_rq* internal_default_instance() {
    return reinterpret_cast<const change_friend_group_rq*>(
               &_change_friend_group_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(change_friend_group_rq* other);

  // implements Message ----------------------------------------------

  inline change_friend_group_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  change_friend_group_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const change_friend_group_rq& from);
  void MergeFrom(const change_friend_group_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(change_friend_group_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef change_friend_group_rq_msg msg;
  static const msg id =
    change_friend_group_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return change_friend_group_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    change_friend_group_rq_msg_msg_MIN;
  static const msg msg_MAX =
    change_friend_group_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    change_friend_group_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return change_friend_group_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return change_friend_group_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return change_friend_group_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // required uint64 user_friend_id = 2;
  bool has_user_friend_id() const;
  void clear_user_friend_id();
  static const int kUserFriendIdFieldNumber = 2;
  ::google::protobuf::uint64 user_friend_id() const;
  void set_user_friend_id(::google::protobuf::uint64 value);

  // required uint64 user_friend_group_id_old = 3;
  bool has_user_friend_group_id_old() const;
  void clear_user_friend_group_id_old();
  static const int kUserFriendGroupIdOldFieldNumber = 3;
  ::google::protobuf::uint64 user_friend_group_id_old() const;
  void set_user_friend_group_id_old(::google::protobuf::uint64 value);

  // required uint64 user_friend_group_id_new = 4;
  bool has_user_friend_group_id_new() const;
  void clear_user_friend_group_id_new();
  static const int kUserFriendGroupIdNewFieldNumber = 4;
  ::google::protobuf::uint64 user_friend_group_id_new() const;
  void set_user_friend_group_id_new(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.change_friend_group_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_friend_id();
  void clear_has_user_friend_id();
  void set_has_user_friend_group_id_old();
  void clear_has_user_friend_group_id_old();
  void set_has_user_friend_group_id_new();
  void clear_has_user_friend_group_id_new();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_myself_id_;
  ::google::protobuf::uint64 user_friend_id_;
  ::google::protobuf::uint64 user_friend_group_id_old_;
  ::google::protobuf::uint64 user_friend_group_id_new_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class change_friend_group_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.change_friend_group_rs) */ {
 public:
  change_friend_group_rs();
  virtual ~change_friend_group_rs();

  change_friend_group_rs(const change_friend_group_rs& from);

  inline change_friend_group_rs& operator=(const change_friend_group_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const change_friend_group_rs& default_instance();

  static inline const change_friend_group_rs* internal_default_instance() {
    return reinterpret_cast<const change_friend_group_rs*>(
               &_change_friend_group_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(change_friend_group_rs* other);

  // implements Message ----------------------------------------------

  inline change_friend_group_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  change_friend_group_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const change_friend_group_rs& from);
  void MergeFrom(const change_friend_group_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(change_friend_group_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef change_friend_group_rs_msg msg;
  static const msg id =
    change_friend_group_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return change_friend_group_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    change_friend_group_rs_msg_msg_MIN;
  static const msg msg_MAX =
    change_friend_group_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    change_friend_group_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return change_friend_group_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return change_friend_group_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return change_friend_group_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_friend_id = 2;
  bool has_user_friend_id() const;
  void clear_user_friend_id();
  static const int kUserFriendIdFieldNumber = 2;
  ::google::protobuf::uint64 user_friend_id() const;
  void set_user_friend_id(::google::protobuf::uint64 value);

  // required uint64 user_friend_group_id_old = 3;
  bool has_user_friend_group_id_old() const;
  void clear_user_friend_group_id_old();
  static const int kUserFriendGroupIdOldFieldNumber = 3;
  ::google::protobuf::uint64 user_friend_group_id_old() const;
  void set_user_friend_group_id_old(::google::protobuf::uint64 value);

  // required uint64 user_friend_group_id_new = 4;
  bool has_user_friend_group_id_new() const;
  void clear_user_friend_group_id_new();
  static const int kUserFriendGroupIdNewFieldNumber = 4;
  ::google::protobuf::uint64 user_friend_group_id_new() const;
  void set_user_friend_group_id_new(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.change_friend_group_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_friend_id();
  void clear_has_user_friend_id();
  void set_has_user_friend_group_id_old();
  void clear_has_user_friend_group_id_old();
  void set_has_user_friend_group_id_new();
  void clear_has_user_friend_group_id_new();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_friend_id_;
  ::google::protobuf::uint64 user_friend_group_id_old_;
  ::google::protobuf::uint64 user_friend_group_id_new_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class query_friends_apply_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.query_friends_apply_rq) */ {
 public:
  query_friends_apply_rq();
  virtual ~query_friends_apply_rq();

  query_friends_apply_rq(const query_friends_apply_rq& from);

  inline query_friends_apply_rq& operator=(const query_friends_apply_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_friends_apply_rq& default_instance();

  static inline const query_friends_apply_rq* internal_default_instance() {
    return reinterpret_cast<const query_friends_apply_rq*>(
               &_query_friends_apply_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(query_friends_apply_rq* other);

  // implements Message ----------------------------------------------

  inline query_friends_apply_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  query_friends_apply_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const query_friends_apply_rq& from);
  void MergeFrom(const query_friends_apply_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(query_friends_apply_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef query_friends_apply_rq_msg msg;
  static const msg id =
    query_friends_apply_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return query_friends_apply_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    query_friends_apply_rq_msg_msg_MIN;
  static const msg msg_MAX =
    query_friends_apply_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    query_friends_apply_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return query_friends_apply_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return query_friends_apply_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return query_friends_apply_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.query_friends_apply_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_myself_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class query_friends_apply_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.query_friends_apply_rs) */ {
 public:
  query_friends_apply_rs();
  virtual ~query_friends_apply_rs();

  query_friends_apply_rs(const query_friends_apply_rs& from);

  inline query_friends_apply_rs& operator=(const query_friends_apply_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_friends_apply_rs& default_instance();

  static inline const query_friends_apply_rs* internal_default_instance() {
    return reinterpret_cast<const query_friends_apply_rs*>(
               &_query_friends_apply_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(query_friends_apply_rs* other);

  // implements Message ----------------------------------------------

  inline query_friends_apply_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  query_friends_apply_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const query_friends_apply_rs& from);
  void MergeFrom(const query_friends_apply_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(query_friends_apply_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef query_friends_apply_rs_msg msg;
  static const msg id =
    query_friends_apply_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return query_friends_apply_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    query_friends_apply_rs_msg_msg_MIN;
  static const msg msg_MAX =
    query_friends_apply_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    query_friends_apply_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return query_friends_apply_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return query_friends_apply_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return query_friends_apply_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .b_business_relation.friend_apply apply_s = 2;
  int apply_s_size() const;
  void clear_apply_s();
  static const int kApplySFieldNumber = 2;
  const ::b_business_relation::friend_apply& apply_s(int index) const;
  ::b_business_relation::friend_apply* mutable_apply_s(int index);
  ::b_business_relation::friend_apply* add_apply_s();
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::friend_apply >*
      mutable_apply_s();
  const ::google::protobuf::RepeatedPtrField< ::b_business_relation::friend_apply >&
      apply_s() const;

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // @@protoc_insertion_point(class_scope:c_business_relation.query_friends_apply_rs)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::b_business_relation::friend_apply > apply_s_;
  ::b_error::info* error_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class talk_friend_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.talk_friend_rq) */ {
 public:
  talk_friend_rq();
  virtual ~talk_friend_rq();

  talk_friend_rq(const talk_friend_rq& from);

  inline talk_friend_rq& operator=(const talk_friend_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talk_friend_rq& default_instance();

  static inline const talk_friend_rq* internal_default_instance() {
    return reinterpret_cast<const talk_friend_rq*>(
               &_talk_friend_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(talk_friend_rq* other);

  // implements Message ----------------------------------------------

  inline talk_friend_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  talk_friend_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const talk_friend_rq& from);
  void MergeFrom(const talk_friend_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(talk_friend_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef talk_friend_rq_msg msg;
  static const msg id =
    talk_friend_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return talk_friend_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    talk_friend_rq_msg_msg_MIN;
  static const msg msg_MAX =
    talk_friend_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    talk_friend_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return talk_friend_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return talk_friend_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return talk_friend_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string talking = 3;
  bool has_talking() const;
  void clear_talking();
  static const int kTalkingFieldNumber = 3;
  const ::std::string& talking() const;
  void set_talking(const ::std::string& value);
  #if LANG_CXX11
  void set_talking(::std::string&& value);
  #endif
  void set_talking(const char* value);
  void set_talking(const char* value, size_t size);
  ::std::string* mutable_talking();
  ::std::string* release_talking();
  void set_allocated_talking(::std::string* talking);

  // required uint64 user_myself_id = 1;
  bool has_user_myself_id() const;
  void clear_user_myself_id();
  static const int kUserMyselfIdFieldNumber = 1;
  ::google::protobuf::uint64 user_myself_id() const;
  void set_user_myself_id(::google::protobuf::uint64 value);

  // required uint64 user_talk_id = 2;
  bool has_user_talk_id() const;
  void clear_user_talk_id();
  static const int kUserTalkIdFieldNumber = 2;
  ::google::protobuf::uint64 user_talk_id() const;
  void set_user_talk_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.talk_friend_rq)
 private:
  void set_has_user_myself_id();
  void clear_has_user_myself_id();
  void set_has_user_talk_id();
  void clear_has_user_talk_id();
  void set_has_talking();
  void clear_has_talking();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr talking_;
  ::google::protobuf::uint64 user_myself_id_;
  ::google::protobuf::uint64 user_talk_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class talk_friend_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.talk_friend_rs) */ {
 public:
  talk_friend_rs();
  virtual ~talk_friend_rs();

  talk_friend_rs(const talk_friend_rs& from);

  inline talk_friend_rs& operator=(const talk_friend_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talk_friend_rs& default_instance();

  static inline const talk_friend_rs* internal_default_instance() {
    return reinterpret_cast<const talk_friend_rs*>(
               &_talk_friend_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(talk_friend_rs* other);

  // implements Message ----------------------------------------------

  inline talk_friend_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  talk_friend_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const talk_friend_rs& from);
  void MergeFrom(const talk_friend_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(talk_friend_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef talk_friend_rs_msg msg;
  static const msg id =
    talk_friend_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return talk_friend_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    talk_friend_rs_msg_msg_MIN;
  static const msg msg_MAX =
    talk_friend_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    talk_friend_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return talk_friend_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return talk_friend_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return talk_friend_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_talk_id = 2;
  bool has_user_talk_id() const;
  void clear_user_talk_id();
  static const int kUserTalkIdFieldNumber = 2;
  ::google::protobuf::uint64 user_talk_id() const;
  void set_user_talk_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.talk_friend_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_talk_id();
  void clear_has_user_talk_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_talk_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class talk_friend_nt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_relation.talk_friend_nt) */ {
 public:
  talk_friend_nt();
  virtual ~talk_friend_nt();

  talk_friend_nt(const talk_friend_nt& from);

  inline talk_friend_nt& operator=(const talk_friend_nt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talk_friend_nt& default_instance();

  static inline const talk_friend_nt* internal_default_instance() {
    return reinterpret_cast<const talk_friend_nt*>(
               &_talk_friend_nt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(talk_friend_nt* other);

  // implements Message ----------------------------------------------

  inline talk_friend_nt* New() const PROTOBUF_FINAL { return New(NULL); }

  talk_friend_nt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const talk_friend_nt& from);
  void MergeFrom(const talk_friend_nt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(talk_friend_nt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef talk_friend_nt_msg msg;
  static const msg id =
    talk_friend_nt_msg_id;
  static inline bool msg_IsValid(int value) {
    return talk_friend_nt_msg_IsValid(value);
  }
  static const msg msg_MIN =
    talk_friend_nt_msg_msg_MIN;
  static const msg msg_MAX =
    talk_friend_nt_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    talk_friend_nt_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return talk_friend_nt_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return talk_friend_nt_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return talk_friend_nt_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string talking = 2;
  bool has_talking() const;
  void clear_talking();
  static const int kTalkingFieldNumber = 2;
  const ::std::string& talking() const;
  void set_talking(const ::std::string& value);
  #if LANG_CXX11
  void set_talking(::std::string&& value);
  #endif
  void set_talking(const char* value);
  void set_talking(const char* value, size_t size);
  ::std::string* mutable_talking();
  ::std::string* release_talking();
  void set_allocated_talking(::std::string* talking);

  // required uint64 apply_talk_id = 1;
  bool has_apply_talk_id() const;
  void clear_apply_talk_id();
  static const int kApplyTalkIdFieldNumber = 1;
  ::google::protobuf::uint64 apply_talk_id() const;
  void set_apply_talk_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_relation.talk_friend_nt)
 private:
  void set_has_apply_talk_id();
  void clear_has_apply_talk_id();
  void set_has_talking();
  void clear_has_talking();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr talking_;
  ::google::protobuf::uint64 apply_talk_id_;
  friend struct protobuf_c_5fbusiness_5frelation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// friend_info

// required .b_business_account.user_info user_info = 1;
inline bool friend_info::has_user_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_info::set_has_user_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_info::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_info::clear_user_info() {
  if (user_info_ != NULL) user_info_->::b_business_account::user_info::Clear();
  clear_has_user_info();
}
inline const ::b_business_account::user_info& friend_info::user_info() const {
  // @@protoc_insertion_point(field_get:c_business_relation.friend_info.user_info)
  return user_info_ != NULL ? *user_info_
                         : *::b_business_account::user_info::internal_default_instance();
}
inline ::b_business_account::user_info* friend_info::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::b_business_account::user_info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.friend_info.user_info)
  return user_info_;
}
inline ::b_business_account::user_info* friend_info::release_user_info() {
  // @@protoc_insertion_point(field_release:c_business_relation.friend_info.user_info)
  clear_has_user_info();
  ::b_business_account::user_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void friend_info::set_allocated_user_info(::b_business_account::user_info* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.friend_info.user_info)
}

// optional string user_group = 2;
inline bool friend_info::has_user_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_info::set_has_user_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_info::clear_has_user_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_info::clear_user_group() {
  user_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_group();
}
inline const ::std::string& friend_info::user_group() const {
  // @@protoc_insertion_point(field_get:c_business_relation.friend_info.user_group)
  return user_group_.GetNoArena();
}
inline void friend_info::set_user_group(const ::std::string& value) {
  set_has_user_group();
  user_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.friend_info.user_group)
}
#if LANG_CXX11
inline void friend_info::set_user_group(::std::string&& value) {
  set_has_user_group();
  user_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.friend_info.user_group)
}
#endif
inline void friend_info::set_user_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_group();
  user_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.friend_info.user_group)
}
inline void friend_info::set_user_group(const char* value, size_t size) {
  set_has_user_group();
  user_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.friend_info.user_group)
}
inline ::std::string* friend_info::mutable_user_group() {
  set_has_user_group();
  // @@protoc_insertion_point(field_mutable:c_business_relation.friend_info.user_group)
  return user_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* friend_info::release_user_group() {
  // @@protoc_insertion_point(field_release:c_business_relation.friend_info.user_group)
  clear_has_user_group();
  return user_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void friend_info::set_allocated_user_group(::std::string* user_group) {
  if (user_group != NULL) {
    set_has_user_group();
  } else {
    clear_has_user_group();
  }
  user_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_group);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.friend_info.user_group)
}

// optional string user_remark = 3;
inline bool friend_info::has_user_remark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_info::set_has_user_remark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_info::clear_has_user_remark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_info::clear_user_remark() {
  user_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_remark();
}
inline const ::std::string& friend_info::user_remark() const {
  // @@protoc_insertion_point(field_get:c_business_relation.friend_info.user_remark)
  return user_remark_.GetNoArena();
}
inline void friend_info::set_user_remark(const ::std::string& value) {
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.friend_info.user_remark)
}
#if LANG_CXX11
inline void friend_info::set_user_remark(::std::string&& value) {
  set_has_user_remark();
  user_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.friend_info.user_remark)
}
#endif
inline void friend_info::set_user_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.friend_info.user_remark)
}
inline void friend_info::set_user_remark(const char* value, size_t size) {
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.friend_info.user_remark)
}
inline ::std::string* friend_info::mutable_user_remark() {
  set_has_user_remark();
  // @@protoc_insertion_point(field_mutable:c_business_relation.friend_info.user_remark)
  return user_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* friend_info::release_user_remark() {
  // @@protoc_insertion_point(field_release:c_business_relation.friend_info.user_remark)
  clear_has_user_remark();
  return user_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void friend_info::set_allocated_user_remark(::std::string* user_remark) {
  if (user_remark != NULL) {
    set_has_user_remark();
  } else {
    clear_has_user_remark();
  }
  user_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_remark);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.friend_info.user_remark)
}

// -------------------------------------------------------------------

// add_friend_rq

// required uint64 user_myself_id = 1;
inline bool add_friend_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void add_friend_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void add_friend_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void add_friend_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 add_friend_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rq.user_myself_id)
  return user_myself_id_;
}
inline void add_friend_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rq.user_myself_id)
}

// required uint64 user_add_id = 2;
inline bool add_friend_rq::has_user_add_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void add_friend_rq::set_has_user_add_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void add_friend_rq::clear_has_user_add_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void add_friend_rq::clear_user_add_id() {
  user_add_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_add_id();
}
inline ::google::protobuf::uint64 add_friend_rq::user_add_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rq.user_add_id)
  return user_add_id_;
}
inline void add_friend_rq::set_user_add_id(::google::protobuf::uint64 value) {
  set_has_user_add_id();
  user_add_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rq.user_add_id)
}

// required string user_remark = 3;
inline bool add_friend_rq::has_user_remark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_friend_rq::set_has_user_remark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_friend_rq::clear_has_user_remark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_friend_rq::clear_user_remark() {
  user_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_remark();
}
inline const ::std::string& add_friend_rq::user_remark() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rq.user_remark)
  return user_remark_.GetNoArena();
}
inline void add_friend_rq::set_user_remark(const ::std::string& value) {
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rq.user_remark)
}
#if LANG_CXX11
inline void add_friend_rq::set_user_remark(::std::string&& value) {
  set_has_user_remark();
  user_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.add_friend_rq.user_remark)
}
#endif
inline void add_friend_rq::set_user_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.add_friend_rq.user_remark)
}
inline void add_friend_rq::set_user_remark(const char* value, size_t size) {
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.add_friend_rq.user_remark)
}
inline ::std::string* add_friend_rq::mutable_user_remark() {
  set_has_user_remark();
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_rq.user_remark)
  return user_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* add_friend_rq::release_user_remark() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_rq.user_remark)
  clear_has_user_remark();
  return user_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void add_friend_rq::set_allocated_user_remark(::std::string* user_remark) {
  if (user_remark != NULL) {
    set_has_user_remark();
  } else {
    clear_has_user_remark();
  }
  user_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_remark);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_rq.user_remark)
}

// required string description = 4;
inline bool add_friend_rq::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add_friend_rq::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add_friend_rq::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add_friend_rq::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& add_friend_rq::description() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rq.description)
  return description_.GetNoArena();
}
inline void add_friend_rq::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rq.description)
}
#if LANG_CXX11
inline void add_friend_rq::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.add_friend_rq.description)
}
#endif
inline void add_friend_rq::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.add_friend_rq.description)
}
inline void add_friend_rq::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.add_friend_rq.description)
}
inline ::std::string* add_friend_rq::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_rq.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* add_friend_rq::release_description() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_rq.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void add_friend_rq::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_rq.description)
}

// -------------------------------------------------------------------

// add_friend_rs

// required .b_error.info error = 1;
inline bool add_friend_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add_friend_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add_friend_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add_friend_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& add_friend_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* add_friend_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_rs.error)
  return error_;
}
inline ::b_error::info* add_friend_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void add_friend_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_rs.error)
}

// required uint64 user_add_id = 2;
inline bool add_friend_rs::has_user_add_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void add_friend_rs::set_has_user_add_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void add_friend_rs::clear_has_user_add_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void add_friend_rs::clear_user_add_id() {
  user_add_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_add_id();
}
inline ::google::protobuf::uint64 add_friend_rs::user_add_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rs.user_add_id)
  return user_add_id_;
}
inline void add_friend_rs::set_user_add_id(::google::protobuf::uint64 value) {
  set_has_user_add_id();
  user_add_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rs.user_add_id)
}

// required string user_remark = 3;
inline bool add_friend_rs::has_user_remark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_friend_rs::set_has_user_remark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_friend_rs::clear_has_user_remark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_friend_rs::clear_user_remark() {
  user_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_remark();
}
inline const ::std::string& add_friend_rs::user_remark() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rs.user_remark)
  return user_remark_.GetNoArena();
}
inline void add_friend_rs::set_user_remark(const ::std::string& value) {
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rs.user_remark)
}
#if LANG_CXX11
inline void add_friend_rs::set_user_remark(::std::string&& value) {
  set_has_user_remark();
  user_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.add_friend_rs.user_remark)
}
#endif
inline void add_friend_rs::set_user_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.add_friend_rs.user_remark)
}
inline void add_friend_rs::set_user_remark(const char* value, size_t size) {
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.add_friend_rs.user_remark)
}
inline ::std::string* add_friend_rs::mutable_user_remark() {
  set_has_user_remark();
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_rs.user_remark)
  return user_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* add_friend_rs::release_user_remark() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_rs.user_remark)
  clear_has_user_remark();
  return user_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void add_friend_rs::set_allocated_user_remark(::std::string* user_remark) {
  if (user_remark != NULL) {
    set_has_user_remark();
  } else {
    clear_has_user_remark();
  }
  user_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_remark);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_rs.user_remark)
}

// -------------------------------------------------------------------

// add_friend_nt

// required .b_business_account.user_info apply_user_info = 1;
inline bool add_friend_nt::has_apply_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add_friend_nt::set_has_apply_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add_friend_nt::clear_has_apply_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add_friend_nt::clear_apply_user_info() {
  if (apply_user_info_ != NULL) apply_user_info_->::b_business_account::user_info::Clear();
  clear_has_apply_user_info();
}
inline const ::b_business_account::user_info& add_friend_nt::apply_user_info() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_nt.apply_user_info)
  return apply_user_info_ != NULL ? *apply_user_info_
                         : *::b_business_account::user_info::internal_default_instance();
}
inline ::b_business_account::user_info* add_friend_nt::mutable_apply_user_info() {
  set_has_apply_user_info();
  if (apply_user_info_ == NULL) {
    apply_user_info_ = new ::b_business_account::user_info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_nt.apply_user_info)
  return apply_user_info_;
}
inline ::b_business_account::user_info* add_friend_nt::release_apply_user_info() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_nt.apply_user_info)
  clear_has_apply_user_info();
  ::b_business_account::user_info* temp = apply_user_info_;
  apply_user_info_ = NULL;
  return temp;
}
inline void add_friend_nt::set_allocated_apply_user_info(::b_business_account::user_info* apply_user_info) {
  delete apply_user_info_;
  apply_user_info_ = apply_user_info;
  if (apply_user_info) {
    set_has_apply_user_info();
  } else {
    clear_has_apply_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_nt.apply_user_info)
}

// required string description = 2;
inline bool add_friend_nt::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_friend_nt::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_friend_nt::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_friend_nt::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& add_friend_nt::description() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_nt.description)
  return description_.GetNoArena();
}
inline void add_friend_nt::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_nt.description)
}
#if LANG_CXX11
inline void add_friend_nt::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.add_friend_nt.description)
}
#endif
inline void add_friend_nt::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.add_friend_nt.description)
}
inline void add_friend_nt::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.add_friend_nt.description)
}
inline ::std::string* add_friend_nt::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_nt.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* add_friend_nt::release_description() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_nt.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void add_friend_nt::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_nt.description)
}

// -------------------------------------------------------------------

// delete_friend_rq

// required uint64 user_myself_id = 1;
inline bool delete_friend_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delete_friend_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delete_friend_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delete_friend_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 delete_friend_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_rq.user_myself_id)
  return user_myself_id_;
}
inline void delete_friend_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_rq.user_myself_id)
}

// required uint64 user_delete_id = 2;
inline bool delete_friend_rq::has_user_delete_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void delete_friend_rq::set_has_user_delete_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void delete_friend_rq::clear_has_user_delete_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void delete_friend_rq::clear_user_delete_id() {
  user_delete_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_delete_id();
}
inline ::google::protobuf::uint64 delete_friend_rq::user_delete_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_rq.user_delete_id)
  return user_delete_id_;
}
inline void delete_friend_rq::set_user_delete_id(::google::protobuf::uint64 value) {
  set_has_user_delete_id();
  user_delete_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_rq.user_delete_id)
}

// -------------------------------------------------------------------

// delete_friend_rs

// required .b_error.info error = 1;
inline bool delete_friend_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delete_friend_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delete_friend_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delete_friend_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& delete_friend_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* delete_friend_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.delete_friend_rs.error)
  return error_;
}
inline ::b_error::info* delete_friend_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.delete_friend_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void delete_friend_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.delete_friend_rs.error)
}

// required uint64 user_delete_id = 2;
inline bool delete_friend_rs::has_user_delete_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void delete_friend_rs::set_has_user_delete_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void delete_friend_rs::clear_has_user_delete_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void delete_friend_rs::clear_user_delete_id() {
  user_delete_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_delete_id();
}
inline ::google::protobuf::uint64 delete_friend_rs::user_delete_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_rs.user_delete_id)
  return user_delete_id_;
}
inline void delete_friend_rs::set_user_delete_id(::google::protobuf::uint64 value) {
  set_has_user_delete_id();
  user_delete_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_rs.user_delete_id)
}

// -------------------------------------------------------------------

// delete_friend_nt

// required uint64 apply_user_id = 1;
inline bool delete_friend_nt::has_apply_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delete_friend_nt::set_has_apply_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delete_friend_nt::clear_has_apply_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delete_friend_nt::clear_apply_user_id() {
  apply_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_user_id();
}
inline ::google::protobuf::uint64 delete_friend_nt::apply_user_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_nt.apply_user_id)
  return apply_user_id_;
}
inline void delete_friend_nt::set_apply_user_id(::google::protobuf::uint64 value) {
  set_has_apply_user_id();
  apply_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_nt.apply_user_id)
}

// -------------------------------------------------------------------

// allow_friend_rq

// required uint64 user_myself_id = 1;
inline bool allow_friend_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void allow_friend_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void allow_friend_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void allow_friend_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 allow_friend_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.user_myself_id)
  return user_myself_id_;
}
inline void allow_friend_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.user_myself_id)
}

// required uint64 user_allow_id = 2;
inline bool allow_friend_rq::has_user_allow_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void allow_friend_rq::set_has_user_allow_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void allow_friend_rq::clear_has_user_allow_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void allow_friend_rq::clear_user_allow_id() {
  user_allow_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_allow_id();
}
inline ::google::protobuf::uint64 allow_friend_rq::user_allow_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.user_allow_id)
  return user_allow_id_;
}
inline void allow_friend_rq::set_user_allow_id(::google::protobuf::uint64 value) {
  set_has_user_allow_id();
  user_allow_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.user_allow_id)
}

// required string user_myself_nick = 3;
inline bool allow_friend_rq::has_user_myself_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void allow_friend_rq::set_has_user_myself_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void allow_friend_rq::clear_has_user_myself_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void allow_friend_rq::clear_user_myself_nick() {
  user_myself_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_myself_nick();
}
inline const ::std::string& allow_friend_rq::user_myself_nick() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.user_myself_nick)
  return user_myself_nick_.GetNoArena();
}
inline void allow_friend_rq::set_user_myself_nick(const ::std::string& value) {
  set_has_user_myself_nick();
  user_myself_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.user_myself_nick)
}
#if LANG_CXX11
inline void allow_friend_rq::set_user_myself_nick(::std::string&& value) {
  set_has_user_myself_nick();
  user_myself_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.allow_friend_rq.user_myself_nick)
}
#endif
inline void allow_friend_rq::set_user_myself_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_myself_nick();
  user_myself_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.allow_friend_rq.user_myself_nick)
}
inline void allow_friend_rq::set_user_myself_nick(const char* value, size_t size) {
  set_has_user_myself_nick();
  user_myself_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.allow_friend_rq.user_myself_nick)
}
inline ::std::string* allow_friend_rq::mutable_user_myself_nick() {
  set_has_user_myself_nick();
  // @@protoc_insertion_point(field_mutable:c_business_relation.allow_friend_rq.user_myself_nick)
  return user_myself_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allow_friend_rq::release_user_myself_nick() {
  // @@protoc_insertion_point(field_release:c_business_relation.allow_friend_rq.user_myself_nick)
  clear_has_user_myself_nick();
  return user_myself_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allow_friend_rq::set_allocated_user_myself_nick(::std::string* user_myself_nick) {
  if (user_myself_nick != NULL) {
    set_has_user_myself_nick();
  } else {
    clear_has_user_myself_nick();
  }
  user_myself_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_myself_nick);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.allow_friend_rq.user_myself_nick)
}

// required string user_allow_nick = 4;
inline bool allow_friend_rq::has_user_allow_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void allow_friend_rq::set_has_user_allow_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void allow_friend_rq::clear_has_user_allow_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void allow_friend_rq::clear_user_allow_nick() {
  user_allow_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_allow_nick();
}
inline const ::std::string& allow_friend_rq::user_allow_nick() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.user_allow_nick)
  return user_allow_nick_.GetNoArena();
}
inline void allow_friend_rq::set_user_allow_nick(const ::std::string& value) {
  set_has_user_allow_nick();
  user_allow_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.user_allow_nick)
}
#if LANG_CXX11
inline void allow_friend_rq::set_user_allow_nick(::std::string&& value) {
  set_has_user_allow_nick();
  user_allow_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.allow_friend_rq.user_allow_nick)
}
#endif
inline void allow_friend_rq::set_user_allow_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_allow_nick();
  user_allow_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.allow_friend_rq.user_allow_nick)
}
inline void allow_friend_rq::set_user_allow_nick(const char* value, size_t size) {
  set_has_user_allow_nick();
  user_allow_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.allow_friend_rq.user_allow_nick)
}
inline ::std::string* allow_friend_rq::mutable_user_allow_nick() {
  set_has_user_allow_nick();
  // @@protoc_insertion_point(field_mutable:c_business_relation.allow_friend_rq.user_allow_nick)
  return user_allow_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allow_friend_rq::release_user_allow_nick() {
  // @@protoc_insertion_point(field_release:c_business_relation.allow_friend_rq.user_allow_nick)
  clear_has_user_allow_nick();
  return user_allow_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allow_friend_rq::set_allocated_user_allow_nick(::std::string* user_allow_nick) {
  if (user_allow_nick != NULL) {
    set_has_user_allow_nick();
  } else {
    clear_has_user_allow_nick();
  }
  user_allow_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_allow_nick);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.allow_friend_rq.user_allow_nick)
}

// required uint64 friend_group_id = 5;
inline bool allow_friend_rq::has_friend_group_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void allow_friend_rq::set_has_friend_group_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void allow_friend_rq::clear_has_friend_group_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void allow_friend_rq::clear_friend_group_id() {
  friend_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_group_id();
}
inline ::google::protobuf::uint64 allow_friend_rq::friend_group_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.friend_group_id)
  return friend_group_id_;
}
inline void allow_friend_rq::set_friend_group_id(::google::protobuf::uint64 value) {
  set_has_friend_group_id();
  friend_group_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.friend_group_id)
}

// required uint32 opcode = 6;
inline bool allow_friend_rq::has_opcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void allow_friend_rq::set_has_opcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void allow_friend_rq::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void allow_friend_rq::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
inline ::google::protobuf::uint32 allow_friend_rq::opcode() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.opcode)
  return opcode_;
}
inline void allow_friend_rq::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.opcode)
}

// -------------------------------------------------------------------

// allow_friend_rs

// required .b_error.info error = 1;
inline bool allow_friend_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void allow_friend_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void allow_friend_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void allow_friend_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& allow_friend_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* allow_friend_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.allow_friend_rs.error)
  return error_;
}
inline ::b_error::info* allow_friend_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.allow_friend_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void allow_friend_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.allow_friend_rs.error)
}

// required uint64 user_allow_id = 2;
inline bool allow_friend_rs::has_user_allow_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void allow_friend_rs::set_has_user_allow_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void allow_friend_rs::clear_has_user_allow_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void allow_friend_rs::clear_user_allow_id() {
  user_allow_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_allow_id();
}
inline ::google::protobuf::uint64 allow_friend_rs::user_allow_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rs.user_allow_id)
  return user_allow_id_;
}
inline void allow_friend_rs::set_user_allow_id(::google::protobuf::uint64 value) {
  set_has_user_allow_id();
  user_allow_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rs.user_allow_id)
}

// required uint32 opcode = 3;
inline bool allow_friend_rs::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void allow_friend_rs::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void allow_friend_rs::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void allow_friend_rs::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
inline ::google::protobuf::uint32 allow_friend_rs::opcode() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rs.opcode)
  return opcode_;
}
inline void allow_friend_rs::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rs.opcode)
}

// repeated .b_business_relation.user_relation relation_s = 4;
inline int allow_friend_rs::relation_s_size() const {
  return relation_s_.size();
}
inline void allow_friend_rs::clear_relation_s() {
  relation_s_.Clear();
}
inline const ::b_business_relation::user_relation& allow_friend_rs::relation_s(int index) const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rs.relation_s)
  return relation_s_.Get(index);
}
inline ::b_business_relation::user_relation* allow_friend_rs::mutable_relation_s(int index) {
  // @@protoc_insertion_point(field_mutable:c_business_relation.allow_friend_rs.relation_s)
  return relation_s_.Mutable(index);
}
inline ::b_business_relation::user_relation* allow_friend_rs::add_relation_s() {
  // @@protoc_insertion_point(field_add:c_business_relation.allow_friend_rs.relation_s)
  return relation_s_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >*
allow_friend_rs::mutable_relation_s() {
  // @@protoc_insertion_point(field_mutable_list:c_business_relation.allow_friend_rs.relation_s)
  return &relation_s_;
}
inline const ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >&
allow_friend_rs::relation_s() const {
  // @@protoc_insertion_point(field_list:c_business_relation.allow_friend_rs.relation_s)
  return relation_s_;
}

// -------------------------------------------------------------------

// allow_friend_nt

// required .b_business_account.user_info apply_user_info = 1;
inline bool allow_friend_nt::has_apply_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void allow_friend_nt::set_has_apply_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void allow_friend_nt::clear_has_apply_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void allow_friend_nt::clear_apply_user_info() {
  if (apply_user_info_ != NULL) apply_user_info_->::b_business_account::user_info::Clear();
  clear_has_apply_user_info();
}
inline const ::b_business_account::user_info& allow_friend_nt::apply_user_info() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_nt.apply_user_info)
  return apply_user_info_ != NULL ? *apply_user_info_
                         : *::b_business_account::user_info::internal_default_instance();
}
inline ::b_business_account::user_info* allow_friend_nt::mutable_apply_user_info() {
  set_has_apply_user_info();
  if (apply_user_info_ == NULL) {
    apply_user_info_ = new ::b_business_account::user_info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.allow_friend_nt.apply_user_info)
  return apply_user_info_;
}
inline ::b_business_account::user_info* allow_friend_nt::release_apply_user_info() {
  // @@protoc_insertion_point(field_release:c_business_relation.allow_friend_nt.apply_user_info)
  clear_has_apply_user_info();
  ::b_business_account::user_info* temp = apply_user_info_;
  apply_user_info_ = NULL;
  return temp;
}
inline void allow_friend_nt::set_allocated_apply_user_info(::b_business_account::user_info* apply_user_info) {
  delete apply_user_info_;
  apply_user_info_ = apply_user_info;
  if (apply_user_info) {
    set_has_apply_user_info();
  } else {
    clear_has_apply_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.allow_friend_nt.apply_user_info)
}

// required uint32 opcode = 2;
inline bool allow_friend_nt::has_opcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void allow_friend_nt::set_has_opcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void allow_friend_nt::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void allow_friend_nt::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
inline ::google::protobuf::uint32 allow_friend_nt::opcode() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_nt.opcode)
  return opcode_;
}
inline void allow_friend_nt::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_nt.opcode)
}

// repeated .b_business_relation.user_relation relation_s = 3;
inline int allow_friend_nt::relation_s_size() const {
  return relation_s_.size();
}
inline void allow_friend_nt::clear_relation_s() {
  relation_s_.Clear();
}
inline const ::b_business_relation::user_relation& allow_friend_nt::relation_s(int index) const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_nt.relation_s)
  return relation_s_.Get(index);
}
inline ::b_business_relation::user_relation* allow_friend_nt::mutable_relation_s(int index) {
  // @@protoc_insertion_point(field_mutable:c_business_relation.allow_friend_nt.relation_s)
  return relation_s_.Mutable(index);
}
inline ::b_business_relation::user_relation* allow_friend_nt::add_relation_s() {
  // @@protoc_insertion_point(field_add:c_business_relation.allow_friend_nt.relation_s)
  return relation_s_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >*
allow_friend_nt::mutable_relation_s() {
  // @@protoc_insertion_point(field_mutable_list:c_business_relation.allow_friend_nt.relation_s)
  return &relation_s_;
}
inline const ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >&
allow_friend_nt::relation_s() const {
  // @@protoc_insertion_point(field_list:c_business_relation.allow_friend_nt.relation_s)
  return relation_s_;
}

// -------------------------------------------------------------------

// query_friends_rq

// required uint64 user_myself_id = 1;
inline bool query_friends_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_friends_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_friends_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_friends_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 query_friends_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_rq.user_myself_id)
  return user_myself_id_;
}
inline void query_friends_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.query_friends_rq.user_myself_id)
}

// -------------------------------------------------------------------

// query_friends_rs

// required .b_error.info error = 1;
inline bool query_friends_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_friends_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_friends_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_friends_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& query_friends_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* query_friends_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.query_friends_rs.error)
  return error_;
}
inline ::b_error::info* query_friends_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.query_friends_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void query_friends_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.query_friends_rs.error)
}

// repeated .b_business_relation.user_relation_group group_s = 2;
inline int query_friends_rs::group_s_size() const {
  return group_s_.size();
}
inline void query_friends_rs::clear_group_s() {
  group_s_.Clear();
}
inline const ::b_business_relation::user_relation_group& query_friends_rs::group_s(int index) const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_rs.group_s)
  return group_s_.Get(index);
}
inline ::b_business_relation::user_relation_group* query_friends_rs::mutable_group_s(int index) {
  // @@protoc_insertion_point(field_mutable:c_business_relation.query_friends_rs.group_s)
  return group_s_.Mutable(index);
}
inline ::b_business_relation::user_relation_group* query_friends_rs::add_group_s() {
  // @@protoc_insertion_point(field_add:c_business_relation.query_friends_rs.group_s)
  return group_s_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation_group >*
query_friends_rs::mutable_group_s() {
  // @@protoc_insertion_point(field_mutable_list:c_business_relation.query_friends_rs.group_s)
  return &group_s_;
}
inline const ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation_group >&
query_friends_rs::group_s() const {
  // @@protoc_insertion_point(field_list:c_business_relation.query_friends_rs.group_s)
  return group_s_;
}

// repeated .b_business_relation.user_relation relation_s = 3;
inline int query_friends_rs::relation_s_size() const {
  return relation_s_.size();
}
inline void query_friends_rs::clear_relation_s() {
  relation_s_.Clear();
}
inline const ::b_business_relation::user_relation& query_friends_rs::relation_s(int index) const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_rs.relation_s)
  return relation_s_.Get(index);
}
inline ::b_business_relation::user_relation* query_friends_rs::mutable_relation_s(int index) {
  // @@protoc_insertion_point(field_mutable:c_business_relation.query_friends_rs.relation_s)
  return relation_s_.Mutable(index);
}
inline ::b_business_relation::user_relation* query_friends_rs::add_relation_s() {
  // @@protoc_insertion_point(field_add:c_business_relation.query_friends_rs.relation_s)
  return relation_s_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >*
query_friends_rs::mutable_relation_s() {
  // @@protoc_insertion_point(field_mutable_list:c_business_relation.query_friends_rs.relation_s)
  return &relation_s_;
}
inline const ::google::protobuf::RepeatedPtrField< ::b_business_relation::user_relation >&
query_friends_rs::relation_s() const {
  // @@protoc_insertion_point(field_list:c_business_relation.query_friends_rs.relation_s)
  return relation_s_;
}

// -------------------------------------------------------------------

// rename_friend_remark_rq

// required uint64 user_myself_id = 1;
inline bool rename_friend_remark_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rename_friend_remark_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rename_friend_remark_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rename_friend_remark_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 rename_friend_remark_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rq.user_myself_id)
  return user_myself_id_;
}
inline void rename_friend_remark_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rq.user_myself_id)
}

// required uint64 user_friend_id = 2;
inline bool rename_friend_remark_rq::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rename_friend_remark_rq::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rename_friend_remark_rq::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rename_friend_remark_rq::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
inline ::google::protobuf::uint64 rename_friend_remark_rq::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rq.user_friend_id)
  return user_friend_id_;
}
inline void rename_friend_remark_rq::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rq.user_friend_id)
}

// required string user_friend_remark = 3;
inline bool rename_friend_remark_rq::has_user_friend_remark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rename_friend_remark_rq::set_has_user_friend_remark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rename_friend_remark_rq::clear_has_user_friend_remark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rename_friend_remark_rq::clear_user_friend_remark() {
  user_friend_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_remark();
}
inline const ::std::string& rename_friend_remark_rq::user_friend_remark() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rq.user_friend_remark)
  return user_friend_remark_.GetNoArena();
}
inline void rename_friend_remark_rq::set_user_friend_remark(const ::std::string& value) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}
#if LANG_CXX11
inline void rename_friend_remark_rq::set_user_friend_remark(::std::string&& value) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}
#endif
inline void rename_friend_remark_rq::set_user_friend_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}
inline void rename_friend_remark_rq::set_user_friend_remark(const char* value, size_t size) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}
inline ::std::string* rename_friend_remark_rq::mutable_user_friend_remark() {
  set_has_user_friend_remark();
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_remark_rq.user_friend_remark)
  return user_friend_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rename_friend_remark_rq::release_user_friend_remark() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_remark_rq.user_friend_remark)
  clear_has_user_friend_remark();
  return user_friend_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rename_friend_remark_rq::set_allocated_user_friend_remark(::std::string* user_friend_remark) {
  if (user_friend_remark != NULL) {
    set_has_user_friend_remark();
  } else {
    clear_has_user_friend_remark();
  }
  user_friend_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_remark);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}

// -------------------------------------------------------------------

// rename_friend_remark_rs

// required .b_error.info error = 1;
inline bool rename_friend_remark_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rename_friend_remark_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rename_friend_remark_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rename_friend_remark_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& rename_friend_remark_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* rename_friend_remark_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_remark_rs.error)
  return error_;
}
inline ::b_error::info* rename_friend_remark_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_remark_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void rename_friend_remark_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_remark_rs.error)
}

// required uint64 user_friend_id = 2;
inline bool rename_friend_remark_rs::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rename_friend_remark_rs::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rename_friend_remark_rs::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rename_friend_remark_rs::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
inline ::google::protobuf::uint64 rename_friend_remark_rs::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rs.user_friend_id)
  return user_friend_id_;
}
inline void rename_friend_remark_rs::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rs.user_friend_id)
}

// required string user_friend_remark = 3;
inline bool rename_friend_remark_rs::has_user_friend_remark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rename_friend_remark_rs::set_has_user_friend_remark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rename_friend_remark_rs::clear_has_user_friend_remark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rename_friend_remark_rs::clear_user_friend_remark() {
  user_friend_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_remark();
}
inline const ::std::string& rename_friend_remark_rs::user_friend_remark() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rs.user_friend_remark)
  return user_friend_remark_.GetNoArena();
}
inline void rename_friend_remark_rs::set_user_friend_remark(const ::std::string& value) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}
#if LANG_CXX11
inline void rename_friend_remark_rs::set_user_friend_remark(::std::string&& value) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}
#endif
inline void rename_friend_remark_rs::set_user_friend_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}
inline void rename_friend_remark_rs::set_user_friend_remark(const char* value, size_t size) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}
inline ::std::string* rename_friend_remark_rs::mutable_user_friend_remark() {
  set_has_user_friend_remark();
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_remark_rs.user_friend_remark)
  return user_friend_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rename_friend_remark_rs::release_user_friend_remark() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_remark_rs.user_friend_remark)
  clear_has_user_friend_remark();
  return user_friend_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rename_friend_remark_rs::set_allocated_user_friend_remark(::std::string* user_friend_remark) {
  if (user_friend_remark != NULL) {
    set_has_user_friend_remark();
  } else {
    clear_has_user_friend_remark();
  }
  user_friend_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_remark);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}

// -------------------------------------------------------------------

// add_friend_group_rq

// required uint64 user_myself_id = 1;
inline bool add_friend_group_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add_friend_group_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add_friend_group_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add_friend_group_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 add_friend_group_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_group_rq.user_myself_id)
  return user_myself_id_;
}
inline void add_friend_group_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_group_rq.user_myself_id)
}

// required string user_friend_group = 2;
inline bool add_friend_group_rq::has_user_friend_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_friend_group_rq::set_has_user_friend_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_friend_group_rq::clear_has_user_friend_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_friend_group_rq::clear_user_friend_group() {
  user_friend_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_group();
}
inline const ::std::string& add_friend_group_rq::user_friend_group() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_group_rq.user_friend_group)
  return user_friend_group_.GetNoArena();
}
inline void add_friend_group_rq::set_user_friend_group(const ::std::string& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_group_rq.user_friend_group)
}
#if LANG_CXX11
inline void add_friend_group_rq::set_user_friend_group(::std::string&& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.add_friend_group_rq.user_friend_group)
}
#endif
inline void add_friend_group_rq::set_user_friend_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.add_friend_group_rq.user_friend_group)
}
inline void add_friend_group_rq::set_user_friend_group(const char* value, size_t size) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.add_friend_group_rq.user_friend_group)
}
inline ::std::string* add_friend_group_rq::mutable_user_friend_group() {
  set_has_user_friend_group();
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_group_rq.user_friend_group)
  return user_friend_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* add_friend_group_rq::release_user_friend_group() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_group_rq.user_friend_group)
  clear_has_user_friend_group();
  return user_friend_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void add_friend_group_rq::set_allocated_user_friend_group(::std::string* user_friend_group) {
  if (user_friend_group != NULL) {
    set_has_user_friend_group();
  } else {
    clear_has_user_friend_group();
  }
  user_friend_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_group);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_group_rq.user_friend_group)
}

// -------------------------------------------------------------------

// add_friend_group_rs

// required .b_error.info error = 1;
inline bool add_friend_group_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void add_friend_group_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void add_friend_group_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void add_friend_group_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& add_friend_group_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_group_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* add_friend_group_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_group_rs.error)
  return error_;
}
inline ::b_error::info* add_friend_group_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_group_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void add_friend_group_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_group_rs.error)
}

// required string user_friend_group = 2;
inline bool add_friend_group_rs::has_user_friend_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_friend_group_rs::set_has_user_friend_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_friend_group_rs::clear_has_user_friend_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_friend_group_rs::clear_user_friend_group() {
  user_friend_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_group();
}
inline const ::std::string& add_friend_group_rs::user_friend_group() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_group_rs.user_friend_group)
  return user_friend_group_.GetNoArena();
}
inline void add_friend_group_rs::set_user_friend_group(const ::std::string& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_group_rs.user_friend_group)
}
#if LANG_CXX11
inline void add_friend_group_rs::set_user_friend_group(::std::string&& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.add_friend_group_rs.user_friend_group)
}
#endif
inline void add_friend_group_rs::set_user_friend_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.add_friend_group_rs.user_friend_group)
}
inline void add_friend_group_rs::set_user_friend_group(const char* value, size_t size) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.add_friend_group_rs.user_friend_group)
}
inline ::std::string* add_friend_group_rs::mutable_user_friend_group() {
  set_has_user_friend_group();
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_group_rs.user_friend_group)
  return user_friend_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* add_friend_group_rs::release_user_friend_group() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_group_rs.user_friend_group)
  clear_has_user_friend_group();
  return user_friend_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void add_friend_group_rs::set_allocated_user_friend_group(::std::string* user_friend_group) {
  if (user_friend_group != NULL) {
    set_has_user_friend_group();
  } else {
    clear_has_user_friend_group();
  }
  user_friend_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_group);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_group_rs.user_friend_group)
}

// required uint64 user_friend_group_id = 3;
inline bool add_friend_group_rs::has_user_friend_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void add_friend_group_rs::set_has_user_friend_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void add_friend_group_rs::clear_has_user_friend_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void add_friend_group_rs::clear_user_friend_group_id() {
  user_friend_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id();
}
inline ::google::protobuf::uint64 add_friend_group_rs::user_friend_group_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_group_rs.user_friend_group_id)
  return user_friend_group_id_;
}
inline void add_friend_group_rs::set_user_friend_group_id(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id();
  user_friend_group_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_group_rs.user_friend_group_id)
}

// -------------------------------------------------------------------

// delete_friend_group_rq

// required uint64 user_myself_id = 1;
inline bool delete_friend_group_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delete_friend_group_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delete_friend_group_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delete_friend_group_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 delete_friend_group_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_group_rq.user_myself_id)
  return user_myself_id_;
}
inline void delete_friend_group_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_group_rq.user_myself_id)
}

// required uint64 user_friend_id = 2;
inline bool delete_friend_group_rq::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void delete_friend_group_rq::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void delete_friend_group_rq::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void delete_friend_group_rq::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
inline ::google::protobuf::uint64 delete_friend_group_rq::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_group_rq.user_friend_id)
  return user_friend_id_;
}
inline void delete_friend_group_rq::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_group_rq.user_friend_id)
}

// required uint64 user_friend_group_id = 3;
inline bool delete_friend_group_rq::has_user_friend_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void delete_friend_group_rq::set_has_user_friend_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void delete_friend_group_rq::clear_has_user_friend_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void delete_friend_group_rq::clear_user_friend_group_id() {
  user_friend_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id();
}
inline ::google::protobuf::uint64 delete_friend_group_rq::user_friend_group_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_group_rq.user_friend_group_id)
  return user_friend_group_id_;
}
inline void delete_friend_group_rq::set_user_friend_group_id(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id();
  user_friend_group_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_group_rq.user_friend_group_id)
}

// -------------------------------------------------------------------

// delete_friend_group_rs

// required .b_error.info error = 1;
inline bool delete_friend_group_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delete_friend_group_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delete_friend_group_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delete_friend_group_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& delete_friend_group_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_group_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* delete_friend_group_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.delete_friend_group_rs.error)
  return error_;
}
inline ::b_error::info* delete_friend_group_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.delete_friend_group_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void delete_friend_group_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.delete_friend_group_rs.error)
}

// required uint64 user_friend_id = 2;
inline bool delete_friend_group_rs::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void delete_friend_group_rs::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void delete_friend_group_rs::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void delete_friend_group_rs::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
inline ::google::protobuf::uint64 delete_friend_group_rs::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_group_rs.user_friend_id)
  return user_friend_id_;
}
inline void delete_friend_group_rs::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_group_rs.user_friend_id)
}

// required uint64 user_friend_group_id = 3;
inline bool delete_friend_group_rs::has_user_friend_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void delete_friend_group_rs::set_has_user_friend_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void delete_friend_group_rs::clear_has_user_friend_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void delete_friend_group_rs::clear_user_friend_group_id() {
  user_friend_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id();
}
inline ::google::protobuf::uint64 delete_friend_group_rs::user_friend_group_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_group_rs.user_friend_group_id)
  return user_friend_group_id_;
}
inline void delete_friend_group_rs::set_user_friend_group_id(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id();
  user_friend_group_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_group_rs.user_friend_group_id)
}

// -------------------------------------------------------------------

// rename_friend_group_rq

// required uint64 user_myself_id = 1;
inline bool rename_friend_group_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rename_friend_group_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rename_friend_group_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rename_friend_group_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 rename_friend_group_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rq.user_myself_id)
  return user_myself_id_;
}
inline void rename_friend_group_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rq.user_myself_id)
}

// required uint64 user_friend_group_id = 3;
inline bool rename_friend_group_rq::has_user_friend_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rename_friend_group_rq::set_has_user_friend_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rename_friend_group_rq::clear_has_user_friend_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rename_friend_group_rq::clear_user_friend_group_id() {
  user_friend_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id();
}
inline ::google::protobuf::uint64 rename_friend_group_rq::user_friend_group_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rq.user_friend_group_id)
  return user_friend_group_id_;
}
inline void rename_friend_group_rq::set_user_friend_group_id(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id();
  user_friend_group_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rq.user_friend_group_id)
}

// required string user_friend_group = 4;
inline bool rename_friend_group_rq::has_user_friend_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rename_friend_group_rq::set_has_user_friend_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rename_friend_group_rq::clear_has_user_friend_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rename_friend_group_rq::clear_user_friend_group() {
  user_friend_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_group();
}
inline const ::std::string& rename_friend_group_rq::user_friend_group() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rq.user_friend_group)
  return user_friend_group_.GetNoArena();
}
inline void rename_friend_group_rq::set_user_friend_group(const ::std::string& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rq.user_friend_group)
}
#if LANG_CXX11
inline void rename_friend_group_rq::set_user_friend_group(::std::string&& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.rename_friend_group_rq.user_friend_group)
}
#endif
inline void rename_friend_group_rq::set_user_friend_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.rename_friend_group_rq.user_friend_group)
}
inline void rename_friend_group_rq::set_user_friend_group(const char* value, size_t size) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.rename_friend_group_rq.user_friend_group)
}
inline ::std::string* rename_friend_group_rq::mutable_user_friend_group() {
  set_has_user_friend_group();
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_group_rq.user_friend_group)
  return user_friend_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rename_friend_group_rq::release_user_friend_group() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_group_rq.user_friend_group)
  clear_has_user_friend_group();
  return user_friend_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rename_friend_group_rq::set_allocated_user_friend_group(::std::string* user_friend_group) {
  if (user_friend_group != NULL) {
    set_has_user_friend_group();
  } else {
    clear_has_user_friend_group();
  }
  user_friend_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_group);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_group_rq.user_friend_group)
}

// -------------------------------------------------------------------

// rename_friend_group_rs

// required .b_error.info error = 1;
inline bool rename_friend_group_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rename_friend_group_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rename_friend_group_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rename_friend_group_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& rename_friend_group_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* rename_friend_group_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_group_rs.error)
  return error_;
}
inline ::b_error::info* rename_friend_group_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_group_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void rename_friend_group_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_group_rs.error)
}

// required uint64 user_friend_group_id = 3;
inline bool rename_friend_group_rs::has_user_friend_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rename_friend_group_rs::set_has_user_friend_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rename_friend_group_rs::clear_has_user_friend_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rename_friend_group_rs::clear_user_friend_group_id() {
  user_friend_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id();
}
inline ::google::protobuf::uint64 rename_friend_group_rs::user_friend_group_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rs.user_friend_group_id)
  return user_friend_group_id_;
}
inline void rename_friend_group_rs::set_user_friend_group_id(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id();
  user_friend_group_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rs.user_friend_group_id)
}

// required string user_friend_group = 4;
inline bool rename_friend_group_rs::has_user_friend_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rename_friend_group_rs::set_has_user_friend_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rename_friend_group_rs::clear_has_user_friend_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rename_friend_group_rs::clear_user_friend_group() {
  user_friend_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_group();
}
inline const ::std::string& rename_friend_group_rs::user_friend_group() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rs.user_friend_group)
  return user_friend_group_.GetNoArena();
}
inline void rename_friend_group_rs::set_user_friend_group(const ::std::string& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rs.user_friend_group)
}
#if LANG_CXX11
inline void rename_friend_group_rs::set_user_friend_group(::std::string&& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.rename_friend_group_rs.user_friend_group)
}
#endif
inline void rename_friend_group_rs::set_user_friend_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.rename_friend_group_rs.user_friend_group)
}
inline void rename_friend_group_rs::set_user_friend_group(const char* value, size_t size) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.rename_friend_group_rs.user_friend_group)
}
inline ::std::string* rename_friend_group_rs::mutable_user_friend_group() {
  set_has_user_friend_group();
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_group_rs.user_friend_group)
  return user_friend_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rename_friend_group_rs::release_user_friend_group() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_group_rs.user_friend_group)
  clear_has_user_friend_group();
  return user_friend_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rename_friend_group_rs::set_allocated_user_friend_group(::std::string* user_friend_group) {
  if (user_friend_group != NULL) {
    set_has_user_friend_group();
  } else {
    clear_has_user_friend_group();
  }
  user_friend_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_group);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_group_rs.user_friend_group)
}

// -------------------------------------------------------------------

// change_friend_group_rq

// required uint64 user_myself_id = 1;
inline bool change_friend_group_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_friend_group_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_friend_group_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_friend_group_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 change_friend_group_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.change_friend_group_rq.user_myself_id)
  return user_myself_id_;
}
inline void change_friend_group_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.change_friend_group_rq.user_myself_id)
}

// required uint64 user_friend_id = 2;
inline bool change_friend_group_rq::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_friend_group_rq::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_friend_group_rq::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_friend_group_rq::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
inline ::google::protobuf::uint64 change_friend_group_rq::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.change_friend_group_rq.user_friend_id)
  return user_friend_id_;
}
inline void change_friend_group_rq::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.change_friend_group_rq.user_friend_id)
}

// required uint64 user_friend_group_id_old = 3;
inline bool change_friend_group_rq::has_user_friend_group_id_old() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void change_friend_group_rq::set_has_user_friend_group_id_old() {
  _has_bits_[0] |= 0x00000004u;
}
inline void change_friend_group_rq::clear_has_user_friend_group_id_old() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void change_friend_group_rq::clear_user_friend_group_id_old() {
  user_friend_group_id_old_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id_old();
}
inline ::google::protobuf::uint64 change_friend_group_rq::user_friend_group_id_old() const {
  // @@protoc_insertion_point(field_get:c_business_relation.change_friend_group_rq.user_friend_group_id_old)
  return user_friend_group_id_old_;
}
inline void change_friend_group_rq::set_user_friend_group_id_old(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id_old();
  user_friend_group_id_old_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.change_friend_group_rq.user_friend_group_id_old)
}

// required uint64 user_friend_group_id_new = 4;
inline bool change_friend_group_rq::has_user_friend_group_id_new() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void change_friend_group_rq::set_has_user_friend_group_id_new() {
  _has_bits_[0] |= 0x00000008u;
}
inline void change_friend_group_rq::clear_has_user_friend_group_id_new() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void change_friend_group_rq::clear_user_friend_group_id_new() {
  user_friend_group_id_new_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id_new();
}
inline ::google::protobuf::uint64 change_friend_group_rq::user_friend_group_id_new() const {
  // @@protoc_insertion_point(field_get:c_business_relation.change_friend_group_rq.user_friend_group_id_new)
  return user_friend_group_id_new_;
}
inline void change_friend_group_rq::set_user_friend_group_id_new(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id_new();
  user_friend_group_id_new_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.change_friend_group_rq.user_friend_group_id_new)
}

// -------------------------------------------------------------------

// change_friend_group_rs

// required .b_error.info error = 1;
inline bool change_friend_group_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void change_friend_group_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void change_friend_group_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void change_friend_group_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& change_friend_group_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.change_friend_group_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* change_friend_group_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.change_friend_group_rs.error)
  return error_;
}
inline ::b_error::info* change_friend_group_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.change_friend_group_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void change_friend_group_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.change_friend_group_rs.error)
}

// required uint64 user_friend_id = 2;
inline bool change_friend_group_rs::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void change_friend_group_rs::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void change_friend_group_rs::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void change_friend_group_rs::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
inline ::google::protobuf::uint64 change_friend_group_rs::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.change_friend_group_rs.user_friend_id)
  return user_friend_id_;
}
inline void change_friend_group_rs::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.change_friend_group_rs.user_friend_id)
}

// required uint64 user_friend_group_id_old = 3;
inline bool change_friend_group_rs::has_user_friend_group_id_old() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void change_friend_group_rs::set_has_user_friend_group_id_old() {
  _has_bits_[0] |= 0x00000004u;
}
inline void change_friend_group_rs::clear_has_user_friend_group_id_old() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void change_friend_group_rs::clear_user_friend_group_id_old() {
  user_friend_group_id_old_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id_old();
}
inline ::google::protobuf::uint64 change_friend_group_rs::user_friend_group_id_old() const {
  // @@protoc_insertion_point(field_get:c_business_relation.change_friend_group_rs.user_friend_group_id_old)
  return user_friend_group_id_old_;
}
inline void change_friend_group_rs::set_user_friend_group_id_old(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id_old();
  user_friend_group_id_old_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.change_friend_group_rs.user_friend_group_id_old)
}

// required uint64 user_friend_group_id_new = 4;
inline bool change_friend_group_rs::has_user_friend_group_id_new() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void change_friend_group_rs::set_has_user_friend_group_id_new() {
  _has_bits_[0] |= 0x00000008u;
}
inline void change_friend_group_rs::clear_has_user_friend_group_id_new() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void change_friend_group_rs::clear_user_friend_group_id_new() {
  user_friend_group_id_new_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_group_id_new();
}
inline ::google::protobuf::uint64 change_friend_group_rs::user_friend_group_id_new() const {
  // @@protoc_insertion_point(field_get:c_business_relation.change_friend_group_rs.user_friend_group_id_new)
  return user_friend_group_id_new_;
}
inline void change_friend_group_rs::set_user_friend_group_id_new(::google::protobuf::uint64 value) {
  set_has_user_friend_group_id_new();
  user_friend_group_id_new_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.change_friend_group_rs.user_friend_group_id_new)
}

// -------------------------------------------------------------------

// query_friends_apply_rq

// required uint64 user_myself_id = 1;
inline bool query_friends_apply_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_friends_apply_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_friends_apply_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_friends_apply_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 query_friends_apply_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_apply_rq.user_myself_id)
  return user_myself_id_;
}
inline void query_friends_apply_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.query_friends_apply_rq.user_myself_id)
}

// -------------------------------------------------------------------

// query_friends_apply_rs

// required .b_error.info error = 1;
inline bool query_friends_apply_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_friends_apply_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_friends_apply_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_friends_apply_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& query_friends_apply_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_apply_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* query_friends_apply_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.query_friends_apply_rs.error)
  return error_;
}
inline ::b_error::info* query_friends_apply_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.query_friends_apply_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void query_friends_apply_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.query_friends_apply_rs.error)
}

// repeated .b_business_relation.friend_apply apply_s = 2;
inline int query_friends_apply_rs::apply_s_size() const {
  return apply_s_.size();
}
inline void query_friends_apply_rs::clear_apply_s() {
  apply_s_.Clear();
}
inline const ::b_business_relation::friend_apply& query_friends_apply_rs::apply_s(int index) const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_apply_rs.apply_s)
  return apply_s_.Get(index);
}
inline ::b_business_relation::friend_apply* query_friends_apply_rs::mutable_apply_s(int index) {
  // @@protoc_insertion_point(field_mutable:c_business_relation.query_friends_apply_rs.apply_s)
  return apply_s_.Mutable(index);
}
inline ::b_business_relation::friend_apply* query_friends_apply_rs::add_apply_s() {
  // @@protoc_insertion_point(field_add:c_business_relation.query_friends_apply_rs.apply_s)
  return apply_s_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::b_business_relation::friend_apply >*
query_friends_apply_rs::mutable_apply_s() {
  // @@protoc_insertion_point(field_mutable_list:c_business_relation.query_friends_apply_rs.apply_s)
  return &apply_s_;
}
inline const ::google::protobuf::RepeatedPtrField< ::b_business_relation::friend_apply >&
query_friends_apply_rs::apply_s() const {
  // @@protoc_insertion_point(field_list:c_business_relation.query_friends_apply_rs.apply_s)
  return apply_s_;
}

// -------------------------------------------------------------------

// talk_friend_rq

// required uint64 user_myself_id = 1;
inline bool talk_friend_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talk_friend_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talk_friend_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talk_friend_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
inline ::google::protobuf::uint64 talk_friend_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rq.user_myself_id)
  return user_myself_id_;
}
inline void talk_friend_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_rq.user_myself_id)
}

// required uint64 user_talk_id = 2;
inline bool talk_friend_rq::has_user_talk_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talk_friend_rq::set_has_user_talk_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talk_friend_rq::clear_has_user_talk_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talk_friend_rq::clear_user_talk_id() {
  user_talk_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_talk_id();
}
inline ::google::protobuf::uint64 talk_friend_rq::user_talk_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rq.user_talk_id)
  return user_talk_id_;
}
inline void talk_friend_rq::set_user_talk_id(::google::protobuf::uint64 value) {
  set_has_user_talk_id();
  user_talk_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_rq.user_talk_id)
}

// required string talking = 3;
inline bool talk_friend_rq::has_talking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talk_friend_rq::set_has_talking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talk_friend_rq::clear_has_talking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talk_friend_rq::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
inline const ::std::string& talk_friend_rq::talking() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rq.talking)
  return talking_.GetNoArena();
}
inline void talk_friend_rq::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_rq.talking)
}
#if LANG_CXX11
inline void talk_friend_rq::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.talk_friend_rq.talking)
}
#endif
inline void talk_friend_rq::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.talk_friend_rq.talking)
}
inline void talk_friend_rq::set_talking(const char* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.talk_friend_rq.talking)
}
inline ::std::string* talk_friend_rq::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_business_relation.talk_friend_rq.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* talk_friend_rq::release_talking() {
  // @@protoc_insertion_point(field_release:c_business_relation.talk_friend_rq.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void talk_friend_rq::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.talk_friend_rq.talking)
}

// -------------------------------------------------------------------

// talk_friend_rs

// required .b_error.info error = 1;
inline bool talk_friend_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talk_friend_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talk_friend_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talk_friend_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& talk_friend_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* talk_friend_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.talk_friend_rs.error)
  return error_;
}
inline ::b_error::info* talk_friend_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.talk_friend_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void talk_friend_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.talk_friend_rs.error)
}

// required uint64 user_talk_id = 2;
inline bool talk_friend_rs::has_user_talk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talk_friend_rs::set_has_user_talk_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talk_friend_rs::clear_has_user_talk_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talk_friend_rs::clear_user_talk_id() {
  user_talk_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_talk_id();
}
inline ::google::protobuf::uint64 talk_friend_rs::user_talk_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rs.user_talk_id)
  return user_talk_id_;
}
inline void talk_friend_rs::set_user_talk_id(::google::protobuf::uint64 value) {
  set_has_user_talk_id();
  user_talk_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_rs.user_talk_id)
}

// -------------------------------------------------------------------

// talk_friend_nt

// required uint64 apply_talk_id = 1;
inline bool talk_friend_nt::has_apply_talk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talk_friend_nt::set_has_apply_talk_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talk_friend_nt::clear_has_apply_talk_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talk_friend_nt::clear_apply_talk_id() {
  apply_talk_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_talk_id();
}
inline ::google::protobuf::uint64 talk_friend_nt::apply_talk_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_nt.apply_talk_id)
  return apply_talk_id_;
}
inline void talk_friend_nt::set_apply_talk_id(::google::protobuf::uint64 value) {
  set_has_apply_talk_id();
  apply_talk_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_nt.apply_talk_id)
}

// required string talking = 2;
inline bool talk_friend_nt::has_talking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talk_friend_nt::set_has_talking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talk_friend_nt::clear_has_talking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talk_friend_nt::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
inline const ::std::string& talk_friend_nt::talking() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_nt.talking)
  return talking_.GetNoArena();
}
inline void talk_friend_nt::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_nt.talking)
}
#if LANG_CXX11
inline void talk_friend_nt::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.talk_friend_nt.talking)
}
#endif
inline void talk_friend_nt::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.talk_friend_nt.talking)
}
inline void talk_friend_nt::set_talking(const char* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.talk_friend_nt.talking)
}
inline ::std::string* talk_friend_nt::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_business_relation.talk_friend_nt.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* talk_friend_nt::release_talking() {
  // @@protoc_insertion_point(field_release:c_business_relation.talk_friend_nt.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void talk_friend_nt::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.talk_friend_nt.talking)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace c_business_relation

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::c_business_relation::add_friend_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::add_friend_rq_msg>() {
  return ::c_business_relation::add_friend_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::add_friend_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::add_friend_rs_msg>() {
  return ::c_business_relation::add_friend_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::add_friend_nt_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::add_friend_nt_msg>() {
  return ::c_business_relation::add_friend_nt_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::delete_friend_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::delete_friend_rq_msg>() {
  return ::c_business_relation::delete_friend_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::delete_friend_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::delete_friend_rs_msg>() {
  return ::c_business_relation::delete_friend_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::delete_friend_nt_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::delete_friend_nt_msg>() {
  return ::c_business_relation::delete_friend_nt_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::allow_friend_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::allow_friend_rq_msg>() {
  return ::c_business_relation::allow_friend_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::allow_friend_rq_opcode_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::allow_friend_rq_opcode_t>() {
  return ::c_business_relation::allow_friend_rq_opcode_t_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::allow_friend_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::allow_friend_rs_msg>() {
  return ::c_business_relation::allow_friend_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::allow_friend_nt_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::allow_friend_nt_msg>() {
  return ::c_business_relation::allow_friend_nt_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::query_friends_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::query_friends_rq_msg>() {
  return ::c_business_relation::query_friends_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::query_friends_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::query_friends_rs_msg>() {
  return ::c_business_relation::query_friends_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::rename_friend_remark_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::rename_friend_remark_rq_msg>() {
  return ::c_business_relation::rename_friend_remark_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::rename_friend_remark_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::rename_friend_remark_rs_msg>() {
  return ::c_business_relation::rename_friend_remark_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::add_friend_group_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::add_friend_group_rq_msg>() {
  return ::c_business_relation::add_friend_group_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::add_friend_group_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::add_friend_group_rs_msg>() {
  return ::c_business_relation::add_friend_group_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::delete_friend_group_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::delete_friend_group_rq_msg>() {
  return ::c_business_relation::delete_friend_group_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::delete_friend_group_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::delete_friend_group_rs_msg>() {
  return ::c_business_relation::delete_friend_group_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::rename_friend_group_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::rename_friend_group_rq_msg>() {
  return ::c_business_relation::rename_friend_group_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::rename_friend_group_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::rename_friend_group_rs_msg>() {
  return ::c_business_relation::rename_friend_group_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::change_friend_group_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::change_friend_group_rq_msg>() {
  return ::c_business_relation::change_friend_group_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::change_friend_group_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::change_friend_group_rs_msg>() {
  return ::c_business_relation::change_friend_group_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::query_friends_apply_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::query_friends_apply_rq_msg>() {
  return ::c_business_relation::query_friends_apply_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::query_friends_apply_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::query_friends_apply_rs_msg>() {
  return ::c_business_relation::query_friends_apply_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::talk_friend_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::talk_friend_rq_msg>() {
  return ::c_business_relation::talk_friend_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::talk_friend_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::talk_friend_rs_msg>() {
  return ::c_business_relation::talk_friend_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::talk_friend_nt_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::talk_friend_nt_msg>() {
  return ::c_business_relation::talk_friend_nt_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_relation::msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_relation::msg>() {
  return ::c_business_relation::msg_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_c_5fbusiness_5frelation_2eproto__INCLUDED
