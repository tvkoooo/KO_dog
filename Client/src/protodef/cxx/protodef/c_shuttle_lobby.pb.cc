// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_shuttle_lobby.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "c_shuttle_lobby.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace c_shuttle_lobby {
class exchange_key_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<exchange_key_rq> {
} _exchange_key_rq_default_instance_;
class exchange_key_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<exchange_key_rs> {
} _exchange_key_rs_default_instance_;
class token_verify_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<token_verify_rq> {
} _token_verify_rq_default_instance_;
class token_verify_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<token_verify_rs> {
} _token_verify_rs_default_instance_;
class heartbeat_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<heartbeat_rq> {
} _heartbeat_rq_default_instance_;
class heartbeat_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<heartbeat_rs> {
} _heartbeat_rs_default_instance_;

namespace protobuf_c_5fshuttle_5flobby_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rq, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rq, e_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rq, version_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exchange_key_rs, key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rq, token_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rs, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_rs, token_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rq, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rq, timecode_native_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rq, coord_info_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rs, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rs, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rs, timecode_native_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_rs, coord_info_),
  1,
  3,
  0,
  4,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(exchange_key_rq)},
  { 11, 18, sizeof(exchange_key_rs)},
  { 20, 27, sizeof(token_verify_rq)},
  { 29, 37, sizeof(token_verify_rs)},
  { 40, 49, sizeof(heartbeat_rq)},
  { 53, 63, sizeof(heartbeat_rs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_exchange_key_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_exchange_key_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_token_verify_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_token_verify_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_heartbeat_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_heartbeat_rs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "c_shuttle_lobby.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _exchange_key_rq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _exchange_key_rs_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _token_verify_rq_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _token_verify_rs_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _heartbeat_rq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _heartbeat_rs_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::b_error::protobuf_b_5ferror_2eproto::InitDefaults();
  ::b_math::protobuf_b_5fmath_2eproto::InitDefaults();
  _exchange_key_rq_default_instance_.DefaultConstruct();
  _exchange_key_rs_default_instance_.DefaultConstruct();
  _token_verify_rq_default_instance_.DefaultConstruct();
  _token_verify_rs_default_instance_.DefaultConstruct();
  _heartbeat_rq_default_instance_.DefaultConstruct();
  _heartbeat_rs_default_instance_.DefaultConstruct();
  _exchange_key_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _token_verify_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _heartbeat_rq_default_instance_.get_mutable()->coord_info_ = const_cast< ::b_math::coord*>(
      ::b_math::coord::internal_default_instance());
  _heartbeat_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _heartbeat_rs_default_instance_.get_mutable()->coord_info_ = const_cast< ::b_math::coord*>(
      ::b_math::coord::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025c_shuttle_lobby.proto\022\017c_shuttle_lobby"
      "\032\rb_error.proto\032\014b_math.proto\"M\n\017exchang"
      "e_key_rq\022\t\n\001n\030\001 \002(\014\022\t\n\001e\030\002 \002(\014\022\022\n\007versio"
      "n\030\003 \002(\r:\0010\"\020\n\003msg\022\t\n\002id\020\200\242\200\020\"N\n\017exchange"
      "_key_rs\022\034\n\005error\030\001 \002(\0132\r.b_error.info\022\013\n"
      "\003key\030\002 \002(\014\"\020\n\003msg\022\t\n\002id\020\201\242\200\020\"D\n\017token_ve"
      "rify_rq\022\016\n\003uid\030\001 \002(\004:\0010\022\017\n\005token\030\002 \002(\t:\000"
      "\"\020\n\003msg\022\t\n\002id\020\202\242\200\020\"b\n\017token_verify_rs\022\034\n"
      "\005error\030\001 \002(\0132\r.b_error.info\022\016\n\003uid\030\002 \002(\004"
      ":\0010\022\017\n\005token\030\003 \002(\t:\000\"\020\n\003msg\022\t\n\002id\020\203\242\200\020\"\200"
      "\001\n\014heartbeat_rq\022\016\n\003uid\030\001 \002(\004:\0010\022\017\n\005token"
      "\030\002 \002(\t:\000\022\032\n\017timecode_native\030\003 \002(\004:\0010\022!\n\n"
      "coord_info\030\004 \002(\0132\r.b_math.coord\"\020\n\003msg\022\t"
      "\n\002id\020\204\242\200\020\"\236\001\n\014heartbeat_rs\022\034\n\005error\030\001 \002("
      "\0132\r.b_error.info\022\016\n\003uid\030\002 \002(\004:\0010\022\017\n\005toke"
      "n\030\003 \002(\t:\000\022\032\n\017timecode_native\030\004 \002(\004:\0010\022!\n"
      "\ncoord_info\030\005 \002(\0132\r.b_math.coord\"\020\n\003msg\022"
      "\t\n\002id\020\205\242\200\020*#\n\003msg\022\r\n\006min_id\020\200\242\200\020\022\r\n\006max_"
      "id\020\377\243\200\020BZ\n\010protodefB\017c_shuttle_lobbyZ\030pr"
      "otodef/c_shuttle_lobby\242\002\020C_shuttle_lobby"
      "_\252\002\017c_shuttle_lobby"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 819);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "c_shuttle_lobby.proto", &protobuf_RegisterTypes);
  ::b_error::protobuf_b_5ferror_2eproto::AddDescriptors();
  ::b_math::protobuf_b_5fmath_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_c_5fshuttle_5flobby_2eproto

const ::google::protobuf::EnumDescriptor* exchange_key_rq_msg_descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[0];
}
bool exchange_key_rq_msg_IsValid(int value) {
  switch (value) {
    case 33558784:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const exchange_key_rq_msg exchange_key_rq::id;
const exchange_key_rq_msg exchange_key_rq::msg_MIN;
const exchange_key_rq_msg exchange_key_rq::msg_MAX;
const int exchange_key_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* exchange_key_rs_msg_descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[1];
}
bool exchange_key_rs_msg_IsValid(int value) {
  switch (value) {
    case 33558785:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const exchange_key_rs_msg exchange_key_rs::id;
const exchange_key_rs_msg exchange_key_rs::msg_MIN;
const exchange_key_rs_msg exchange_key_rs::msg_MAX;
const int exchange_key_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* token_verify_rq_msg_descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[2];
}
bool token_verify_rq_msg_IsValid(int value) {
  switch (value) {
    case 33558786:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const token_verify_rq_msg token_verify_rq::id;
const token_verify_rq_msg token_verify_rq::msg_MIN;
const token_verify_rq_msg token_verify_rq::msg_MAX;
const int token_verify_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* token_verify_rs_msg_descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[3];
}
bool token_verify_rs_msg_IsValid(int value) {
  switch (value) {
    case 33558787:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const token_verify_rs_msg token_verify_rs::id;
const token_verify_rs_msg token_verify_rs::msg_MIN;
const token_verify_rs_msg token_verify_rs::msg_MAX;
const int token_verify_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* heartbeat_rq_msg_descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[4];
}
bool heartbeat_rq_msg_IsValid(int value) {
  switch (value) {
    case 33558788:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const heartbeat_rq_msg heartbeat_rq::id;
const heartbeat_rq_msg heartbeat_rq::msg_MIN;
const heartbeat_rq_msg heartbeat_rq::msg_MAX;
const int heartbeat_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* heartbeat_rs_msg_descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[5];
}
bool heartbeat_rs_msg_IsValid(int value) {
  switch (value) {
    case 33558789:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const heartbeat_rs_msg heartbeat_rs::id;
const heartbeat_rs_msg heartbeat_rs::msg_MIN;
const heartbeat_rs_msg heartbeat_rs::msg_MAX;
const int heartbeat_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* msg_descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[6];
}
bool msg_IsValid(int value) {
  switch (value) {
    case 33558784:
    case 33559039:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int exchange_key_rq::kNFieldNumber;
const int exchange_key_rq::kEFieldNumber;
const int exchange_key_rq::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

exchange_key_rq::exchange_key_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_shuttle_lobby.exchange_key_rq)
}
exchange_key_rq::exchange_key_rq(const exchange_key_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  n_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_n()) {
    n_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.n_);
  }
  e_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_e()) {
    e_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.e_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:c_shuttle_lobby.exchange_key_rq)
}

void exchange_key_rq::SharedCtor() {
  _cached_size_ = 0;
  n_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

exchange_key_rq::~exchange_key_rq() {
  // @@protoc_insertion_point(destructor:c_shuttle_lobby.exchange_key_rq)
  SharedDtor();
}

void exchange_key_rq::SharedDtor() {
  n_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void exchange_key_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exchange_key_rq::descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const exchange_key_rq& exchange_key_rq::default_instance() {
  protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  return *internal_default_instance();
}

exchange_key_rq* exchange_key_rq::New(::google::protobuf::Arena* arena) const {
  exchange_key_rq* n = new exchange_key_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void exchange_key_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_shuttle_lobby.exchange_key_rq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_n()) {
      GOOGLE_DCHECK(!n_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*n_.UnsafeRawStringPointer())->clear();
    }
    if (has_e()) {
      GOOGLE_DCHECK(!e_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*e_.UnsafeRawStringPointer())->clear();
    }
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool exchange_key_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_shuttle_lobby.exchange_key_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes e = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_shuttle_lobby.exchange_key_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_shuttle_lobby.exchange_key_rq)
  return false;
#undef DO_
}

void exchange_key_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_shuttle_lobby.exchange_key_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes n = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->n(), output);
  }

  // required bytes e = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->e(), output);
  }

  // required uint32 version = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_shuttle_lobby.exchange_key_rq)
}

::google::protobuf::uint8* exchange_key_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_shuttle_lobby.exchange_key_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes n = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->n(), target);
  }

  // required bytes e = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->e(), target);
  }

  // required uint32 version = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_shuttle_lobby.exchange_key_rq)
  return target;
}

size_t exchange_key_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_shuttle_lobby.exchange_key_rq)
  size_t total_size = 0;

  if (has_n()) {
    // required bytes n = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->n());
  }

  if (has_e()) {
    // required bytes e = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->e());
  }

  if (has_version()) {
    // required uint32 version = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t exchange_key_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_shuttle_lobby.exchange_key_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes n = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->n());

    // required bytes e = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->e());

    // required uint32 version = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exchange_key_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_shuttle_lobby.exchange_key_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const exchange_key_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const exchange_key_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_shuttle_lobby.exchange_key_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_shuttle_lobby.exchange_key_rq)
    MergeFrom(*source);
  }
}

void exchange_key_rq::MergeFrom(const exchange_key_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_shuttle_lobby.exchange_key_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_n();
      n_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.n_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_e();
      e_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.e_);
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void exchange_key_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_shuttle_lobby.exchange_key_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exchange_key_rq::CopyFrom(const exchange_key_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_shuttle_lobby.exchange_key_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exchange_key_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void exchange_key_rq::Swap(exchange_key_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void exchange_key_rq::InternalSwap(exchange_key_rq* other) {
  n_.Swap(&other->n_);
  e_.Swap(&other->e_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata exchange_key_rq::GetMetadata() const {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// exchange_key_rq

// required bytes n = 1;
bool exchange_key_rq::has_n() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void exchange_key_rq::set_has_n() {
  _has_bits_[0] |= 0x00000001u;
}
void exchange_key_rq::clear_has_n() {
  _has_bits_[0] &= ~0x00000001u;
}
void exchange_key_rq::clear_n() {
  n_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_n();
}
const ::std::string& exchange_key_rq::n() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rq.n)
  return n_.GetNoArena();
}
void exchange_key_rq::set_n(const ::std::string& value) {
  set_has_n();
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.exchange_key_rq.n)
}
#if LANG_CXX11
void exchange_key_rq::set_n(::std::string&& value) {
  set_has_n();
  n_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.exchange_key_rq.n)
}
#endif
void exchange_key_rq::set_n(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_n();
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.exchange_key_rq.n)
}
void exchange_key_rq::set_n(const void* value, size_t size) {
  set_has_n();
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.exchange_key_rq.n)
}
::std::string* exchange_key_rq::mutable_n() {
  set_has_n();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.exchange_key_rq.n)
  return n_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* exchange_key_rq::release_n() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.exchange_key_rq.n)
  clear_has_n();
  return n_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void exchange_key_rq::set_allocated_n(::std::string* n) {
  if (n != NULL) {
    set_has_n();
  } else {
    clear_has_n();
  }
  n_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), n);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.exchange_key_rq.n)
}

// required bytes e = 2;
bool exchange_key_rq::has_e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void exchange_key_rq::set_has_e() {
  _has_bits_[0] |= 0x00000002u;
}
void exchange_key_rq::clear_has_e() {
  _has_bits_[0] &= ~0x00000002u;
}
void exchange_key_rq::clear_e() {
  e_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_e();
}
const ::std::string& exchange_key_rq::e() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rq.e)
  return e_.GetNoArena();
}
void exchange_key_rq::set_e(const ::std::string& value) {
  set_has_e();
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.exchange_key_rq.e)
}
#if LANG_CXX11
void exchange_key_rq::set_e(::std::string&& value) {
  set_has_e();
  e_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.exchange_key_rq.e)
}
#endif
void exchange_key_rq::set_e(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_e();
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.exchange_key_rq.e)
}
void exchange_key_rq::set_e(const void* value, size_t size) {
  set_has_e();
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.exchange_key_rq.e)
}
::std::string* exchange_key_rq::mutable_e() {
  set_has_e();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.exchange_key_rq.e)
  return e_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* exchange_key_rq::release_e() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.exchange_key_rq.e)
  clear_has_e();
  return e_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void exchange_key_rq::set_allocated_e(::std::string* e) {
  if (e != NULL) {
    set_has_e();
  } else {
    clear_has_e();
  }
  e_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.exchange_key_rq.e)
}

// required uint32 version = 3 [default = 0];
bool exchange_key_rq::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void exchange_key_rq::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void exchange_key_rq::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void exchange_key_rq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 exchange_key_rq::version() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rq.version)
  return version_;
}
void exchange_key_rq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.exchange_key_rq.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int exchange_key_rs::kErrorFieldNumber;
const int exchange_key_rs::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

exchange_key_rs::exchange_key_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_shuttle_lobby.exchange_key_rs)
}
exchange_key_rs::exchange_key_rs(const exchange_key_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:c_shuttle_lobby.exchange_key_rs)
}

void exchange_key_rs::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
}

exchange_key_rs::~exchange_key_rs() {
  // @@protoc_insertion_point(destructor:c_shuttle_lobby.exchange_key_rs)
  SharedDtor();
}

void exchange_key_rs::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void exchange_key_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exchange_key_rs::descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const exchange_key_rs& exchange_key_rs::default_instance() {
  protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  return *internal_default_instance();
}

exchange_key_rs* exchange_key_rs::New(::google::protobuf::Arena* arena) const {
  exchange_key_rs* n = new exchange_key_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void exchange_key_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_shuttle_lobby.exchange_key_rs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool exchange_key_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_shuttle_lobby.exchange_key_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_shuttle_lobby.exchange_key_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_shuttle_lobby.exchange_key_rs)
  return false;
#undef DO_
}

void exchange_key_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_shuttle_lobby.exchange_key_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_shuttle_lobby.exchange_key_rs)
}

::google::protobuf::uint8* exchange_key_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_shuttle_lobby.exchange_key_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_shuttle_lobby.exchange_key_rs)
  return target;
}

size_t exchange_key_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_shuttle_lobby.exchange_key_rs)
  size_t total_size = 0;

  if (has_key()) {
    // required bytes key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  return total_size;
}
size_t exchange_key_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_shuttle_lobby.exchange_key_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exchange_key_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_shuttle_lobby.exchange_key_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const exchange_key_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const exchange_key_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_shuttle_lobby.exchange_key_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_shuttle_lobby.exchange_key_rs)
    MergeFrom(*source);
  }
}

void exchange_key_rs::MergeFrom(const exchange_key_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_shuttle_lobby.exchange_key_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
  }
}

void exchange_key_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_shuttle_lobby.exchange_key_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exchange_key_rs::CopyFrom(const exchange_key_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_shuttle_lobby.exchange_key_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exchange_key_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void exchange_key_rs::Swap(exchange_key_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void exchange_key_rs::InternalSwap(exchange_key_rs* other) {
  key_.Swap(&other->key_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata exchange_key_rs::GetMetadata() const {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// exchange_key_rs

// required .b_error.info error = 1;
bool exchange_key_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void exchange_key_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void exchange_key_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void exchange_key_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& exchange_key_rs::error() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* exchange_key_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.exchange_key_rs.error)
  return error_;
}
::b_error::info* exchange_key_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.exchange_key_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void exchange_key_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.exchange_key_rs.error)
}

// required bytes key = 2;
bool exchange_key_rs::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void exchange_key_rs::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void exchange_key_rs::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void exchange_key_rs::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& exchange_key_rs::key() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.exchange_key_rs.key)
  return key_.GetNoArena();
}
void exchange_key_rs::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.exchange_key_rs.key)
}
#if LANG_CXX11
void exchange_key_rs::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.exchange_key_rs.key)
}
#endif
void exchange_key_rs::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.exchange_key_rs.key)
}
void exchange_key_rs::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.exchange_key_rs.key)
}
::std::string* exchange_key_rs::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.exchange_key_rs.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* exchange_key_rs::release_key() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.exchange_key_rs.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void exchange_key_rs::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.exchange_key_rs.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int token_verify_rq::kUidFieldNumber;
const int token_verify_rq::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

token_verify_rq::token_verify_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_shuttle_lobby.token_verify_rq)
}
token_verify_rq::token_verify_rq(const token_verify_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:c_shuttle_lobby.token_verify_rq)
}

void token_verify_rq::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_ULONGLONG(0);
}

token_verify_rq::~token_verify_rq() {
  // @@protoc_insertion_point(destructor:c_shuttle_lobby.token_verify_rq)
  SharedDtor();
}

void token_verify_rq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void token_verify_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* token_verify_rq::descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const token_verify_rq& token_verify_rq::default_instance() {
  protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  return *internal_default_instance();
}

token_verify_rq* token_verify_rq::New(::google::protobuf::Arena* arena) const {
  token_verify_rq* n = new token_verify_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void token_verify_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_shuttle_lobby.token_verify_rq)
  if (has_token()) {
    GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*token_.UnsafeRawStringPointer())->clear();
  }
  uid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool token_verify_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_shuttle_lobby.token_verify_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string token = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_shuttle_lobby.token_verify_rq.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_shuttle_lobby.token_verify_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_shuttle_lobby.token_verify_rq)
  return false;
#undef DO_
}

void token_verify_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_shuttle_lobby.token_verify_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uid = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string token = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_shuttle_lobby.token_verify_rq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_shuttle_lobby.token_verify_rq)
}

::google::protobuf::uint8* token_verify_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_shuttle_lobby.token_verify_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uid = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required string token = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_shuttle_lobby.token_verify_rq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_shuttle_lobby.token_verify_rq)
  return target;
}

size_t token_verify_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_shuttle_lobby.token_verify_rq)
  size_t total_size = 0;

  if (has_token()) {
    // required string token = 2 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_uid()) {
    // required uint64 uid = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  return total_size;
}
size_t token_verify_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_shuttle_lobby.token_verify_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string token = 2 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required uint64 uid = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void token_verify_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_shuttle_lobby.token_verify_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const token_verify_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const token_verify_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_shuttle_lobby.token_verify_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_shuttle_lobby.token_verify_rq)
    MergeFrom(*source);
  }
}

void token_verify_rq::MergeFrom(const token_verify_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_shuttle_lobby.token_verify_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void token_verify_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_shuttle_lobby.token_verify_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void token_verify_rq::CopyFrom(const token_verify_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_shuttle_lobby.token_verify_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool token_verify_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void token_verify_rq::Swap(token_verify_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void token_verify_rq::InternalSwap(token_verify_rq* other) {
  token_.Swap(&other->token_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata token_verify_rq::GetMetadata() const {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// token_verify_rq

// required uint64 uid = 1 [default = 0];
bool token_verify_rq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void token_verify_rq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void token_verify_rq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void token_verify_rq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 token_verify_rq::uid() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rq.uid)
  return uid_;
}
void token_verify_rq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.token_verify_rq.uid)
}

// required string token = 2 [default = ""];
bool token_verify_rq::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void token_verify_rq::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void token_verify_rq::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void token_verify_rq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& token_verify_rq::token() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rq.token)
  return token_.GetNoArena();
}
void token_verify_rq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.token_verify_rq.token)
}
#if LANG_CXX11
void token_verify_rq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.token_verify_rq.token)
}
#endif
void token_verify_rq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.token_verify_rq.token)
}
void token_verify_rq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.token_verify_rq.token)
}
::std::string* token_verify_rq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.token_verify_rq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* token_verify_rq::release_token() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.token_verify_rq.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void token_verify_rq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.token_verify_rq.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int token_verify_rs::kErrorFieldNumber;
const int token_verify_rs::kUidFieldNumber;
const int token_verify_rs::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

token_verify_rs::token_verify_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_shuttle_lobby.token_verify_rs)
}
token_verify_rs::token_verify_rs(const token_verify_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:c_shuttle_lobby.token_verify_rs)
}

void token_verify_rs::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&error_) + sizeof(uid_));
}

token_verify_rs::~token_verify_rs() {
  // @@protoc_insertion_point(destructor:c_shuttle_lobby.token_verify_rs)
  SharedDtor();
}

void token_verify_rs::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void token_verify_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* token_verify_rs::descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const token_verify_rs& token_verify_rs::default_instance() {
  protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  return *internal_default_instance();
}

token_verify_rs* token_verify_rs::New(::google::protobuf::Arena* arena) const {
  token_verify_rs* n = new token_verify_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void token_verify_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_shuttle_lobby.token_verify_rs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
  }
  uid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool token_verify_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_shuttle_lobby.token_verify_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 uid = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string token = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_shuttle_lobby.token_verify_rs.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_shuttle_lobby.token_verify_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_shuttle_lobby.token_verify_rs)
  return false;
#undef DO_
}

void token_verify_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_shuttle_lobby.token_verify_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 uid = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required string token = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_shuttle_lobby.token_verify_rs.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_shuttle_lobby.token_verify_rs)
}

::google::protobuf::uint8* token_verify_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_shuttle_lobby.token_verify_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 uid = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required string token = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_shuttle_lobby.token_verify_rs.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_shuttle_lobby.token_verify_rs)
  return target;
}

size_t token_verify_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_shuttle_lobby.token_verify_rs)
  size_t total_size = 0;

  if (has_token()) {
    // required string token = 3 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_uid()) {
    // required uint64 uid = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  return total_size;
}
size_t token_verify_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_shuttle_lobby.token_verify_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string token = 3 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 uid = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void token_verify_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_shuttle_lobby.token_verify_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const token_verify_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const token_verify_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_shuttle_lobby.token_verify_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_shuttle_lobby.token_verify_rs)
    MergeFrom(*source);
  }
}

void token_verify_rs::MergeFrom(const token_verify_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_shuttle_lobby.token_verify_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void token_verify_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_shuttle_lobby.token_verify_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void token_verify_rs::CopyFrom(const token_verify_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_shuttle_lobby.token_verify_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool token_verify_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void token_verify_rs::Swap(token_verify_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void token_verify_rs::InternalSwap(token_verify_rs* other) {
  token_.Swap(&other->token_);
  std::swap(error_, other->error_);
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata token_verify_rs::GetMetadata() const {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// token_verify_rs

// required .b_error.info error = 1;
bool token_verify_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void token_verify_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void token_verify_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void token_verify_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& token_verify_rs::error() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* token_verify_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.token_verify_rs.error)
  return error_;
}
::b_error::info* token_verify_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.token_verify_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void token_verify_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.token_verify_rs.error)
}

// required uint64 uid = 2 [default = 0];
bool token_verify_rs::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void token_verify_rs::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
void token_verify_rs::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
void token_verify_rs::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 token_verify_rs::uid() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rs.uid)
  return uid_;
}
void token_verify_rs::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.token_verify_rs.uid)
}

// required string token = 3 [default = ""];
bool token_verify_rs::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void token_verify_rs::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void token_verify_rs::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void token_verify_rs::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& token_verify_rs::token() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.token_verify_rs.token)
  return token_.GetNoArena();
}
void token_verify_rs::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.token_verify_rs.token)
}
#if LANG_CXX11
void token_verify_rs::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.token_verify_rs.token)
}
#endif
void token_verify_rs::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.token_verify_rs.token)
}
void token_verify_rs::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.token_verify_rs.token)
}
::std::string* token_verify_rs::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.token_verify_rs.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* token_verify_rs::release_token() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.token_verify_rs.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void token_verify_rs::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.token_verify_rs.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int heartbeat_rq::kUidFieldNumber;
const int heartbeat_rq::kTokenFieldNumber;
const int heartbeat_rq::kTimecodeNativeFieldNumber;
const int heartbeat_rq::kCoordInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

heartbeat_rq::heartbeat_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_shuttle_lobby.heartbeat_rq)
}
heartbeat_rq::heartbeat_rq(const heartbeat_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_coord_info()) {
    coord_info_ = new ::b_math::coord(*from.coord_info_);
  } else {
    coord_info_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&timecode_native_) -
    reinterpret_cast<char*>(&uid_) + sizeof(timecode_native_));
  // @@protoc_insertion_point(copy_constructor:c_shuttle_lobby.heartbeat_rq)
}

void heartbeat_rq::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&coord_info_, 0, reinterpret_cast<char*>(&timecode_native_) -
    reinterpret_cast<char*>(&coord_info_) + sizeof(timecode_native_));
}

heartbeat_rq::~heartbeat_rq() {
  // @@protoc_insertion_point(destructor:c_shuttle_lobby.heartbeat_rq)
  SharedDtor();
}

void heartbeat_rq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete coord_info_;
  }
}

void heartbeat_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartbeat_rq::descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const heartbeat_rq& heartbeat_rq::default_instance() {
  protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  return *internal_default_instance();
}

heartbeat_rq* heartbeat_rq::New(::google::protobuf::Arena* arena) const {
  heartbeat_rq* n = new heartbeat_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void heartbeat_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_shuttle_lobby.heartbeat_rq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_coord_info()) {
      GOOGLE_DCHECK(coord_info_ != NULL);
      coord_info_->::b_math::coord::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&timecode_native_) -
      reinterpret_cast<char*>(&uid_) + sizeof(timecode_native_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool heartbeat_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_shuttle_lobby.heartbeat_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string token = 2 [default = ""];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_shuttle_lobby.heartbeat_rq.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timecode_native = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timecode_native();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timecode_native_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .b_math.coord coord_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_shuttle_lobby.heartbeat_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_shuttle_lobby.heartbeat_rq)
  return false;
#undef DO_
}

void heartbeat_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_shuttle_lobby.heartbeat_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uid = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string token = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_shuttle_lobby.heartbeat_rq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // required uint64 timecode_native = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timecode_native(), output);
  }

  // required .b_math.coord coord_info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->coord_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_shuttle_lobby.heartbeat_rq)
}

::google::protobuf::uint8* heartbeat_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_shuttle_lobby.heartbeat_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 uid = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required string token = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_shuttle_lobby.heartbeat_rq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required uint64 timecode_native = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timecode_native(), target);
  }

  // required .b_math.coord coord_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->coord_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_shuttle_lobby.heartbeat_rq)
  return target;
}

size_t heartbeat_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_shuttle_lobby.heartbeat_rq)
  size_t total_size = 0;

  if (has_token()) {
    // required string token = 2 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_coord_info()) {
    // required .b_math.coord coord_info = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_info_);
  }

  if (has_uid()) {
    // required uint64 uid = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  if (has_timecode_native()) {
    // required uint64 timecode_native = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timecode_native());
  }

  return total_size;
}
size_t heartbeat_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_shuttle_lobby.heartbeat_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string token = 2 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required .b_math.coord coord_info = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_info_);

    // required uint64 uid = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

    // required uint64 timecode_native = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timecode_native());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartbeat_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_shuttle_lobby.heartbeat_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const heartbeat_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const heartbeat_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_shuttle_lobby.heartbeat_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_shuttle_lobby.heartbeat_rq)
    MergeFrom(*source);
  }
}

void heartbeat_rq::MergeFrom(const heartbeat_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_shuttle_lobby.heartbeat_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_coord_info()->::b_math::coord::MergeFrom(from.coord_info());
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      timecode_native_ = from.timecode_native_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void heartbeat_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_shuttle_lobby.heartbeat_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartbeat_rq::CopyFrom(const heartbeat_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_shuttle_lobby.heartbeat_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartbeat_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_coord_info()) {
    if (!this->coord_info_->IsInitialized()) return false;
  }
  return true;
}

void heartbeat_rq::Swap(heartbeat_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void heartbeat_rq::InternalSwap(heartbeat_rq* other) {
  token_.Swap(&other->token_);
  std::swap(coord_info_, other->coord_info_);
  std::swap(uid_, other->uid_);
  std::swap(timecode_native_, other->timecode_native_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata heartbeat_rq::GetMetadata() const {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// heartbeat_rq

// required uint64 uid = 1 [default = 0];
bool heartbeat_rq::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void heartbeat_rq::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
void heartbeat_rq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
void heartbeat_rq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 heartbeat_rq::uid() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rq.uid)
  return uid_;
}
void heartbeat_rq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rq.uid)
}

// required string token = 2 [default = ""];
bool heartbeat_rq::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void heartbeat_rq::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void heartbeat_rq::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void heartbeat_rq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& heartbeat_rq::token() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rq.token)
  return token_.GetNoArena();
}
void heartbeat_rq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rq.token)
}
#if LANG_CXX11
void heartbeat_rq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.heartbeat_rq.token)
}
#endif
void heartbeat_rq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.heartbeat_rq.token)
}
void heartbeat_rq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.heartbeat_rq.token)
}
::std::string* heartbeat_rq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.heartbeat_rq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* heartbeat_rq::release_token() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.heartbeat_rq.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void heartbeat_rq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.heartbeat_rq.token)
}

// required uint64 timecode_native = 3 [default = 0];
bool heartbeat_rq::has_timecode_native() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void heartbeat_rq::set_has_timecode_native() {
  _has_bits_[0] |= 0x00000008u;
}
void heartbeat_rq::clear_has_timecode_native() {
  _has_bits_[0] &= ~0x00000008u;
}
void heartbeat_rq::clear_timecode_native() {
  timecode_native_ = GOOGLE_ULONGLONG(0);
  clear_has_timecode_native();
}
::google::protobuf::uint64 heartbeat_rq::timecode_native() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rq.timecode_native)
  return timecode_native_;
}
void heartbeat_rq::set_timecode_native(::google::protobuf::uint64 value) {
  set_has_timecode_native();
  timecode_native_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rq.timecode_native)
}

// required .b_math.coord coord_info = 4;
bool heartbeat_rq::has_coord_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void heartbeat_rq::set_has_coord_info() {
  _has_bits_[0] |= 0x00000002u;
}
void heartbeat_rq::clear_has_coord_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void heartbeat_rq::clear_coord_info() {
  if (coord_info_ != NULL) coord_info_->::b_math::coord::Clear();
  clear_has_coord_info();
}
const ::b_math::coord& heartbeat_rq::coord_info() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rq.coord_info)
  return coord_info_ != NULL ? *coord_info_
                         : *::b_math::coord::internal_default_instance();
}
::b_math::coord* heartbeat_rq::mutable_coord_info() {
  set_has_coord_info();
  if (coord_info_ == NULL) {
    coord_info_ = new ::b_math::coord;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.heartbeat_rq.coord_info)
  return coord_info_;
}
::b_math::coord* heartbeat_rq::release_coord_info() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.heartbeat_rq.coord_info)
  clear_has_coord_info();
  ::b_math::coord* temp = coord_info_;
  coord_info_ = NULL;
  return temp;
}
void heartbeat_rq::set_allocated_coord_info(::b_math::coord* coord_info) {
  delete coord_info_;
  coord_info_ = coord_info;
  if (coord_info) {
    set_has_coord_info();
  } else {
    clear_has_coord_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.heartbeat_rq.coord_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int heartbeat_rs::kErrorFieldNumber;
const int heartbeat_rs::kUidFieldNumber;
const int heartbeat_rs::kTokenFieldNumber;
const int heartbeat_rs::kTimecodeNativeFieldNumber;
const int heartbeat_rs::kCoordInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

heartbeat_rs::heartbeat_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_shuttle_lobby.heartbeat_rs)
}
heartbeat_rs::heartbeat_rs(const heartbeat_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_coord_info()) {
    coord_info_ = new ::b_math::coord(*from.coord_info_);
  } else {
    coord_info_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&timecode_native_) -
    reinterpret_cast<char*>(&uid_) + sizeof(timecode_native_));
  // @@protoc_insertion_point(copy_constructor:c_shuttle_lobby.heartbeat_rs)
}

void heartbeat_rs::SharedCtor() {
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, reinterpret_cast<char*>(&timecode_native_) -
    reinterpret_cast<char*>(&error_) + sizeof(timecode_native_));
}

heartbeat_rs::~heartbeat_rs() {
  // @@protoc_insertion_point(destructor:c_shuttle_lobby.heartbeat_rs)
  SharedDtor();
}

void heartbeat_rs::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
  if (this != internal_default_instance()) {
    delete coord_info_;
  }
}

void heartbeat_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartbeat_rs::descriptor() {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const heartbeat_rs& heartbeat_rs::default_instance() {
  protobuf_c_5fshuttle_5flobby_2eproto::InitDefaults();
  return *internal_default_instance();
}

heartbeat_rs* heartbeat_rs::New(::google::protobuf::Arena* arena) const {
  heartbeat_rs* n = new heartbeat_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void heartbeat_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_shuttle_lobby.heartbeat_rs)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_token()) {
      GOOGLE_DCHECK(!token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
    if (has_coord_info()) {
      GOOGLE_DCHECK(coord_info_ != NULL);
      coord_info_->::b_math::coord::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&uid_, 0, reinterpret_cast<char*>(&timecode_native_) -
      reinterpret_cast<char*>(&uid_) + sizeof(timecode_native_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool heartbeat_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_shuttle_lobby.heartbeat_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 uid = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string token = 3 [default = ""];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_shuttle_lobby.heartbeat_rs.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timecode_native = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timecode_native();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timecode_native_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .b_math.coord coord_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_shuttle_lobby.heartbeat_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_shuttle_lobby.heartbeat_rs)
  return false;
#undef DO_
}

void heartbeat_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_shuttle_lobby.heartbeat_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 uid = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required string token = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_shuttle_lobby.heartbeat_rs.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // required uint64 timecode_native = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timecode_native(), output);
  }

  // required .b_math.coord coord_info = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->coord_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_shuttle_lobby.heartbeat_rs)
}

::google::protobuf::uint8* heartbeat_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_shuttle_lobby.heartbeat_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 uid = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required string token = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_shuttle_lobby.heartbeat_rs.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // required uint64 timecode_native = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timecode_native(), target);
  }

  // required .b_math.coord coord_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->coord_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_shuttle_lobby.heartbeat_rs)
  return target;
}

size_t heartbeat_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_shuttle_lobby.heartbeat_rs)
  size_t total_size = 0;

  if (has_token()) {
    // required string token = 3 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_coord_info()) {
    // required .b_math.coord coord_info = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_info_);
  }

  if (has_uid()) {
    // required uint64 uid = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  if (has_timecode_native()) {
    // required uint64 timecode_native = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timecode_native());
  }

  return total_size;
}
size_t heartbeat_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_shuttle_lobby.heartbeat_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string token = 3 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required .b_math.coord coord_info = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_info_);

    // required uint64 uid = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

    // required uint64 timecode_native = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timecode_native());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartbeat_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_shuttle_lobby.heartbeat_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const heartbeat_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const heartbeat_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_shuttle_lobby.heartbeat_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_shuttle_lobby.heartbeat_rs)
    MergeFrom(*source);
  }
}

void heartbeat_rs::MergeFrom(const heartbeat_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_shuttle_lobby.heartbeat_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_coord_info()->::b_math::coord::MergeFrom(from.coord_info());
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      timecode_native_ = from.timecode_native_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void heartbeat_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_shuttle_lobby.heartbeat_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartbeat_rs::CopyFrom(const heartbeat_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_shuttle_lobby.heartbeat_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartbeat_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  if (has_coord_info()) {
    if (!this->coord_info_->IsInitialized()) return false;
  }
  return true;
}

void heartbeat_rs::Swap(heartbeat_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void heartbeat_rs::InternalSwap(heartbeat_rs* other) {
  token_.Swap(&other->token_);
  std::swap(error_, other->error_);
  std::swap(coord_info_, other->coord_info_);
  std::swap(uid_, other->uid_);
  std::swap(timecode_native_, other->timecode_native_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata heartbeat_rs::GetMetadata() const {
  protobuf_c_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// heartbeat_rs

// required .b_error.info error = 1;
bool heartbeat_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void heartbeat_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void heartbeat_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void heartbeat_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& heartbeat_rs::error() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* heartbeat_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.heartbeat_rs.error)
  return error_;
}
::b_error::info* heartbeat_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.heartbeat_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void heartbeat_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.heartbeat_rs.error)
}

// required uint64 uid = 2 [default = 0];
bool heartbeat_rs::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void heartbeat_rs::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
void heartbeat_rs::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
void heartbeat_rs::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 heartbeat_rs::uid() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.uid)
  return uid_;
}
void heartbeat_rs::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rs.uid)
}

// required string token = 3 [default = ""];
bool heartbeat_rs::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void heartbeat_rs::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void heartbeat_rs::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void heartbeat_rs::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
const ::std::string& heartbeat_rs::token() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.token)
  return token_.GetNoArena();
}
void heartbeat_rs::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rs.token)
}
#if LANG_CXX11
void heartbeat_rs::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_shuttle_lobby.heartbeat_rs.token)
}
#endif
void heartbeat_rs::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_shuttle_lobby.heartbeat_rs.token)
}
void heartbeat_rs::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_shuttle_lobby.heartbeat_rs.token)
}
::std::string* heartbeat_rs::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.heartbeat_rs.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* heartbeat_rs::release_token() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.heartbeat_rs.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void heartbeat_rs::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.heartbeat_rs.token)
}

// required uint64 timecode_native = 4 [default = 0];
bool heartbeat_rs::has_timecode_native() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void heartbeat_rs::set_has_timecode_native() {
  _has_bits_[0] |= 0x00000010u;
}
void heartbeat_rs::clear_has_timecode_native() {
  _has_bits_[0] &= ~0x00000010u;
}
void heartbeat_rs::clear_timecode_native() {
  timecode_native_ = GOOGLE_ULONGLONG(0);
  clear_has_timecode_native();
}
::google::protobuf::uint64 heartbeat_rs::timecode_native() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.timecode_native)
  return timecode_native_;
}
void heartbeat_rs::set_timecode_native(::google::protobuf::uint64 value) {
  set_has_timecode_native();
  timecode_native_ = value;
  // @@protoc_insertion_point(field_set:c_shuttle_lobby.heartbeat_rs.timecode_native)
}

// required .b_math.coord coord_info = 5;
bool heartbeat_rs::has_coord_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void heartbeat_rs::set_has_coord_info() {
  _has_bits_[0] |= 0x00000004u;
}
void heartbeat_rs::clear_has_coord_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void heartbeat_rs::clear_coord_info() {
  if (coord_info_ != NULL) coord_info_->::b_math::coord::Clear();
  clear_has_coord_info();
}
const ::b_math::coord& heartbeat_rs::coord_info() const {
  // @@protoc_insertion_point(field_get:c_shuttle_lobby.heartbeat_rs.coord_info)
  return coord_info_ != NULL ? *coord_info_
                         : *::b_math::coord::internal_default_instance();
}
::b_math::coord* heartbeat_rs::mutable_coord_info() {
  set_has_coord_info();
  if (coord_info_ == NULL) {
    coord_info_ = new ::b_math::coord;
  }
  // @@protoc_insertion_point(field_mutable:c_shuttle_lobby.heartbeat_rs.coord_info)
  return coord_info_;
}
::b_math::coord* heartbeat_rs::release_coord_info() {
  // @@protoc_insertion_point(field_release:c_shuttle_lobby.heartbeat_rs.coord_info)
  clear_has_coord_info();
  ::b_math::coord* temp = coord_info_;
  coord_info_ = NULL;
  return temp;
}
void heartbeat_rs::set_allocated_coord_info(::b_math::coord* coord_info) {
  delete coord_info_;
  coord_info_ = coord_info;
  if (coord_info) {
    set_has_coord_info();
  } else {
    clear_has_coord_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_shuttle_lobby.heartbeat_rs.coord_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace c_shuttle_lobby

// @@protoc_insertion_point(global_scope)
