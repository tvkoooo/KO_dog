// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_business_relation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "c_business_relation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace c_business_relation {
class friend_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<friend_info> {
} _friend_info_default_instance_;
class add_friend_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_friend_rq> {
} _add_friend_rq_default_instance_;
class add_friend_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_friend_rs> {
} _add_friend_rs_default_instance_;
class add_friend_ntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_friend_nt> {
} _add_friend_nt_default_instance_;
class delete_friend_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<delete_friend_rq> {
} _delete_friend_rq_default_instance_;
class delete_friend_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<delete_friend_rs> {
} _delete_friend_rs_default_instance_;
class delete_friend_ntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<delete_friend_nt> {
} _delete_friend_nt_default_instance_;
class allow_friend_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<allow_friend_rq> {
} _allow_friend_rq_default_instance_;
class allow_friend_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<allow_friend_rs> {
} _allow_friend_rs_default_instance_;
class allow_friend_ntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<allow_friend_nt> {
} _allow_friend_nt_default_instance_;
class query_friends_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<query_friends_rq> {
} _query_friends_rq_default_instance_;
class query_friends_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<query_friends_rs> {
} _query_friends_rs_default_instance_;
class rename_friend_remark_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rename_friend_remark_rq> {
} _rename_friend_remark_rq_default_instance_;
class rename_friend_remark_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rename_friend_remark_rs> {
} _rename_friend_remark_rs_default_instance_;
class rename_friend_group_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rename_friend_group_rq> {
} _rename_friend_group_rq_default_instance_;
class rename_friend_group_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rename_friend_group_rs> {
} _rename_friend_group_rs_default_instance_;
class talk_friend_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<talk_friend_rq> {
} _talk_friend_rq_default_instance_;
class talk_friend_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<talk_friend_rs> {
} _talk_friend_rs_default_instance_;
class talk_friend_ntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<talk_friend_nt> {
} _talk_friend_nt_default_instance_;

namespace protobuf_c_5fbusiness_5frelation_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[20];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, user_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, user_remark_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rq, user_myself_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rq, user_add_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rq, description_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_rs, user_add_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_nt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_nt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_nt, apply_user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_friend_nt, description_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_rq, user_myself_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_rq, user_delete_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_rs, user_delete_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_nt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_nt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(delete_friend_nt, apply_user_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rq, user_myself_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rq, user_allow_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rq, opcode_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rs, user_allow_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_rs, opcode_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_nt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_nt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_nt, allow_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allow_friend_nt, opcode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_friends_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_friends_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_friends_rq, user_myself_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_friends_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_friends_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_friends_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(query_friends_rs, friend_info_s_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rq, user_myself_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rq, user_friend_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rq, user_friend_remark_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rs, user_friend_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_remark_rs, user_friend_remark_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rq, user_myself_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rq, user_friend_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rq, user_friend_group_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rs, user_friend_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rename_friend_group_rs, user_friend_group_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rq, user_myself_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rq, user_talk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rq, talking_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_rs, user_talk_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_nt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_nt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_nt, apply_talk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_friend_nt, talking_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(friend_info)},
  { 11, 19, sizeof(add_friend_rq)},
  { 22, 29, sizeof(add_friend_rs)},
  { 31, 38, sizeof(add_friend_nt)},
  { 40, 47, sizeof(delete_friend_rq)},
  { 49, 56, sizeof(delete_friend_rs)},
  { 58, 64, sizeof(delete_friend_nt)},
  { 65, 73, sizeof(allow_friend_rq)},
  { 76, 84, sizeof(allow_friend_rs)},
  { 87, 94, sizeof(allow_friend_nt)},
  { 96, 102, sizeof(query_friends_rq)},
  { 103, 110, sizeof(query_friends_rs)},
  { 112, 120, sizeof(rename_friend_remark_rq)},
  { 123, 131, sizeof(rename_friend_remark_rs)},
  { 134, 142, sizeof(rename_friend_group_rq)},
  { 145, 153, sizeof(rename_friend_group_rs)},
  { 156, 164, sizeof(talk_friend_rq)},
  { 167, 174, sizeof(talk_friend_rs)},
  { 176, 183, sizeof(talk_friend_nt)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_friend_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_friend_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_friend_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_friend_nt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_delete_friend_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_delete_friend_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_delete_friend_nt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_allow_friend_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_allow_friend_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_allow_friend_nt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_query_friends_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_query_friends_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rename_friend_remark_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rename_friend_remark_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rename_friend_group_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rename_friend_group_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_talk_friend_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_talk_friend_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_talk_friend_nt_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "c_business_relation.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _friend_info_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _add_friend_rq_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _add_friend_rs_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _add_friend_nt_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _delete_friend_rq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _delete_friend_rs_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _delete_friend_nt_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _allow_friend_rq_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _allow_friend_rs_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _allow_friend_nt_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _query_friends_rq_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _query_friends_rs_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _rename_friend_remark_rq_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _rename_friend_remark_rs_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _rename_friend_group_rq_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _rename_friend_group_rs_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _talk_friend_rq_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _talk_friend_rs_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _talk_friend_nt_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::b_error::protobuf_b_5ferror_2eproto::InitDefaults();
  ::b_business_account::protobuf_b_5fbusiness_5faccount_2eproto::InitDefaults();
  _friend_info_default_instance_.DefaultConstruct();
  _add_friend_rq_default_instance_.DefaultConstruct();
  _add_friend_rs_default_instance_.DefaultConstruct();
  _add_friend_nt_default_instance_.DefaultConstruct();
  _delete_friend_rq_default_instance_.DefaultConstruct();
  _delete_friend_rs_default_instance_.DefaultConstruct();
  _delete_friend_nt_default_instance_.DefaultConstruct();
  _allow_friend_rq_default_instance_.DefaultConstruct();
  _allow_friend_rs_default_instance_.DefaultConstruct();
  _allow_friend_nt_default_instance_.DefaultConstruct();
  _query_friends_rq_default_instance_.DefaultConstruct();
  _query_friends_rs_default_instance_.DefaultConstruct();
  _rename_friend_remark_rq_default_instance_.DefaultConstruct();
  _rename_friend_remark_rs_default_instance_.DefaultConstruct();
  _rename_friend_group_rq_default_instance_.DefaultConstruct();
  _rename_friend_group_rs_default_instance_.DefaultConstruct();
  _talk_friend_rq_default_instance_.DefaultConstruct();
  _talk_friend_rs_default_instance_.DefaultConstruct();
  _talk_friend_nt_default_instance_.DefaultConstruct();
  _friend_info_default_instance_.get_mutable()->user_info_ = const_cast< ::b_business_account::user_info*>(
      ::b_business_account::user_info::internal_default_instance());
  _add_friend_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _add_friend_nt_default_instance_.get_mutable()->apply_user_info_ = const_cast< ::b_business_account::user_info*>(
      ::b_business_account::user_info::internal_default_instance());
  _delete_friend_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _allow_friend_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _query_friends_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _rename_friend_remark_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _rename_friend_group_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _talk_friend_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031c_business_relation.proto\022\023c_business_"
      "relation\032\rb_error.proto\032\030b_business_acco"
      "unt.proto\"h\n\013friend_info\0220\n\tuser_info\030\001 "
      "\002(\0132\035.b_business_account.user_info\022\022\n\nus"
      "er_group\030\002 \001(\t\022\023\n\013user_remark\030\003 \001(\t\"c\n\ra"
      "dd_friend_rq\022\026\n\016user_myself_id\030\001 \002(\004\022\023\n\013"
      "user_add_id\030\002 \002(\004\022\023\n\013description\030\003 \002(\t\"\020"
      "\n\003msg\022\t\n\002id\020\221\302\200\020\"T\n\radd_friend_rs\022\034\n\005err"
      "or\030\001 \002(\0132\r.b_error.info\022\023\n\013user_add_id\030\002"
      " \002(\004\"\020\n\003msg\022\t\n\002id\020\222\302\200\020\"n\n\radd_friend_nt\022"
      "6\n\017apply_user_info\030\001 \002(\0132\035.b_business_ac"
      "count.user_info\022\023\n\013description\030\003 \002(\t\"\020\n\003"
      "msg\022\t\n\002id\020\201\303\200\020\"T\n\020delete_friend_rq\022\026\n\016us"
      "er_myself_id\030\001 \002(\004\022\026\n\016user_delete_id\030\002 \002"
      "(\004\"\020\n\003msg\022\t\n\002id\020\223\302\200\020\"Z\n\020delete_friend_rs"
      "\022\034\n\005error\030\001 \002(\0132\r.b_error.info\022\026\n\016user_d"
      "elete_id\030\002 \002(\004\"\020\n\003msg\022\t\n\002id\020\224\302\200\020\";\n\020dele"
      "te_friend_nt\022\025\n\rapply_user_id\030\001 \002(\004\"\020\n\003m"
      "sg\022\t\n\002id\020\202\303\200\020\"\205\001\n\017allow_friend_rq\022\026\n\016use"
      "r_myself_id\030\001 \002(\004\022\025\n\ruser_allow_id\030\002 \002(\004"
      "\022\016\n\006opcode\030\003 \002(\r\"\020\n\003msg\022\t\n\002id\020\225\302\200\020\"!\n\010op"
      "code_t\022\t\n\005allow\020\001\022\n\n\006refuse\020\002\"h\n\017allow_f"
      "riend_rs\022\034\n\005error\030\001 \002(\0132\r.b_error.info\022\025"
      "\n\ruser_allow_id\030\002 \002(\004\022\016\n\006opcode\030\003 \002(\r\"\020\n"
      "\003msg\022\t\n\002id\020\226\302\200\020\"J\n\017allow_friend_nt\022\025\n\ral"
      "low_user_id\030\001 \002(\004\022\016\n\006opcode\030\002 \002(\r\"\020\n\003msg"
      "\022\t\n\002id\020\203\303\200\020\"<\n\020query_friends_rq\022\026\n\016user_"
      "myself_id\030\001 \002(\004\"\020\n\003msg\022\t\n\002id\020\227\302\200\020\"{\n\020que"
      "ry_friends_rs\022\034\n\005error\030\001 \002(\0132\r.b_error.i"
      "nfo\0227\n\rfriend_info_s\030\002 \003(\0132 .c_business_"
      "relation.friend_info\"\020\n\003msg\022\t\n\002id\020\230\302\200\020\"w"
      "\n\027rename_friend_remark_rq\022\026\n\016user_myself"
      "_id\030\001 \002(\004\022\026\n\016user_friend_id\030\002 \002(\004\022\032\n\022use"
      "r_friend_remark\030\003 \002(\t\"\020\n\003msg\022\t\n\002id\020\231\302\200\020\""
      "}\n\027rename_friend_remark_rs\022\034\n\005error\030\001 \002("
      "\0132\r.b_error.info\022\026\n\016user_friend_id\030\002 \002(\004"
      "\022\032\n\022user_friend_remark\030\003 \002(\t\"\020\n\003msg\022\t\n\002i"
      "d\020\240\302\200\020\"u\n\026rename_friend_group_rq\022\026\n\016user"
      "_myself_id\030\001 \002(\004\022\026\n\016user_friend_id\030\002 \002(\004"
      "\022\031\n\021user_friend_group\030\003 \002(\t\"\020\n\003msg\022\t\n\002id"
      "\020\241\302\200\020\"{\n\026rename_friend_group_rs\022\034\n\005error"
      "\030\001 \002(\0132\r.b_error.info\022\026\n\016user_friend_id\030"
      "\002 \002(\004\022\031\n\021user_friend_group\030\003 \002(\t\"\020\n\003msg\022"
      "\t\n\002id\020\242\302\200\020\"a\n\016talk_friend_rq\022\026\n\016user_mys"
      "elf_id\030\001 \002(\004\022\024\n\014user_talk_id\030\002 \002(\004\022\017\n\007ta"
      "lking\030\003 \002(\t\"\020\n\003msg\022\t\n\002id\020\243\302\200\020\"V\n\016talk_fr"
      "iend_rs\022\034\n\005error\030\001 \002(\0132\r.b_error.info\022\024\n"
      "\014user_talk_id\030\002 \002(\004\"\020\n\003msg\022\t\n\002id\020\244\302\200\020\"J\n"
      "\016talk_friend_nt\022\025\n\rapply_talk_id\030\001 \002(\004\022\017"
      "\n\007talking\030\002 \002(\t\"\020\n\003msg\022\t\n\002id\020\204\303\200\020*#\n\003msg"
      "\022\r\n\006min_id\020\200\302\200\020\022\r\n\006max_id\020\377\303\200\020Bj\n\010protod"
      "efB\023c_business_relationZ\034protodef/c_busi"
      "ness_relation\242\002\024C_business_relation_\252\002\023c"
      "_business_relation"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "c_business_relation.proto", &protobuf_RegisterTypes);
  ::b_error::protobuf_b_5ferror_2eproto::AddDescriptors();
  ::b_business_account::protobuf_b_5fbusiness_5faccount_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_c_5fbusiness_5frelation_2eproto

const ::google::protobuf::EnumDescriptor* add_friend_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[0];
}
bool add_friend_rq_msg_IsValid(int value) {
  switch (value) {
    case 33562897:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const add_friend_rq_msg add_friend_rq::id;
const add_friend_rq_msg add_friend_rq::msg_MIN;
const add_friend_rq_msg add_friend_rq::msg_MAX;
const int add_friend_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* add_friend_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[1];
}
bool add_friend_rs_msg_IsValid(int value) {
  switch (value) {
    case 33562898:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const add_friend_rs_msg add_friend_rs::id;
const add_friend_rs_msg add_friend_rs::msg_MIN;
const add_friend_rs_msg add_friend_rs::msg_MAX;
const int add_friend_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* add_friend_nt_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[2];
}
bool add_friend_nt_msg_IsValid(int value) {
  switch (value) {
    case 33563009:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const add_friend_nt_msg add_friend_nt::id;
const add_friend_nt_msg add_friend_nt::msg_MIN;
const add_friend_nt_msg add_friend_nt::msg_MAX;
const int add_friend_nt::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* delete_friend_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[3];
}
bool delete_friend_rq_msg_IsValid(int value) {
  switch (value) {
    case 33562899:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const delete_friend_rq_msg delete_friend_rq::id;
const delete_friend_rq_msg delete_friend_rq::msg_MIN;
const delete_friend_rq_msg delete_friend_rq::msg_MAX;
const int delete_friend_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* delete_friend_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[4];
}
bool delete_friend_rs_msg_IsValid(int value) {
  switch (value) {
    case 33562900:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const delete_friend_rs_msg delete_friend_rs::id;
const delete_friend_rs_msg delete_friend_rs::msg_MIN;
const delete_friend_rs_msg delete_friend_rs::msg_MAX;
const int delete_friend_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* delete_friend_nt_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[5];
}
bool delete_friend_nt_msg_IsValid(int value) {
  switch (value) {
    case 33563010:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const delete_friend_nt_msg delete_friend_nt::id;
const delete_friend_nt_msg delete_friend_nt::msg_MIN;
const delete_friend_nt_msg delete_friend_nt::msg_MAX;
const int delete_friend_nt::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* allow_friend_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[6];
}
bool allow_friend_rq_msg_IsValid(int value) {
  switch (value) {
    case 33562901:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const allow_friend_rq_msg allow_friend_rq::id;
const allow_friend_rq_msg allow_friend_rq::msg_MIN;
const allow_friend_rq_msg allow_friend_rq::msg_MAX;
const int allow_friend_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* allow_friend_rq_opcode_t_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[7];
}
bool allow_friend_rq_opcode_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const allow_friend_rq_opcode_t allow_friend_rq::allow;
const allow_friend_rq_opcode_t allow_friend_rq::refuse;
const allow_friend_rq_opcode_t allow_friend_rq::opcode_t_MIN;
const allow_friend_rq_opcode_t allow_friend_rq::opcode_t_MAX;
const int allow_friend_rq::opcode_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* allow_friend_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[8];
}
bool allow_friend_rs_msg_IsValid(int value) {
  switch (value) {
    case 33562902:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const allow_friend_rs_msg allow_friend_rs::id;
const allow_friend_rs_msg allow_friend_rs::msg_MIN;
const allow_friend_rs_msg allow_friend_rs::msg_MAX;
const int allow_friend_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* allow_friend_nt_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[9];
}
bool allow_friend_nt_msg_IsValid(int value) {
  switch (value) {
    case 33563011:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const allow_friend_nt_msg allow_friend_nt::id;
const allow_friend_nt_msg allow_friend_nt::msg_MIN;
const allow_friend_nt_msg allow_friend_nt::msg_MAX;
const int allow_friend_nt::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* query_friends_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[10];
}
bool query_friends_rq_msg_IsValid(int value) {
  switch (value) {
    case 33562903:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const query_friends_rq_msg query_friends_rq::id;
const query_friends_rq_msg query_friends_rq::msg_MIN;
const query_friends_rq_msg query_friends_rq::msg_MAX;
const int query_friends_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* query_friends_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[11];
}
bool query_friends_rs_msg_IsValid(int value) {
  switch (value) {
    case 33562904:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const query_friends_rs_msg query_friends_rs::id;
const query_friends_rs_msg query_friends_rs::msg_MIN;
const query_friends_rs_msg query_friends_rs::msg_MAX;
const int query_friends_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* rename_friend_remark_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[12];
}
bool rename_friend_remark_rq_msg_IsValid(int value) {
  switch (value) {
    case 33562905:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const rename_friend_remark_rq_msg rename_friend_remark_rq::id;
const rename_friend_remark_rq_msg rename_friend_remark_rq::msg_MIN;
const rename_friend_remark_rq_msg rename_friend_remark_rq::msg_MAX;
const int rename_friend_remark_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* rename_friend_remark_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[13];
}
bool rename_friend_remark_rs_msg_IsValid(int value) {
  switch (value) {
    case 33562912:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const rename_friend_remark_rs_msg rename_friend_remark_rs::id;
const rename_friend_remark_rs_msg rename_friend_remark_rs::msg_MIN;
const rename_friend_remark_rs_msg rename_friend_remark_rs::msg_MAX;
const int rename_friend_remark_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* rename_friend_group_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[14];
}
bool rename_friend_group_rq_msg_IsValid(int value) {
  switch (value) {
    case 33562913:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const rename_friend_group_rq_msg rename_friend_group_rq::id;
const rename_friend_group_rq_msg rename_friend_group_rq::msg_MIN;
const rename_friend_group_rq_msg rename_friend_group_rq::msg_MAX;
const int rename_friend_group_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* rename_friend_group_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[15];
}
bool rename_friend_group_rs_msg_IsValid(int value) {
  switch (value) {
    case 33562914:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const rename_friend_group_rs_msg rename_friend_group_rs::id;
const rename_friend_group_rs_msg rename_friend_group_rs::msg_MIN;
const rename_friend_group_rs_msg rename_friend_group_rs::msg_MAX;
const int rename_friend_group_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* talk_friend_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[16];
}
bool talk_friend_rq_msg_IsValid(int value) {
  switch (value) {
    case 33562915:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const talk_friend_rq_msg talk_friend_rq::id;
const talk_friend_rq_msg talk_friend_rq::msg_MIN;
const talk_friend_rq_msg talk_friend_rq::msg_MAX;
const int talk_friend_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* talk_friend_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[17];
}
bool talk_friend_rs_msg_IsValid(int value) {
  switch (value) {
    case 33562916:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const talk_friend_rs_msg talk_friend_rs::id;
const talk_friend_rs_msg talk_friend_rs::msg_MIN;
const talk_friend_rs_msg talk_friend_rs::msg_MAX;
const int talk_friend_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* talk_friend_nt_msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[18];
}
bool talk_friend_nt_msg_IsValid(int value) {
  switch (value) {
    case 33563012:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const talk_friend_nt_msg talk_friend_nt::id;
const talk_friend_nt_msg talk_friend_nt::msg_MIN;
const talk_friend_nt_msg talk_friend_nt::msg_MAX;
const int talk_friend_nt::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* msg_descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_enum_descriptors[19];
}
bool msg_IsValid(int value) {
  switch (value) {
    case 33562880:
    case 33563135:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int friend_info::kUserInfoFieldNumber;
const int friend_info::kUserGroupFieldNumber;
const int friend_info::kUserRemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

friend_info::friend_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.friend_info)
}
friend_info::friend_info(const friend_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_group()) {
    user_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_group_);
  }
  user_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_remark()) {
    user_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_remark_);
  }
  if (from.has_user_info()) {
    user_info_ = new ::b_business_account::user_info(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:c_business_relation.friend_info)
}

void friend_info::SharedCtor() {
  _cached_size_ = 0;
  user_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_ = NULL;
}

friend_info::~friend_info() {
  // @@protoc_insertion_point(destructor:c_business_relation.friend_info)
  SharedDtor();
}

void friend_info::SharedDtor() {
  user_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete user_info_;
  }
}

void friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_info::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const friend_info& friend_info::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

friend_info* friend_info::New(::google::protobuf::Arena* arena) const {
  friend_info* n = new friend_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void friend_info::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.friend_info)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_group()) {
      GOOGLE_DCHECK(!user_group_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_group_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_remark()) {
      GOOGLE_DCHECK(!user_remark_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_remark_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_info()) {
      GOOGLE_DCHECK(user_info_ != NULL);
      user_info_->::b_business_account::user_info::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.friend_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_business_account.user_info user_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_group().data(), this->user_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.friend_info.user_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_remark = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_remark().data(), this->user_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.friend_info.user_remark");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.friend_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.friend_info)
  return false;
#undef DO_
}

void friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.friend_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_business_account.user_info user_info = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_info_, output);
  }

  // optional string user_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_group().data(), this->user_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.friend_info.user_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_group(), output);
  }

  // optional string user_remark = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_remark().data(), this->user_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.friend_info.user_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_remark(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.friend_info)
}

::google::protobuf::uint8* friend_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.friend_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_business_account.user_info user_info = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_info_, deterministic, target);
  }

  // optional string user_group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_group().data(), this->user_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.friend_info.user_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_group(), target);
  }

  // optional string user_remark = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_remark().data(), this->user_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.friend_info.user_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_remark(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.friend_info)
  return target;
}

size_t friend_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.friend_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .b_business_account.user_info user_info = 1;
  if (has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_info_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string user_group = 2;
    if (has_user_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_group());
    }

    // optional string user_remark = 3;
    if (has_user_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_remark());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.friend_info)
  GOOGLE_DCHECK_NE(&from, this);
  const friend_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const friend_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.friend_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.friend_info)
    MergeFrom(*source);
  }
}

void friend_info::MergeFrom(const friend_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.friend_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_group();
      user_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_remark();
      user_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_remark_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user_info()->::b_business_account::user_info::MergeFrom(from.user_info());
    }
  }
}

void friend_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.friend_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_info::CopyFrom(const friend_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.friend_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  return true;
}

void friend_info::Swap(friend_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void friend_info::InternalSwap(friend_info* other) {
  user_group_.Swap(&other->user_group_);
  user_remark_.Swap(&other->user_remark_);
  std::swap(user_info_, other->user_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata friend_info::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// friend_info

// required .b_business_account.user_info user_info = 1;
bool friend_info::has_user_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void friend_info::set_has_user_info() {
  _has_bits_[0] |= 0x00000004u;
}
void friend_info::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void friend_info::clear_user_info() {
  if (user_info_ != NULL) user_info_->::b_business_account::user_info::Clear();
  clear_has_user_info();
}
const ::b_business_account::user_info& friend_info::user_info() const {
  // @@protoc_insertion_point(field_get:c_business_relation.friend_info.user_info)
  return user_info_ != NULL ? *user_info_
                         : *::b_business_account::user_info::internal_default_instance();
}
::b_business_account::user_info* friend_info::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::b_business_account::user_info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.friend_info.user_info)
  return user_info_;
}
::b_business_account::user_info* friend_info::release_user_info() {
  // @@protoc_insertion_point(field_release:c_business_relation.friend_info.user_info)
  clear_has_user_info();
  ::b_business_account::user_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void friend_info::set_allocated_user_info(::b_business_account::user_info* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.friend_info.user_info)
}

// optional string user_group = 2;
bool friend_info::has_user_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void friend_info::set_has_user_group() {
  _has_bits_[0] |= 0x00000001u;
}
void friend_info::clear_has_user_group() {
  _has_bits_[0] &= ~0x00000001u;
}
void friend_info::clear_user_group() {
  user_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_group();
}
const ::std::string& friend_info::user_group() const {
  // @@protoc_insertion_point(field_get:c_business_relation.friend_info.user_group)
  return user_group_.GetNoArena();
}
void friend_info::set_user_group(const ::std::string& value) {
  set_has_user_group();
  user_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.friend_info.user_group)
}
#if LANG_CXX11
void friend_info::set_user_group(::std::string&& value) {
  set_has_user_group();
  user_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.friend_info.user_group)
}
#endif
void friend_info::set_user_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_group();
  user_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.friend_info.user_group)
}
void friend_info::set_user_group(const char* value, size_t size) {
  set_has_user_group();
  user_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.friend_info.user_group)
}
::std::string* friend_info::mutable_user_group() {
  set_has_user_group();
  // @@protoc_insertion_point(field_mutable:c_business_relation.friend_info.user_group)
  return user_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* friend_info::release_user_group() {
  // @@protoc_insertion_point(field_release:c_business_relation.friend_info.user_group)
  clear_has_user_group();
  return user_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void friend_info::set_allocated_user_group(::std::string* user_group) {
  if (user_group != NULL) {
    set_has_user_group();
  } else {
    clear_has_user_group();
  }
  user_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_group);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.friend_info.user_group)
}

// optional string user_remark = 3;
bool friend_info::has_user_remark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void friend_info::set_has_user_remark() {
  _has_bits_[0] |= 0x00000002u;
}
void friend_info::clear_has_user_remark() {
  _has_bits_[0] &= ~0x00000002u;
}
void friend_info::clear_user_remark() {
  user_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_remark();
}
const ::std::string& friend_info::user_remark() const {
  // @@protoc_insertion_point(field_get:c_business_relation.friend_info.user_remark)
  return user_remark_.GetNoArena();
}
void friend_info::set_user_remark(const ::std::string& value) {
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.friend_info.user_remark)
}
#if LANG_CXX11
void friend_info::set_user_remark(::std::string&& value) {
  set_has_user_remark();
  user_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.friend_info.user_remark)
}
#endif
void friend_info::set_user_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.friend_info.user_remark)
}
void friend_info::set_user_remark(const char* value, size_t size) {
  set_has_user_remark();
  user_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.friend_info.user_remark)
}
::std::string* friend_info::mutable_user_remark() {
  set_has_user_remark();
  // @@protoc_insertion_point(field_mutable:c_business_relation.friend_info.user_remark)
  return user_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* friend_info::release_user_remark() {
  // @@protoc_insertion_point(field_release:c_business_relation.friend_info.user_remark)
  clear_has_user_remark();
  return user_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void friend_info::set_allocated_user_remark(::std::string* user_remark) {
  if (user_remark != NULL) {
    set_has_user_remark();
  } else {
    clear_has_user_remark();
  }
  user_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_remark);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.friend_info.user_remark)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_friend_rq::kUserMyselfIdFieldNumber;
const int add_friend_rq::kUserAddIdFieldNumber;
const int add_friend_rq::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_friend_rq::add_friend_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.add_friend_rq)
}
add_friend_rq::add_friend_rq(const add_friend_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&user_myself_id_, &from.user_myself_id_,
    reinterpret_cast<char*>(&user_add_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_add_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_relation.add_friend_rq)
}

void add_friend_rq::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_add_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_add_id_));
}

add_friend_rq::~add_friend_rq() {
  // @@protoc_insertion_point(destructor:c_business_relation.add_friend_rq)
  SharedDtor();
}

void add_friend_rq::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void add_friend_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_friend_rq::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_friend_rq& add_friend_rq::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_friend_rq* add_friend_rq::New(::google::protobuf::Arena* arena) const {
  add_friend_rq* n = new add_friend_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_friend_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.add_friend_rq)
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_add_id_) -
      reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_add_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_friend_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.add_friend_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_myself_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_myself_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_myself_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_add_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_add_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_add_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.add_friend_rq.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.add_friend_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.add_friend_rq)
  return false;
#undef DO_
}

void add_friend_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.add_friend_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_myself_id(), output);
  }

  // required uint64 user_add_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_add_id(), output);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.add_friend_rq.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.add_friend_rq)
}

::google::protobuf::uint8* add_friend_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.add_friend_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_myself_id(), target);
  }

  // required uint64 user_add_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_add_id(), target);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.add_friend_rq.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.add_friend_rq)
  return target;
}

size_t add_friend_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.add_friend_rq)
  size_t total_size = 0;

  if (has_description()) {
    // required string description = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_user_myself_id()) {
    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());
  }

  if (has_user_add_id()) {
    // required uint64 user_add_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_add_id());
  }

  return total_size;
}
size_t add_friend_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.add_friend_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());

    // required uint64 user_add_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_add_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_friend_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.add_friend_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const add_friend_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_friend_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.add_friend_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.add_friend_rq)
    MergeFrom(*source);
  }
}

void add_friend_rq::MergeFrom(const add_friend_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.add_friend_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_myself_id_ = from.user_myself_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_add_id_ = from.user_add_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void add_friend_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.add_friend_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_friend_rq::CopyFrom(const add_friend_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.add_friend_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_friend_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void add_friend_rq::Swap(add_friend_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_friend_rq::InternalSwap(add_friend_rq* other) {
  description_.Swap(&other->description_);
  std::swap(user_myself_id_, other->user_myself_id_);
  std::swap(user_add_id_, other->user_add_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_friend_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_friend_rq

// required uint64 user_myself_id = 1;
bool add_friend_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void add_friend_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000002u;
}
void add_friend_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void add_friend_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
::google::protobuf::uint64 add_friend_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rq.user_myself_id)
  return user_myself_id_;
}
void add_friend_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rq.user_myself_id)
}

// required uint64 user_add_id = 2;
bool add_friend_rq::has_user_add_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void add_friend_rq::set_has_user_add_id() {
  _has_bits_[0] |= 0x00000004u;
}
void add_friend_rq::clear_has_user_add_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void add_friend_rq::clear_user_add_id() {
  user_add_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_add_id();
}
::google::protobuf::uint64 add_friend_rq::user_add_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rq.user_add_id)
  return user_add_id_;
}
void add_friend_rq::set_user_add_id(::google::protobuf::uint64 value) {
  set_has_user_add_id();
  user_add_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rq.user_add_id)
}

// required string description = 3;
bool add_friend_rq::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_friend_rq::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void add_friend_rq::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_friend_rq::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& add_friend_rq::description() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rq.description)
  return description_.GetNoArena();
}
void add_friend_rq::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rq.description)
}
#if LANG_CXX11
void add_friend_rq::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.add_friend_rq.description)
}
#endif
void add_friend_rq::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.add_friend_rq.description)
}
void add_friend_rq::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.add_friend_rq.description)
}
::std::string* add_friend_rq::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_rq.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* add_friend_rq::release_description() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_rq.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void add_friend_rq::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_rq.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_friend_rs::kErrorFieldNumber;
const int add_friend_rs::kUserAddIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_friend_rs::add_friend_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.add_friend_rs)
}
add_friend_rs::add_friend_rs(const add_friend_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  user_add_id_ = from.user_add_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_relation.add_friend_rs)
}

void add_friend_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&user_add_id_) -
    reinterpret_cast<char*>(&error_) + sizeof(user_add_id_));
}

add_friend_rs::~add_friend_rs() {
  // @@protoc_insertion_point(destructor:c_business_relation.add_friend_rs)
  SharedDtor();
}

void add_friend_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void add_friend_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_friend_rs::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_friend_rs& add_friend_rs::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_friend_rs* add_friend_rs::New(::google::protobuf::Arena* arena) const {
  add_friend_rs* n = new add_friend_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_friend_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.add_friend_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  user_add_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_friend_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.add_friend_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_add_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_add_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_add_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.add_friend_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.add_friend_rs)
  return false;
#undef DO_
}

void add_friend_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.add_friend_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_add_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_add_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.add_friend_rs)
}

::google::protobuf::uint8* add_friend_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.add_friend_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_add_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_add_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.add_friend_rs)
  return target;
}

size_t add_friend_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.add_friend_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_add_id()) {
    // required uint64 user_add_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_add_id());
  }

  return total_size;
}
size_t add_friend_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.add_friend_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_add_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_add_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_friend_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.add_friend_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const add_friend_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_friend_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.add_friend_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.add_friend_rs)
    MergeFrom(*source);
  }
}

void add_friend_rs::MergeFrom(const add_friend_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.add_friend_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      user_add_id_ = from.user_add_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void add_friend_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.add_friend_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_friend_rs::CopyFrom(const add_friend_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.add_friend_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_friend_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void add_friend_rs::Swap(add_friend_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_friend_rs::InternalSwap(add_friend_rs* other) {
  std::swap(error_, other->error_);
  std::swap(user_add_id_, other->user_add_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_friend_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_friend_rs

// required .b_error.info error = 1;
bool add_friend_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_friend_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void add_friend_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_friend_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& add_friend_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* add_friend_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_rs.error)
  return error_;
}
::b_error::info* add_friend_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void add_friend_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_rs.error)
}

// required uint64 user_add_id = 2;
bool add_friend_rs::has_user_add_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void add_friend_rs::set_has_user_add_id() {
  _has_bits_[0] |= 0x00000002u;
}
void add_friend_rs::clear_has_user_add_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void add_friend_rs::clear_user_add_id() {
  user_add_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_add_id();
}
::google::protobuf::uint64 add_friend_rs::user_add_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_rs.user_add_id)
  return user_add_id_;
}
void add_friend_rs::set_user_add_id(::google::protobuf::uint64 value) {
  set_has_user_add_id();
  user_add_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_rs.user_add_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_friend_nt::kApplyUserInfoFieldNumber;
const int add_friend_nt::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_friend_nt::add_friend_nt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.add_friend_nt)
}
add_friend_nt::add_friend_nt(const add_friend_nt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_apply_user_info()) {
    apply_user_info_ = new ::b_business_account::user_info(*from.apply_user_info_);
  } else {
    apply_user_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:c_business_relation.add_friend_nt)
}

void add_friend_nt::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_user_info_ = NULL;
}

add_friend_nt::~add_friend_nt() {
  // @@protoc_insertion_point(destructor:c_business_relation.add_friend_nt)
  SharedDtor();
}

void add_friend_nt::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete apply_user_info_;
  }
}

void add_friend_nt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_friend_nt::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_friend_nt& add_friend_nt::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_friend_nt* add_friend_nt::New(::google::protobuf::Arena* arena) const {
  add_friend_nt* n = new add_friend_nt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_friend_nt::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.add_friend_nt)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_apply_user_info()) {
      GOOGLE_DCHECK(apply_user_info_ != NULL);
      apply_user_info_->::b_business_account::user_info::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_friend_nt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.add_friend_nt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_business_account.user_info apply_user_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.add_friend_nt.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.add_friend_nt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.add_friend_nt)
  return false;
#undef DO_
}

void add_friend_nt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.add_friend_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_business_account.user_info apply_user_info = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->apply_user_info_, output);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.add_friend_nt.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.add_friend_nt)
}

::google::protobuf::uint8* add_friend_nt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.add_friend_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_business_account.user_info apply_user_info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->apply_user_info_, deterministic, target);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.add_friend_nt.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.add_friend_nt)
  return target;
}

size_t add_friend_nt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.add_friend_nt)
  size_t total_size = 0;

  if (has_description()) {
    // required string description = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_apply_user_info()) {
    // required .b_business_account.user_info apply_user_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->apply_user_info_);
  }

  return total_size;
}
size_t add_friend_nt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.add_friend_nt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string description = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required .b_business_account.user_info apply_user_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->apply_user_info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_friend_nt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.add_friend_nt)
  GOOGLE_DCHECK_NE(&from, this);
  const add_friend_nt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_friend_nt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.add_friend_nt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.add_friend_nt)
    MergeFrom(*source);
  }
}

void add_friend_nt::MergeFrom(const add_friend_nt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.add_friend_nt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_apply_user_info()->::b_business_account::user_info::MergeFrom(from.apply_user_info());
    }
  }
}

void add_friend_nt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.add_friend_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_friend_nt::CopyFrom(const add_friend_nt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.add_friend_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_friend_nt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_apply_user_info()) {
    if (!this->apply_user_info_->IsInitialized()) return false;
  }
  return true;
}

void add_friend_nt::Swap(add_friend_nt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_friend_nt::InternalSwap(add_friend_nt* other) {
  description_.Swap(&other->description_);
  std::swap(apply_user_info_, other->apply_user_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_friend_nt::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_friend_nt

// required .b_business_account.user_info apply_user_info = 1;
bool add_friend_nt::has_apply_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void add_friend_nt::set_has_apply_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
void add_friend_nt::clear_has_apply_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void add_friend_nt::clear_apply_user_info() {
  if (apply_user_info_ != NULL) apply_user_info_->::b_business_account::user_info::Clear();
  clear_has_apply_user_info();
}
const ::b_business_account::user_info& add_friend_nt::apply_user_info() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_nt.apply_user_info)
  return apply_user_info_ != NULL ? *apply_user_info_
                         : *::b_business_account::user_info::internal_default_instance();
}
::b_business_account::user_info* add_friend_nt::mutable_apply_user_info() {
  set_has_apply_user_info();
  if (apply_user_info_ == NULL) {
    apply_user_info_ = new ::b_business_account::user_info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_nt.apply_user_info)
  return apply_user_info_;
}
::b_business_account::user_info* add_friend_nt::release_apply_user_info() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_nt.apply_user_info)
  clear_has_apply_user_info();
  ::b_business_account::user_info* temp = apply_user_info_;
  apply_user_info_ = NULL;
  return temp;
}
void add_friend_nt::set_allocated_apply_user_info(::b_business_account::user_info* apply_user_info) {
  delete apply_user_info_;
  apply_user_info_ = apply_user_info;
  if (apply_user_info) {
    set_has_apply_user_info();
  } else {
    clear_has_apply_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_nt.apply_user_info)
}

// required string description = 3;
bool add_friend_nt::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_friend_nt::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void add_friend_nt::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_friend_nt::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& add_friend_nt::description() const {
  // @@protoc_insertion_point(field_get:c_business_relation.add_friend_nt.description)
  return description_.GetNoArena();
}
void add_friend_nt::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.add_friend_nt.description)
}
#if LANG_CXX11
void add_friend_nt::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.add_friend_nt.description)
}
#endif
void add_friend_nt::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.add_friend_nt.description)
}
void add_friend_nt::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.add_friend_nt.description)
}
::std::string* add_friend_nt::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:c_business_relation.add_friend_nt.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* add_friend_nt::release_description() {
  // @@protoc_insertion_point(field_release:c_business_relation.add_friend_nt.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void add_friend_nt::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.add_friend_nt.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int delete_friend_rq::kUserMyselfIdFieldNumber;
const int delete_friend_rq::kUserDeleteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

delete_friend_rq::delete_friend_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.delete_friend_rq)
}
delete_friend_rq::delete_friend_rq(const delete_friend_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_myself_id_, &from.user_myself_id_,
    reinterpret_cast<char*>(&user_delete_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_delete_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_relation.delete_friend_rq)
}

void delete_friend_rq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_delete_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_delete_id_));
}

delete_friend_rq::~delete_friend_rq() {
  // @@protoc_insertion_point(destructor:c_business_relation.delete_friend_rq)
  SharedDtor();
}

void delete_friend_rq::SharedDtor() {
}

void delete_friend_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delete_friend_rq::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const delete_friend_rq& delete_friend_rq::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

delete_friend_rq* delete_friend_rq::New(::google::protobuf::Arena* arena) const {
  delete_friend_rq* n = new delete_friend_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void delete_friend_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.delete_friend_rq)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_delete_id_) -
      reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_delete_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool delete_friend_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.delete_friend_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_myself_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_myself_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_myself_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_delete_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_delete_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_delete_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.delete_friend_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.delete_friend_rq)
  return false;
#undef DO_
}

void delete_friend_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.delete_friend_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_myself_id(), output);
  }

  // required uint64 user_delete_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_delete_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.delete_friend_rq)
}

::google::protobuf::uint8* delete_friend_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.delete_friend_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_myself_id(), target);
  }

  // required uint64 user_delete_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_delete_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.delete_friend_rq)
  return target;
}

size_t delete_friend_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.delete_friend_rq)
  size_t total_size = 0;

  if (has_user_myself_id()) {
    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());
  }

  if (has_user_delete_id()) {
    // required uint64 user_delete_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_delete_id());
  }

  return total_size;
}
size_t delete_friend_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.delete_friend_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());

    // required uint64 user_delete_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_delete_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delete_friend_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.delete_friend_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const delete_friend_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const delete_friend_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.delete_friend_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.delete_friend_rq)
    MergeFrom(*source);
  }
}

void delete_friend_rq::MergeFrom(const delete_friend_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.delete_friend_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      user_myself_id_ = from.user_myself_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_delete_id_ = from.user_delete_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void delete_friend_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.delete_friend_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delete_friend_rq::CopyFrom(const delete_friend_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.delete_friend_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delete_friend_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void delete_friend_rq::Swap(delete_friend_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void delete_friend_rq::InternalSwap(delete_friend_rq* other) {
  std::swap(user_myself_id_, other->user_myself_id_);
  std::swap(user_delete_id_, other->user_delete_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata delete_friend_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// delete_friend_rq

// required uint64 user_myself_id = 1;
bool delete_friend_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void delete_friend_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000001u;
}
void delete_friend_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void delete_friend_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
::google::protobuf::uint64 delete_friend_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_rq.user_myself_id)
  return user_myself_id_;
}
void delete_friend_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_rq.user_myself_id)
}

// required uint64 user_delete_id = 2;
bool delete_friend_rq::has_user_delete_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void delete_friend_rq::set_has_user_delete_id() {
  _has_bits_[0] |= 0x00000002u;
}
void delete_friend_rq::clear_has_user_delete_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void delete_friend_rq::clear_user_delete_id() {
  user_delete_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_delete_id();
}
::google::protobuf::uint64 delete_friend_rq::user_delete_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_rq.user_delete_id)
  return user_delete_id_;
}
void delete_friend_rq::set_user_delete_id(::google::protobuf::uint64 value) {
  set_has_user_delete_id();
  user_delete_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_rq.user_delete_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int delete_friend_rs::kErrorFieldNumber;
const int delete_friend_rs::kUserDeleteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

delete_friend_rs::delete_friend_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.delete_friend_rs)
}
delete_friend_rs::delete_friend_rs(const delete_friend_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  user_delete_id_ = from.user_delete_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_relation.delete_friend_rs)
}

void delete_friend_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&user_delete_id_) -
    reinterpret_cast<char*>(&error_) + sizeof(user_delete_id_));
}

delete_friend_rs::~delete_friend_rs() {
  // @@protoc_insertion_point(destructor:c_business_relation.delete_friend_rs)
  SharedDtor();
}

void delete_friend_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void delete_friend_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delete_friend_rs::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const delete_friend_rs& delete_friend_rs::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

delete_friend_rs* delete_friend_rs::New(::google::protobuf::Arena* arena) const {
  delete_friend_rs* n = new delete_friend_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void delete_friend_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.delete_friend_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  user_delete_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool delete_friend_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.delete_friend_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_delete_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_delete_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_delete_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.delete_friend_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.delete_friend_rs)
  return false;
#undef DO_
}

void delete_friend_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.delete_friend_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_delete_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_delete_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.delete_friend_rs)
}

::google::protobuf::uint8* delete_friend_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.delete_friend_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_delete_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_delete_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.delete_friend_rs)
  return target;
}

size_t delete_friend_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.delete_friend_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_delete_id()) {
    // required uint64 user_delete_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_delete_id());
  }

  return total_size;
}
size_t delete_friend_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.delete_friend_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_delete_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_delete_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delete_friend_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.delete_friend_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const delete_friend_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const delete_friend_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.delete_friend_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.delete_friend_rs)
    MergeFrom(*source);
  }
}

void delete_friend_rs::MergeFrom(const delete_friend_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.delete_friend_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      user_delete_id_ = from.user_delete_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void delete_friend_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.delete_friend_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delete_friend_rs::CopyFrom(const delete_friend_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.delete_friend_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delete_friend_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void delete_friend_rs::Swap(delete_friend_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void delete_friend_rs::InternalSwap(delete_friend_rs* other) {
  std::swap(error_, other->error_);
  std::swap(user_delete_id_, other->user_delete_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata delete_friend_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// delete_friend_rs

// required .b_error.info error = 1;
bool delete_friend_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void delete_friend_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void delete_friend_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void delete_friend_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& delete_friend_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* delete_friend_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.delete_friend_rs.error)
  return error_;
}
::b_error::info* delete_friend_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.delete_friend_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void delete_friend_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.delete_friend_rs.error)
}

// required uint64 user_delete_id = 2;
bool delete_friend_rs::has_user_delete_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void delete_friend_rs::set_has_user_delete_id() {
  _has_bits_[0] |= 0x00000002u;
}
void delete_friend_rs::clear_has_user_delete_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void delete_friend_rs::clear_user_delete_id() {
  user_delete_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_delete_id();
}
::google::protobuf::uint64 delete_friend_rs::user_delete_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_rs.user_delete_id)
  return user_delete_id_;
}
void delete_friend_rs::set_user_delete_id(::google::protobuf::uint64 value) {
  set_has_user_delete_id();
  user_delete_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_rs.user_delete_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int delete_friend_nt::kApplyUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

delete_friend_nt::delete_friend_nt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.delete_friend_nt)
}
delete_friend_nt::delete_friend_nt(const delete_friend_nt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  apply_user_id_ = from.apply_user_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_relation.delete_friend_nt)
}

void delete_friend_nt::SharedCtor() {
  _cached_size_ = 0;
  apply_user_id_ = GOOGLE_ULONGLONG(0);
}

delete_friend_nt::~delete_friend_nt() {
  // @@protoc_insertion_point(destructor:c_business_relation.delete_friend_nt)
  SharedDtor();
}

void delete_friend_nt::SharedDtor() {
}

void delete_friend_nt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* delete_friend_nt::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const delete_friend_nt& delete_friend_nt::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

delete_friend_nt* delete_friend_nt::New(::google::protobuf::Arena* arena) const {
  delete_friend_nt* n = new delete_friend_nt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void delete_friend_nt::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.delete_friend_nt)
  apply_user_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool delete_friend_nt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.delete_friend_nt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 apply_user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_apply_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.delete_friend_nt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.delete_friend_nt)
  return false;
#undef DO_
}

void delete_friend_nt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.delete_friend_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 apply_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apply_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.delete_friend_nt)
}

::google::protobuf::uint8* delete_friend_nt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.delete_friend_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 apply_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apply_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.delete_friend_nt)
  return target;
}

size_t delete_friend_nt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.delete_friend_nt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 apply_user_id = 1;
  if (has_apply_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->apply_user_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void delete_friend_nt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.delete_friend_nt)
  GOOGLE_DCHECK_NE(&from, this);
  const delete_friend_nt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const delete_friend_nt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.delete_friend_nt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.delete_friend_nt)
    MergeFrom(*source);
  }
}

void delete_friend_nt::MergeFrom(const delete_friend_nt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.delete_friend_nt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_apply_user_id()) {
    set_apply_user_id(from.apply_user_id());
  }
}

void delete_friend_nt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.delete_friend_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delete_friend_nt::CopyFrom(const delete_friend_nt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.delete_friend_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delete_friend_nt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void delete_friend_nt::Swap(delete_friend_nt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void delete_friend_nt::InternalSwap(delete_friend_nt* other) {
  std::swap(apply_user_id_, other->apply_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata delete_friend_nt::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// delete_friend_nt

// required uint64 apply_user_id = 1;
bool delete_friend_nt::has_apply_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void delete_friend_nt::set_has_apply_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void delete_friend_nt::clear_has_apply_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void delete_friend_nt::clear_apply_user_id() {
  apply_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_user_id();
}
::google::protobuf::uint64 delete_friend_nt::apply_user_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.delete_friend_nt.apply_user_id)
  return apply_user_id_;
}
void delete_friend_nt::set_apply_user_id(::google::protobuf::uint64 value) {
  set_has_apply_user_id();
  apply_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.delete_friend_nt.apply_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allow_friend_rq::kUserMyselfIdFieldNumber;
const int allow_friend_rq::kUserAllowIdFieldNumber;
const int allow_friend_rq::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allow_friend_rq::allow_friend_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.allow_friend_rq)
}
allow_friend_rq::allow_friend_rq(const allow_friend_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_myself_id_, &from.user_myself_id_,
    reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(opcode_));
  // @@protoc_insertion_point(copy_constructor:c_business_relation.allow_friend_rq)
}

void allow_friend_rq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(opcode_));
}

allow_friend_rq::~allow_friend_rq() {
  // @@protoc_insertion_point(destructor:c_business_relation.allow_friend_rq)
  SharedDtor();
}

void allow_friend_rq::SharedDtor() {
}

void allow_friend_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* allow_friend_rq::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const allow_friend_rq& allow_friend_rq::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

allow_friend_rq* allow_friend_rq::New(::google::protobuf::Arena* arena) const {
  allow_friend_rq* n = new allow_friend_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void allow_friend_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.allow_friend_rq)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&user_myself_id_) + sizeof(opcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool allow_friend_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.allow_friend_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_myself_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_myself_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_myself_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_allow_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_allow_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_allow_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 opcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.allow_friend_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.allow_friend_rq)
  return false;
#undef DO_
}

void allow_friend_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.allow_friend_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_myself_id(), output);
  }

  // required uint64 user_allow_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_allow_id(), output);
  }

  // required uint32 opcode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.allow_friend_rq)
}

::google::protobuf::uint8* allow_friend_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.allow_friend_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_myself_id(), target);
  }

  // required uint64 user_allow_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_allow_id(), target);
  }

  // required uint32 opcode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.allow_friend_rq)
  return target;
}

size_t allow_friend_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.allow_friend_rq)
  size_t total_size = 0;

  if (has_user_myself_id()) {
    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());
  }

  if (has_user_allow_id()) {
    // required uint64 user_allow_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_allow_id());
  }

  if (has_opcode()) {
    // required uint32 opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t allow_friend_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.allow_friend_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());

    // required uint64 user_allow_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_allow_id());

    // required uint32 opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void allow_friend_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.allow_friend_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const allow_friend_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const allow_friend_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.allow_friend_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.allow_friend_rq)
    MergeFrom(*source);
  }
}

void allow_friend_rq::MergeFrom(const allow_friend_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.allow_friend_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      user_myself_id_ = from.user_myself_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_allow_id_ = from.user_allow_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void allow_friend_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.allow_friend_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allow_friend_rq::CopyFrom(const allow_friend_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.allow_friend_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allow_friend_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void allow_friend_rq::Swap(allow_friend_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allow_friend_rq::InternalSwap(allow_friend_rq* other) {
  std::swap(user_myself_id_, other->user_myself_id_);
  std::swap(user_allow_id_, other->user_allow_id_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata allow_friend_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// allow_friend_rq

// required uint64 user_myself_id = 1;
bool allow_friend_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void allow_friend_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000001u;
}
void allow_friend_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void allow_friend_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
::google::protobuf::uint64 allow_friend_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.user_myself_id)
  return user_myself_id_;
}
void allow_friend_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.user_myself_id)
}

// required uint64 user_allow_id = 2;
bool allow_friend_rq::has_user_allow_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void allow_friend_rq::set_has_user_allow_id() {
  _has_bits_[0] |= 0x00000002u;
}
void allow_friend_rq::clear_has_user_allow_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void allow_friend_rq::clear_user_allow_id() {
  user_allow_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_allow_id();
}
::google::protobuf::uint64 allow_friend_rq::user_allow_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.user_allow_id)
  return user_allow_id_;
}
void allow_friend_rq::set_user_allow_id(::google::protobuf::uint64 value) {
  set_has_user_allow_id();
  user_allow_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.user_allow_id)
}

// required uint32 opcode = 3;
bool allow_friend_rq::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void allow_friend_rq::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
void allow_friend_rq::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void allow_friend_rq::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 allow_friend_rq::opcode() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rq.opcode)
  return opcode_;
}
void allow_friend_rq::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rq.opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allow_friend_rs::kErrorFieldNumber;
const int allow_friend_rs::kUserAllowIdFieldNumber;
const int allow_friend_rs::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allow_friend_rs::allow_friend_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.allow_friend_rs)
}
allow_friend_rs::allow_friend_rs(const allow_friend_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&user_allow_id_, &from.user_allow_id_,
    reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&user_allow_id_) + sizeof(opcode_));
  // @@protoc_insertion_point(copy_constructor:c_business_relation.allow_friend_rs)
}

void allow_friend_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&error_) + sizeof(opcode_));
}

allow_friend_rs::~allow_friend_rs() {
  // @@protoc_insertion_point(destructor:c_business_relation.allow_friend_rs)
  SharedDtor();
}

void allow_friend_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void allow_friend_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* allow_friend_rs::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const allow_friend_rs& allow_friend_rs::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

allow_friend_rs* allow_friend_rs::New(::google::protobuf::Arena* arena) const {
  allow_friend_rs* n = new allow_friend_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void allow_friend_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.allow_friend_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&user_allow_id_, 0, reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&user_allow_id_) + sizeof(opcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool allow_friend_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.allow_friend_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_allow_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_allow_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_allow_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 opcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.allow_friend_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.allow_friend_rs)
  return false;
#undef DO_
}

void allow_friend_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.allow_friend_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_allow_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_allow_id(), output);
  }

  // required uint32 opcode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.allow_friend_rs)
}

::google::protobuf::uint8* allow_friend_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.allow_friend_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_allow_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_allow_id(), target);
  }

  // required uint32 opcode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.allow_friend_rs)
  return target;
}

size_t allow_friend_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.allow_friend_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_allow_id()) {
    // required uint64 user_allow_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_allow_id());
  }

  if (has_opcode()) {
    // required uint32 opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t allow_friend_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.allow_friend_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_allow_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_allow_id());

    // required uint32 opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void allow_friend_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.allow_friend_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const allow_friend_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const allow_friend_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.allow_friend_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.allow_friend_rs)
    MergeFrom(*source);
  }
}

void allow_friend_rs::MergeFrom(const allow_friend_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.allow_friend_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      user_allow_id_ = from.user_allow_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void allow_friend_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.allow_friend_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allow_friend_rs::CopyFrom(const allow_friend_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.allow_friend_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allow_friend_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void allow_friend_rs::Swap(allow_friend_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allow_friend_rs::InternalSwap(allow_friend_rs* other) {
  std::swap(error_, other->error_);
  std::swap(user_allow_id_, other->user_allow_id_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata allow_friend_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// allow_friend_rs

// required .b_error.info error = 1;
bool allow_friend_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void allow_friend_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void allow_friend_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void allow_friend_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& allow_friend_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* allow_friend_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.allow_friend_rs.error)
  return error_;
}
::b_error::info* allow_friend_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.allow_friend_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void allow_friend_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.allow_friend_rs.error)
}

// required uint64 user_allow_id = 2;
bool allow_friend_rs::has_user_allow_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void allow_friend_rs::set_has_user_allow_id() {
  _has_bits_[0] |= 0x00000002u;
}
void allow_friend_rs::clear_has_user_allow_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void allow_friend_rs::clear_user_allow_id() {
  user_allow_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_allow_id();
}
::google::protobuf::uint64 allow_friend_rs::user_allow_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rs.user_allow_id)
  return user_allow_id_;
}
void allow_friend_rs::set_user_allow_id(::google::protobuf::uint64 value) {
  set_has_user_allow_id();
  user_allow_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rs.user_allow_id)
}

// required uint32 opcode = 3;
bool allow_friend_rs::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void allow_friend_rs::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
void allow_friend_rs::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void allow_friend_rs::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 allow_friend_rs::opcode() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_rs.opcode)
  return opcode_;
}
void allow_friend_rs::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_rs.opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allow_friend_nt::kAllowUserIdFieldNumber;
const int allow_friend_nt::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allow_friend_nt::allow_friend_nt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.allow_friend_nt)
}
allow_friend_nt::allow_friend_nt(const allow_friend_nt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allow_user_id_, &from.allow_user_id_,
    reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&allow_user_id_) + sizeof(opcode_));
  // @@protoc_insertion_point(copy_constructor:c_business_relation.allow_friend_nt)
}

void allow_friend_nt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&allow_user_id_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&allow_user_id_) + sizeof(opcode_));
}

allow_friend_nt::~allow_friend_nt() {
  // @@protoc_insertion_point(destructor:c_business_relation.allow_friend_nt)
  SharedDtor();
}

void allow_friend_nt::SharedDtor() {
}

void allow_friend_nt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* allow_friend_nt::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const allow_friend_nt& allow_friend_nt::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

allow_friend_nt* allow_friend_nt::New(::google::protobuf::Arena* arena) const {
  allow_friend_nt* n = new allow_friend_nt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void allow_friend_nt::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.allow_friend_nt)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&allow_user_id_, 0, reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&allow_user_id_) + sizeof(opcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool allow_friend_nt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.allow_friend_nt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 allow_user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_allow_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allow_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.allow_friend_nt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.allow_friend_nt)
  return false;
#undef DO_
}

void allow_friend_nt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.allow_friend_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 allow_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allow_user_id(), output);
  }

  // required uint32 opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.allow_friend_nt)
}

::google::protobuf::uint8* allow_friend_nt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.allow_friend_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 allow_user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allow_user_id(), target);
  }

  // required uint32 opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.allow_friend_nt)
  return target;
}

size_t allow_friend_nt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.allow_friend_nt)
  size_t total_size = 0;

  if (has_allow_user_id()) {
    // required uint64 allow_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->allow_user_id());
  }

  if (has_opcode()) {
    // required uint32 opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t allow_friend_nt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.allow_friend_nt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 allow_user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->allow_user_id());

    // required uint32 opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void allow_friend_nt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.allow_friend_nt)
  GOOGLE_DCHECK_NE(&from, this);
  const allow_friend_nt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const allow_friend_nt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.allow_friend_nt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.allow_friend_nt)
    MergeFrom(*source);
  }
}

void allow_friend_nt::MergeFrom(const allow_friend_nt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.allow_friend_nt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      allow_user_id_ = from.allow_user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void allow_friend_nt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.allow_friend_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allow_friend_nt::CopyFrom(const allow_friend_nt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.allow_friend_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allow_friend_nt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void allow_friend_nt::Swap(allow_friend_nt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allow_friend_nt::InternalSwap(allow_friend_nt* other) {
  std::swap(allow_user_id_, other->allow_user_id_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata allow_friend_nt::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// allow_friend_nt

// required uint64 allow_user_id = 1;
bool allow_friend_nt::has_allow_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void allow_friend_nt::set_has_allow_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void allow_friend_nt::clear_has_allow_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void allow_friend_nt::clear_allow_user_id() {
  allow_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_allow_user_id();
}
::google::protobuf::uint64 allow_friend_nt::allow_user_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_nt.allow_user_id)
  return allow_user_id_;
}
void allow_friend_nt::set_allow_user_id(::google::protobuf::uint64 value) {
  set_has_allow_user_id();
  allow_user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_nt.allow_user_id)
}

// required uint32 opcode = 2;
bool allow_friend_nt::has_opcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void allow_friend_nt::set_has_opcode() {
  _has_bits_[0] |= 0x00000002u;
}
void allow_friend_nt::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void allow_friend_nt::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 allow_friend_nt::opcode() const {
  // @@protoc_insertion_point(field_get:c_business_relation.allow_friend_nt.opcode)
  return opcode_;
}
void allow_friend_nt::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.allow_friend_nt.opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_friends_rq::kUserMyselfIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_friends_rq::query_friends_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.query_friends_rq)
}
query_friends_rq::query_friends_rq(const query_friends_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_myself_id_ = from.user_myself_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_relation.query_friends_rq)
}

void query_friends_rq::SharedCtor() {
  _cached_size_ = 0;
  user_myself_id_ = GOOGLE_ULONGLONG(0);
}

query_friends_rq::~query_friends_rq() {
  // @@protoc_insertion_point(destructor:c_business_relation.query_friends_rq)
  SharedDtor();
}

void query_friends_rq::SharedDtor() {
}

void query_friends_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_friends_rq::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_friends_rq& query_friends_rq::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

query_friends_rq* query_friends_rq::New(::google::protobuf::Arena* arena) const {
  query_friends_rq* n = new query_friends_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void query_friends_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.query_friends_rq)
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_friends_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.query_friends_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_myself_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_myself_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_myself_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.query_friends_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.query_friends_rq)
  return false;
#undef DO_
}

void query_friends_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.query_friends_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_myself_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.query_friends_rq)
}

::google::protobuf::uint8* query_friends_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.query_friends_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_myself_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.query_friends_rq)
  return target;
}

size_t query_friends_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.query_friends_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 user_myself_id = 1;
  if (has_user_myself_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_friends_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.query_friends_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const query_friends_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_friends_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.query_friends_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.query_friends_rq)
    MergeFrom(*source);
  }
}

void query_friends_rq::MergeFrom(const query_friends_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.query_friends_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_myself_id()) {
    set_user_myself_id(from.user_myself_id());
  }
}

void query_friends_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.query_friends_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_friends_rq::CopyFrom(const query_friends_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.query_friends_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_friends_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void query_friends_rq::Swap(query_friends_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_friends_rq::InternalSwap(query_friends_rq* other) {
  std::swap(user_myself_id_, other->user_myself_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata query_friends_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// query_friends_rq

// required uint64 user_myself_id = 1;
bool query_friends_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void query_friends_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000001u;
}
void query_friends_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void query_friends_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
::google::protobuf::uint64 query_friends_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_rq.user_myself_id)
  return user_myself_id_;
}
void query_friends_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.query_friends_rq.user_myself_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_friends_rs::kErrorFieldNumber;
const int query_friends_rs::kFriendInfoSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_friends_rs::query_friends_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.query_friends_rs)
}
query_friends_rs::query_friends_rs(const query_friends_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friend_info_s_(from.friend_info_s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:c_business_relation.query_friends_rs)
}

void query_friends_rs::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
}

query_friends_rs::~query_friends_rs() {
  // @@protoc_insertion_point(destructor:c_business_relation.query_friends_rs)
  SharedDtor();
}

void query_friends_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void query_friends_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_friends_rs::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_friends_rs& query_friends_rs::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

query_friends_rs* query_friends_rs::New(::google::protobuf::Arena* arena) const {
  query_friends_rs* n = new query_friends_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void query_friends_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.query_friends_rs)
  friend_info_s_.Clear();
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_friends_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.query_friends_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .c_business_relation.friend_info friend_info_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_info_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.query_friends_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.query_friends_rs)
  return false;
#undef DO_
}

void query_friends_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.query_friends_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // repeated .c_business_relation.friend_info friend_info_s = 2;
  for (unsigned int i = 0, n = this->friend_info_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_info_s(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.query_friends_rs)
}

::google::protobuf::uint8* query_friends_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.query_friends_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // repeated .c_business_relation.friend_info friend_info_s = 2;
  for (unsigned int i = 0, n = this->friend_info_s_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->friend_info_s(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.query_friends_rs)
  return target;
}

size_t query_friends_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.query_friends_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .b_error.info error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }
  // repeated .c_business_relation.friend_info friend_info_s = 2;
  {
    unsigned int count = this->friend_info_s_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info_s(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_friends_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.query_friends_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const query_friends_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_friends_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.query_friends_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.query_friends_rs)
    MergeFrom(*source);
  }
}

void query_friends_rs::MergeFrom(const query_friends_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.query_friends_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friend_info_s_.MergeFrom(from.friend_info_s_);
  if (from.has_error()) {
    mutable_error()->::b_error::info::MergeFrom(from.error());
  }
}

void query_friends_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.query_friends_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_friends_rs::CopyFrom(const query_friends_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.query_friends_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_friends_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->friend_info_s())) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void query_friends_rs::Swap(query_friends_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_friends_rs::InternalSwap(query_friends_rs* other) {
  friend_info_s_.InternalSwap(&other->friend_info_s_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata query_friends_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// query_friends_rs

// required .b_error.info error = 1;
bool query_friends_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void query_friends_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void query_friends_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void query_friends_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& query_friends_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* query_friends_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.query_friends_rs.error)
  return error_;
}
::b_error::info* query_friends_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.query_friends_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void query_friends_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.query_friends_rs.error)
}

// repeated .c_business_relation.friend_info friend_info_s = 2;
int query_friends_rs::friend_info_s_size() const {
  return friend_info_s_.size();
}
void query_friends_rs::clear_friend_info_s() {
  friend_info_s_.Clear();
}
const ::c_business_relation::friend_info& query_friends_rs::friend_info_s(int index) const {
  // @@protoc_insertion_point(field_get:c_business_relation.query_friends_rs.friend_info_s)
  return friend_info_s_.Get(index);
}
::c_business_relation::friend_info* query_friends_rs::mutable_friend_info_s(int index) {
  // @@protoc_insertion_point(field_mutable:c_business_relation.query_friends_rs.friend_info_s)
  return friend_info_s_.Mutable(index);
}
::c_business_relation::friend_info* query_friends_rs::add_friend_info_s() {
  // @@protoc_insertion_point(field_add:c_business_relation.query_friends_rs.friend_info_s)
  return friend_info_s_.Add();
}
::google::protobuf::RepeatedPtrField< ::c_business_relation::friend_info >*
query_friends_rs::mutable_friend_info_s() {
  // @@protoc_insertion_point(field_mutable_list:c_business_relation.query_friends_rs.friend_info_s)
  return &friend_info_s_;
}
const ::google::protobuf::RepeatedPtrField< ::c_business_relation::friend_info >&
query_friends_rs::friend_info_s() const {
  // @@protoc_insertion_point(field_list:c_business_relation.query_friends_rs.friend_info_s)
  return friend_info_s_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rename_friend_remark_rq::kUserMyselfIdFieldNumber;
const int rename_friend_remark_rq::kUserFriendIdFieldNumber;
const int rename_friend_remark_rq::kUserFriendRemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rename_friend_remark_rq::rename_friend_remark_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.rename_friend_remark_rq)
}
rename_friend_remark_rq::rename_friend_remark_rq(const rename_friend_remark_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_friend_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_friend_remark()) {
    user_friend_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_friend_remark_);
  }
  ::memcpy(&user_myself_id_, &from.user_myself_id_,
    reinterpret_cast<char*>(&user_friend_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_friend_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_relation.rename_friend_remark_rq)
}

void rename_friend_remark_rq::SharedCtor() {
  _cached_size_ = 0;
  user_friend_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_friend_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_friend_id_));
}

rename_friend_remark_rq::~rename_friend_remark_rq() {
  // @@protoc_insertion_point(destructor:c_business_relation.rename_friend_remark_rq)
  SharedDtor();
}

void rename_friend_remark_rq::SharedDtor() {
  user_friend_remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rename_friend_remark_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rename_friend_remark_rq::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rename_friend_remark_rq& rename_friend_remark_rq::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

rename_friend_remark_rq* rename_friend_remark_rq::New(::google::protobuf::Arena* arena) const {
  rename_friend_remark_rq* n = new rename_friend_remark_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rename_friend_remark_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.rename_friend_remark_rq)
  if (has_user_friend_remark()) {
    GOOGLE_DCHECK(!user_friend_remark_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_friend_remark_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_friend_id_) -
      reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_friend_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rename_friend_remark_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.rename_friend_remark_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_myself_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_myself_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_myself_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_friend_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_friend_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_friend_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_friend_remark = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_friend_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_friend_remark().data(), this->user_friend_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.rename_friend_remark_rq.user_friend_remark");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.rename_friend_remark_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.rename_friend_remark_rq)
  return false;
#undef DO_
}

void rename_friend_remark_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.rename_friend_remark_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_myself_id(), output);
  }

  // required uint64 user_friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_friend_id(), output);
  }

  // required string user_friend_remark = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_friend_remark().data(), this->user_friend_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.rename_friend_remark_rq.user_friend_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_friend_remark(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.rename_friend_remark_rq)
}

::google::protobuf::uint8* rename_friend_remark_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.rename_friend_remark_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_myself_id(), target);
  }

  // required uint64 user_friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_friend_id(), target);
  }

  // required string user_friend_remark = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_friend_remark().data(), this->user_friend_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.rename_friend_remark_rq.user_friend_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_friend_remark(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.rename_friend_remark_rq)
  return target;
}

size_t rename_friend_remark_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.rename_friend_remark_rq)
  size_t total_size = 0;

  if (has_user_friend_remark()) {
    // required string user_friend_remark = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_friend_remark());
  }

  if (has_user_myself_id()) {
    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());
  }

  if (has_user_friend_id()) {
    // required uint64 user_friend_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_friend_id());
  }

  return total_size;
}
size_t rename_friend_remark_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.rename_friend_remark_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string user_friend_remark = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_friend_remark());

    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());

    // required uint64 user_friend_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_friend_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rename_friend_remark_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.rename_friend_remark_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const rename_friend_remark_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rename_friend_remark_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.rename_friend_remark_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.rename_friend_remark_rq)
    MergeFrom(*source);
  }
}

void rename_friend_remark_rq::MergeFrom(const rename_friend_remark_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.rename_friend_remark_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_friend_remark();
      user_friend_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_friend_remark_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_myself_id_ = from.user_myself_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_friend_id_ = from.user_friend_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rename_friend_remark_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.rename_friend_remark_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rename_friend_remark_rq::CopyFrom(const rename_friend_remark_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.rename_friend_remark_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rename_friend_remark_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void rename_friend_remark_rq::Swap(rename_friend_remark_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rename_friend_remark_rq::InternalSwap(rename_friend_remark_rq* other) {
  user_friend_remark_.Swap(&other->user_friend_remark_);
  std::swap(user_myself_id_, other->user_myself_id_);
  std::swap(user_friend_id_, other->user_friend_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rename_friend_remark_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rename_friend_remark_rq

// required uint64 user_myself_id = 1;
bool rename_friend_remark_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void rename_friend_remark_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000002u;
}
void rename_friend_remark_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void rename_friend_remark_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
::google::protobuf::uint64 rename_friend_remark_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rq.user_myself_id)
  return user_myself_id_;
}
void rename_friend_remark_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rq.user_myself_id)
}

// required uint64 user_friend_id = 2;
bool rename_friend_remark_rq::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void rename_friend_remark_rq::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
void rename_friend_remark_rq::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void rename_friend_remark_rq::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
::google::protobuf::uint64 rename_friend_remark_rq::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rq.user_friend_id)
  return user_friend_id_;
}
void rename_friend_remark_rq::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rq.user_friend_id)
}

// required string user_friend_remark = 3;
bool rename_friend_remark_rq::has_user_friend_remark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void rename_friend_remark_rq::set_has_user_friend_remark() {
  _has_bits_[0] |= 0x00000001u;
}
void rename_friend_remark_rq::clear_has_user_friend_remark() {
  _has_bits_[0] &= ~0x00000001u;
}
void rename_friend_remark_rq::clear_user_friend_remark() {
  user_friend_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_remark();
}
const ::std::string& rename_friend_remark_rq::user_friend_remark() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rq.user_friend_remark)
  return user_friend_remark_.GetNoArena();
}
void rename_friend_remark_rq::set_user_friend_remark(const ::std::string& value) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}
#if LANG_CXX11
void rename_friend_remark_rq::set_user_friend_remark(::std::string&& value) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}
#endif
void rename_friend_remark_rq::set_user_friend_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}
void rename_friend_remark_rq::set_user_friend_remark(const char* value, size_t size) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}
::std::string* rename_friend_remark_rq::mutable_user_friend_remark() {
  set_has_user_friend_remark();
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_remark_rq.user_friend_remark)
  return user_friend_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rename_friend_remark_rq::release_user_friend_remark() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_remark_rq.user_friend_remark)
  clear_has_user_friend_remark();
  return user_friend_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rename_friend_remark_rq::set_allocated_user_friend_remark(::std::string* user_friend_remark) {
  if (user_friend_remark != NULL) {
    set_has_user_friend_remark();
  } else {
    clear_has_user_friend_remark();
  }
  user_friend_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_remark);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_remark_rq.user_friend_remark)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rename_friend_remark_rs::kErrorFieldNumber;
const int rename_friend_remark_rs::kUserFriendIdFieldNumber;
const int rename_friend_remark_rs::kUserFriendRemarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rename_friend_remark_rs::rename_friend_remark_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.rename_friend_remark_rs)
}
rename_friend_remark_rs::rename_friend_remark_rs(const rename_friend_remark_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_friend_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_friend_remark()) {
    user_friend_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_friend_remark_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  user_friend_id_ = from.user_friend_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_relation.rename_friend_remark_rs)
}

void rename_friend_remark_rs::SharedCtor() {
  _cached_size_ = 0;
  user_friend_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, reinterpret_cast<char*>(&user_friend_id_) -
    reinterpret_cast<char*>(&error_) + sizeof(user_friend_id_));
}

rename_friend_remark_rs::~rename_friend_remark_rs() {
  // @@protoc_insertion_point(destructor:c_business_relation.rename_friend_remark_rs)
  SharedDtor();
}

void rename_friend_remark_rs::SharedDtor() {
  user_friend_remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void rename_friend_remark_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rename_friend_remark_rs::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rename_friend_remark_rs& rename_friend_remark_rs::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

rename_friend_remark_rs* rename_friend_remark_rs::New(::google::protobuf::Arena* arena) const {
  rename_friend_remark_rs* n = new rename_friend_remark_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rename_friend_remark_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.rename_friend_remark_rs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_friend_remark()) {
      GOOGLE_DCHECK(!user_friend_remark_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_friend_remark_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
  }
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rename_friend_remark_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.rename_friend_remark_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_friend_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_friend_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_friend_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_friend_remark = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_friend_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_friend_remark().data(), this->user_friend_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.rename_friend_remark_rs.user_friend_remark");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.rename_friend_remark_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.rename_friend_remark_rs)
  return false;
#undef DO_
}

void rename_friend_remark_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.rename_friend_remark_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_friend_id(), output);
  }

  // required string user_friend_remark = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_friend_remark().data(), this->user_friend_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.rename_friend_remark_rs.user_friend_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_friend_remark(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.rename_friend_remark_rs)
}

::google::protobuf::uint8* rename_friend_remark_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.rename_friend_remark_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_friend_id(), target);
  }

  // required string user_friend_remark = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_friend_remark().data(), this->user_friend_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.rename_friend_remark_rs.user_friend_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_friend_remark(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.rename_friend_remark_rs)
  return target;
}

size_t rename_friend_remark_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.rename_friend_remark_rs)
  size_t total_size = 0;

  if (has_user_friend_remark()) {
    // required string user_friend_remark = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_friend_remark());
  }

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_friend_id()) {
    // required uint64 user_friend_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_friend_id());
  }

  return total_size;
}
size_t rename_friend_remark_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.rename_friend_remark_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string user_friend_remark = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_friend_remark());

    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_friend_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_friend_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rename_friend_remark_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.rename_friend_remark_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const rename_friend_remark_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rename_friend_remark_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.rename_friend_remark_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.rename_friend_remark_rs)
    MergeFrom(*source);
  }
}

void rename_friend_remark_rs::MergeFrom(const rename_friend_remark_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.rename_friend_remark_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_friend_remark();
      user_friend_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_friend_remark_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000004u) {
      user_friend_id_ = from.user_friend_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rename_friend_remark_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.rename_friend_remark_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rename_friend_remark_rs::CopyFrom(const rename_friend_remark_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.rename_friend_remark_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rename_friend_remark_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void rename_friend_remark_rs::Swap(rename_friend_remark_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rename_friend_remark_rs::InternalSwap(rename_friend_remark_rs* other) {
  user_friend_remark_.Swap(&other->user_friend_remark_);
  std::swap(error_, other->error_);
  std::swap(user_friend_id_, other->user_friend_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rename_friend_remark_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rename_friend_remark_rs

// required .b_error.info error = 1;
bool rename_friend_remark_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void rename_friend_remark_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void rename_friend_remark_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void rename_friend_remark_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& rename_friend_remark_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* rename_friend_remark_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_remark_rs.error)
  return error_;
}
::b_error::info* rename_friend_remark_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_remark_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void rename_friend_remark_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_remark_rs.error)
}

// required uint64 user_friend_id = 2;
bool rename_friend_remark_rs::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void rename_friend_remark_rs::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
void rename_friend_remark_rs::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void rename_friend_remark_rs::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
::google::protobuf::uint64 rename_friend_remark_rs::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rs.user_friend_id)
  return user_friend_id_;
}
void rename_friend_remark_rs::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rs.user_friend_id)
}

// required string user_friend_remark = 3;
bool rename_friend_remark_rs::has_user_friend_remark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void rename_friend_remark_rs::set_has_user_friend_remark() {
  _has_bits_[0] |= 0x00000001u;
}
void rename_friend_remark_rs::clear_has_user_friend_remark() {
  _has_bits_[0] &= ~0x00000001u;
}
void rename_friend_remark_rs::clear_user_friend_remark() {
  user_friend_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_remark();
}
const ::std::string& rename_friend_remark_rs::user_friend_remark() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_remark_rs.user_friend_remark)
  return user_friend_remark_.GetNoArena();
}
void rename_friend_remark_rs::set_user_friend_remark(const ::std::string& value) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}
#if LANG_CXX11
void rename_friend_remark_rs::set_user_friend_remark(::std::string&& value) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}
#endif
void rename_friend_remark_rs::set_user_friend_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}
void rename_friend_remark_rs::set_user_friend_remark(const char* value, size_t size) {
  set_has_user_friend_remark();
  user_friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}
::std::string* rename_friend_remark_rs::mutable_user_friend_remark() {
  set_has_user_friend_remark();
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_remark_rs.user_friend_remark)
  return user_friend_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rename_friend_remark_rs::release_user_friend_remark() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_remark_rs.user_friend_remark)
  clear_has_user_friend_remark();
  return user_friend_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rename_friend_remark_rs::set_allocated_user_friend_remark(::std::string* user_friend_remark) {
  if (user_friend_remark != NULL) {
    set_has_user_friend_remark();
  } else {
    clear_has_user_friend_remark();
  }
  user_friend_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_remark);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_remark_rs.user_friend_remark)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rename_friend_group_rq::kUserMyselfIdFieldNumber;
const int rename_friend_group_rq::kUserFriendIdFieldNumber;
const int rename_friend_group_rq::kUserFriendGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rename_friend_group_rq::rename_friend_group_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.rename_friend_group_rq)
}
rename_friend_group_rq::rename_friend_group_rq(const rename_friend_group_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_friend_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_friend_group()) {
    user_friend_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_friend_group_);
  }
  ::memcpy(&user_myself_id_, &from.user_myself_id_,
    reinterpret_cast<char*>(&user_friend_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_friend_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_relation.rename_friend_group_rq)
}

void rename_friend_group_rq::SharedCtor() {
  _cached_size_ = 0;
  user_friend_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_friend_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_friend_id_));
}

rename_friend_group_rq::~rename_friend_group_rq() {
  // @@protoc_insertion_point(destructor:c_business_relation.rename_friend_group_rq)
  SharedDtor();
}

void rename_friend_group_rq::SharedDtor() {
  user_friend_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rename_friend_group_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rename_friend_group_rq::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rename_friend_group_rq& rename_friend_group_rq::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

rename_friend_group_rq* rename_friend_group_rq::New(::google::protobuf::Arena* arena) const {
  rename_friend_group_rq* n = new rename_friend_group_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rename_friend_group_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.rename_friend_group_rq)
  if (has_user_friend_group()) {
    GOOGLE_DCHECK(!user_friend_group_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_friend_group_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_friend_id_) -
      reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_friend_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rename_friend_group_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.rename_friend_group_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_myself_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_myself_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_myself_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_friend_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_friend_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_friend_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_friend_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_friend_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_friend_group().data(), this->user_friend_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.rename_friend_group_rq.user_friend_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.rename_friend_group_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.rename_friend_group_rq)
  return false;
#undef DO_
}

void rename_friend_group_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.rename_friend_group_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_myself_id(), output);
  }

  // required uint64 user_friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_friend_id(), output);
  }

  // required string user_friend_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_friend_group().data(), this->user_friend_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.rename_friend_group_rq.user_friend_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_friend_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.rename_friend_group_rq)
}

::google::protobuf::uint8* rename_friend_group_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.rename_friend_group_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_myself_id(), target);
  }

  // required uint64 user_friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_friend_id(), target);
  }

  // required string user_friend_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_friend_group().data(), this->user_friend_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.rename_friend_group_rq.user_friend_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_friend_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.rename_friend_group_rq)
  return target;
}

size_t rename_friend_group_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.rename_friend_group_rq)
  size_t total_size = 0;

  if (has_user_friend_group()) {
    // required string user_friend_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_friend_group());
  }

  if (has_user_myself_id()) {
    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());
  }

  if (has_user_friend_id()) {
    // required uint64 user_friend_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_friend_id());
  }

  return total_size;
}
size_t rename_friend_group_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.rename_friend_group_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string user_friend_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_friend_group());

    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());

    // required uint64 user_friend_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_friend_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rename_friend_group_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.rename_friend_group_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const rename_friend_group_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rename_friend_group_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.rename_friend_group_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.rename_friend_group_rq)
    MergeFrom(*source);
  }
}

void rename_friend_group_rq::MergeFrom(const rename_friend_group_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.rename_friend_group_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_friend_group();
      user_friend_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_friend_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_myself_id_ = from.user_myself_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_friend_id_ = from.user_friend_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rename_friend_group_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.rename_friend_group_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rename_friend_group_rq::CopyFrom(const rename_friend_group_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.rename_friend_group_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rename_friend_group_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void rename_friend_group_rq::Swap(rename_friend_group_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rename_friend_group_rq::InternalSwap(rename_friend_group_rq* other) {
  user_friend_group_.Swap(&other->user_friend_group_);
  std::swap(user_myself_id_, other->user_myself_id_);
  std::swap(user_friend_id_, other->user_friend_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rename_friend_group_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rename_friend_group_rq

// required uint64 user_myself_id = 1;
bool rename_friend_group_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void rename_friend_group_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000002u;
}
void rename_friend_group_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void rename_friend_group_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
::google::protobuf::uint64 rename_friend_group_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rq.user_myself_id)
  return user_myself_id_;
}
void rename_friend_group_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rq.user_myself_id)
}

// required uint64 user_friend_id = 2;
bool rename_friend_group_rq::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void rename_friend_group_rq::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
void rename_friend_group_rq::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void rename_friend_group_rq::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
::google::protobuf::uint64 rename_friend_group_rq::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rq.user_friend_id)
  return user_friend_id_;
}
void rename_friend_group_rq::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rq.user_friend_id)
}

// required string user_friend_group = 3;
bool rename_friend_group_rq::has_user_friend_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void rename_friend_group_rq::set_has_user_friend_group() {
  _has_bits_[0] |= 0x00000001u;
}
void rename_friend_group_rq::clear_has_user_friend_group() {
  _has_bits_[0] &= ~0x00000001u;
}
void rename_friend_group_rq::clear_user_friend_group() {
  user_friend_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_group();
}
const ::std::string& rename_friend_group_rq::user_friend_group() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rq.user_friend_group)
  return user_friend_group_.GetNoArena();
}
void rename_friend_group_rq::set_user_friend_group(const ::std::string& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rq.user_friend_group)
}
#if LANG_CXX11
void rename_friend_group_rq::set_user_friend_group(::std::string&& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.rename_friend_group_rq.user_friend_group)
}
#endif
void rename_friend_group_rq::set_user_friend_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.rename_friend_group_rq.user_friend_group)
}
void rename_friend_group_rq::set_user_friend_group(const char* value, size_t size) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.rename_friend_group_rq.user_friend_group)
}
::std::string* rename_friend_group_rq::mutable_user_friend_group() {
  set_has_user_friend_group();
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_group_rq.user_friend_group)
  return user_friend_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rename_friend_group_rq::release_user_friend_group() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_group_rq.user_friend_group)
  clear_has_user_friend_group();
  return user_friend_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rename_friend_group_rq::set_allocated_user_friend_group(::std::string* user_friend_group) {
  if (user_friend_group != NULL) {
    set_has_user_friend_group();
  } else {
    clear_has_user_friend_group();
  }
  user_friend_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_group);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_group_rq.user_friend_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rename_friend_group_rs::kErrorFieldNumber;
const int rename_friend_group_rs::kUserFriendIdFieldNumber;
const int rename_friend_group_rs::kUserFriendGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rename_friend_group_rs::rename_friend_group_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.rename_friend_group_rs)
}
rename_friend_group_rs::rename_friend_group_rs(const rename_friend_group_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_friend_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_friend_group()) {
    user_friend_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_friend_group_);
  }
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  user_friend_id_ = from.user_friend_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_relation.rename_friend_group_rs)
}

void rename_friend_group_rs::SharedCtor() {
  _cached_size_ = 0;
  user_friend_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, reinterpret_cast<char*>(&user_friend_id_) -
    reinterpret_cast<char*>(&error_) + sizeof(user_friend_id_));
}

rename_friend_group_rs::~rename_friend_group_rs() {
  // @@protoc_insertion_point(destructor:c_business_relation.rename_friend_group_rs)
  SharedDtor();
}

void rename_friend_group_rs::SharedDtor() {
  user_friend_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void rename_friend_group_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rename_friend_group_rs::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rename_friend_group_rs& rename_friend_group_rs::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

rename_friend_group_rs* rename_friend_group_rs::New(::google::protobuf::Arena* arena) const {
  rename_friend_group_rs* n = new rename_friend_group_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rename_friend_group_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.rename_friend_group_rs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_friend_group()) {
      GOOGLE_DCHECK(!user_friend_group_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_friend_group_.UnsafeRawStringPointer())->clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::b_error::info::Clear();
    }
  }
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rename_friend_group_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.rename_friend_group_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_friend_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_friend_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_friend_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_friend_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_friend_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_friend_group().data(), this->user_friend_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.rename_friend_group_rs.user_friend_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.rename_friend_group_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.rename_friend_group_rs)
  return false;
#undef DO_
}

void rename_friend_group_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.rename_friend_group_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_friend_id(), output);
  }

  // required string user_friend_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_friend_group().data(), this->user_friend_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.rename_friend_group_rs.user_friend_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_friend_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.rename_friend_group_rs)
}

::google::protobuf::uint8* rename_friend_group_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.rename_friend_group_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_friend_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_friend_id(), target);
  }

  // required string user_friend_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_friend_group().data(), this->user_friend_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.rename_friend_group_rs.user_friend_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_friend_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.rename_friend_group_rs)
  return target;
}

size_t rename_friend_group_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.rename_friend_group_rs)
  size_t total_size = 0;

  if (has_user_friend_group()) {
    // required string user_friend_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_friend_group());
  }

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_friend_id()) {
    // required uint64 user_friend_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_friend_id());
  }

  return total_size;
}
size_t rename_friend_group_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.rename_friend_group_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string user_friend_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_friend_group());

    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_friend_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_friend_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rename_friend_group_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.rename_friend_group_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const rename_friend_group_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rename_friend_group_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.rename_friend_group_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.rename_friend_group_rs)
    MergeFrom(*source);
  }
}

void rename_friend_group_rs::MergeFrom(const rename_friend_group_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.rename_friend_group_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_friend_group();
      user_friend_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_friend_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000004u) {
      user_friend_id_ = from.user_friend_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rename_friend_group_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.rename_friend_group_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rename_friend_group_rs::CopyFrom(const rename_friend_group_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.rename_friend_group_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rename_friend_group_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void rename_friend_group_rs::Swap(rename_friend_group_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rename_friend_group_rs::InternalSwap(rename_friend_group_rs* other) {
  user_friend_group_.Swap(&other->user_friend_group_);
  std::swap(error_, other->error_);
  std::swap(user_friend_id_, other->user_friend_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rename_friend_group_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rename_friend_group_rs

// required .b_error.info error = 1;
bool rename_friend_group_rs::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void rename_friend_group_rs::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void rename_friend_group_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void rename_friend_group_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& rename_friend_group_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* rename_friend_group_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_group_rs.error)
  return error_;
}
::b_error::info* rename_friend_group_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_group_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void rename_friend_group_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_group_rs.error)
}

// required uint64 user_friend_id = 2;
bool rename_friend_group_rs::has_user_friend_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void rename_friend_group_rs::set_has_user_friend_id() {
  _has_bits_[0] |= 0x00000004u;
}
void rename_friend_group_rs::clear_has_user_friend_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void rename_friend_group_rs::clear_user_friend_id() {
  user_friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_friend_id();
}
::google::protobuf::uint64 rename_friend_group_rs::user_friend_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rs.user_friend_id)
  return user_friend_id_;
}
void rename_friend_group_rs::set_user_friend_id(::google::protobuf::uint64 value) {
  set_has_user_friend_id();
  user_friend_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rs.user_friend_id)
}

// required string user_friend_group = 3;
bool rename_friend_group_rs::has_user_friend_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void rename_friend_group_rs::set_has_user_friend_group() {
  _has_bits_[0] |= 0x00000001u;
}
void rename_friend_group_rs::clear_has_user_friend_group() {
  _has_bits_[0] &= ~0x00000001u;
}
void rename_friend_group_rs::clear_user_friend_group() {
  user_friend_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_friend_group();
}
const ::std::string& rename_friend_group_rs::user_friend_group() const {
  // @@protoc_insertion_point(field_get:c_business_relation.rename_friend_group_rs.user_friend_group)
  return user_friend_group_.GetNoArena();
}
void rename_friend_group_rs::set_user_friend_group(const ::std::string& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.rename_friend_group_rs.user_friend_group)
}
#if LANG_CXX11
void rename_friend_group_rs::set_user_friend_group(::std::string&& value) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.rename_friend_group_rs.user_friend_group)
}
#endif
void rename_friend_group_rs::set_user_friend_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.rename_friend_group_rs.user_friend_group)
}
void rename_friend_group_rs::set_user_friend_group(const char* value, size_t size) {
  set_has_user_friend_group();
  user_friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.rename_friend_group_rs.user_friend_group)
}
::std::string* rename_friend_group_rs::mutable_user_friend_group() {
  set_has_user_friend_group();
  // @@protoc_insertion_point(field_mutable:c_business_relation.rename_friend_group_rs.user_friend_group)
  return user_friend_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* rename_friend_group_rs::release_user_friend_group() {
  // @@protoc_insertion_point(field_release:c_business_relation.rename_friend_group_rs.user_friend_group)
  clear_has_user_friend_group();
  return user_friend_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void rename_friend_group_rs::set_allocated_user_friend_group(::std::string* user_friend_group) {
  if (user_friend_group != NULL) {
    set_has_user_friend_group();
  } else {
    clear_has_user_friend_group();
  }
  user_friend_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_friend_group);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.rename_friend_group_rs.user_friend_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int talk_friend_rq::kUserMyselfIdFieldNumber;
const int talk_friend_rq::kUserTalkIdFieldNumber;
const int talk_friend_rq::kTalkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

talk_friend_rq::talk_friend_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.talk_friend_rq)
}
talk_friend_rq::talk_friend_rq(const talk_friend_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talking()) {
    talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
  }
  ::memcpy(&user_myself_id_, &from.user_myself_id_,
    reinterpret_cast<char*>(&user_talk_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_talk_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_relation.talk_friend_rq)
}

void talk_friend_rq::SharedCtor() {
  _cached_size_ = 0;
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_talk_id_) -
    reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_talk_id_));
}

talk_friend_rq::~talk_friend_rq() {
  // @@protoc_insertion_point(destructor:c_business_relation.talk_friend_rq)
  SharedDtor();
}

void talk_friend_rq::SharedDtor() {
  talking_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void talk_friend_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_friend_rq::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const talk_friend_rq& talk_friend_rq::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

talk_friend_rq* talk_friend_rq::New(::google::protobuf::Arena* arena) const {
  talk_friend_rq* n = new talk_friend_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void talk_friend_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.talk_friend_rq)
  if (has_talking()) {
    GOOGLE_DCHECK(!talking_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*talking_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&user_myself_id_, 0, reinterpret_cast<char*>(&user_talk_id_) -
      reinterpret_cast<char*>(&user_myself_id_) + sizeof(user_talk_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool talk_friend_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.talk_friend_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_myself_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_myself_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_myself_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_talk_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_talk_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_talk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string talking = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talking()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talking().data(), this->talking().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.talk_friend_rq.talking");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.talk_friend_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.talk_friend_rq)
  return false;
#undef DO_
}

void talk_friend_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.talk_friend_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_myself_id(), output);
  }

  // required uint64 user_talk_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_talk_id(), output);
  }

  // required string talking = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talking().data(), this->talking().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.talk_friend_rq.talking");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->talking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.talk_friend_rq)
}

::google::protobuf::uint8* talk_friend_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.talk_friend_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_myself_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_myself_id(), target);
  }

  // required uint64 user_talk_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_talk_id(), target);
  }

  // required string talking = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talking().data(), this->talking().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.talk_friend_rq.talking");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->talking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.talk_friend_rq)
  return target;
}

size_t talk_friend_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.talk_friend_rq)
  size_t total_size = 0;

  if (has_talking()) {
    // required string talking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->talking());
  }

  if (has_user_myself_id()) {
    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());
  }

  if (has_user_talk_id()) {
    // required uint64 user_talk_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_talk_id());
  }

  return total_size;
}
size_t talk_friend_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.talk_friend_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string talking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->talking());

    // required uint64 user_myself_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_myself_id());

    // required uint64 user_talk_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_talk_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_friend_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.talk_friend_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const talk_friend_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const talk_friend_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.talk_friend_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.talk_friend_rq)
    MergeFrom(*source);
  }
}

void talk_friend_rq::MergeFrom(const talk_friend_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.talk_friend_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_talking();
      talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_myself_id_ = from.user_myself_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_talk_id_ = from.user_talk_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void talk_friend_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.talk_friend_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_friend_rq::CopyFrom(const talk_friend_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.talk_friend_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_friend_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void talk_friend_rq::Swap(talk_friend_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void talk_friend_rq::InternalSwap(talk_friend_rq* other) {
  talking_.Swap(&other->talking_);
  std::swap(user_myself_id_, other->user_myself_id_);
  std::swap(user_talk_id_, other->user_talk_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata talk_friend_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// talk_friend_rq

// required uint64 user_myself_id = 1;
bool talk_friend_rq::has_user_myself_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void talk_friend_rq::set_has_user_myself_id() {
  _has_bits_[0] |= 0x00000002u;
}
void talk_friend_rq::clear_has_user_myself_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void talk_friend_rq::clear_user_myself_id() {
  user_myself_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_myself_id();
}
::google::protobuf::uint64 talk_friend_rq::user_myself_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rq.user_myself_id)
  return user_myself_id_;
}
void talk_friend_rq::set_user_myself_id(::google::protobuf::uint64 value) {
  set_has_user_myself_id();
  user_myself_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_rq.user_myself_id)
}

// required uint64 user_talk_id = 2;
bool talk_friend_rq::has_user_talk_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void talk_friend_rq::set_has_user_talk_id() {
  _has_bits_[0] |= 0x00000004u;
}
void talk_friend_rq::clear_has_user_talk_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void talk_friend_rq::clear_user_talk_id() {
  user_talk_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_talk_id();
}
::google::protobuf::uint64 talk_friend_rq::user_talk_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rq.user_talk_id)
  return user_talk_id_;
}
void talk_friend_rq::set_user_talk_id(::google::protobuf::uint64 value) {
  set_has_user_talk_id();
  user_talk_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_rq.user_talk_id)
}

// required string talking = 3;
bool talk_friend_rq::has_talking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void talk_friend_rq::set_has_talking() {
  _has_bits_[0] |= 0x00000001u;
}
void talk_friend_rq::clear_has_talking() {
  _has_bits_[0] &= ~0x00000001u;
}
void talk_friend_rq::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
const ::std::string& talk_friend_rq::talking() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rq.talking)
  return talking_.GetNoArena();
}
void talk_friend_rq::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_rq.talking)
}
#if LANG_CXX11
void talk_friend_rq::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.talk_friend_rq.talking)
}
#endif
void talk_friend_rq::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.talk_friend_rq.talking)
}
void talk_friend_rq::set_talking(const char* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.talk_friend_rq.talking)
}
::std::string* talk_friend_rq::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_business_relation.talk_friend_rq.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* talk_friend_rq::release_talking() {
  // @@protoc_insertion_point(field_release:c_business_relation.talk_friend_rq.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void talk_friend_rq::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.talk_friend_rq.talking)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int talk_friend_rs::kErrorFieldNumber;
const int talk_friend_rs::kUserTalkIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

talk_friend_rs::talk_friend_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.talk_friend_rs)
}
talk_friend_rs::talk_friend_rs(const talk_friend_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  user_talk_id_ = from.user_talk_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_relation.talk_friend_rs)
}

void talk_friend_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&user_talk_id_) -
    reinterpret_cast<char*>(&error_) + sizeof(user_talk_id_));
}

talk_friend_rs::~talk_friend_rs() {
  // @@protoc_insertion_point(destructor:c_business_relation.talk_friend_rs)
  SharedDtor();
}

void talk_friend_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void talk_friend_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_friend_rs::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const talk_friend_rs& talk_friend_rs::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

talk_friend_rs* talk_friend_rs::New(::google::protobuf::Arena* arena) const {
  talk_friend_rs* n = new talk_friend_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void talk_friend_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.talk_friend_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  user_talk_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool talk_friend_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.talk_friend_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_talk_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_talk_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_talk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.talk_friend_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.talk_friend_rs)
  return false;
#undef DO_
}

void talk_friend_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.talk_friend_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_talk_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_talk_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.talk_friend_rs)
}

::google::protobuf::uint8* talk_friend_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.talk_friend_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_talk_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_talk_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.talk_friend_rs)
  return target;
}

size_t talk_friend_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.talk_friend_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_talk_id()) {
    // required uint64 user_talk_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_talk_id());
  }

  return total_size;
}
size_t talk_friend_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.talk_friend_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_talk_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_talk_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_friend_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.talk_friend_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const talk_friend_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const talk_friend_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.talk_friend_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.talk_friend_rs)
    MergeFrom(*source);
  }
}

void talk_friend_rs::MergeFrom(const talk_friend_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.talk_friend_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      user_talk_id_ = from.user_talk_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void talk_friend_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.talk_friend_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_friend_rs::CopyFrom(const talk_friend_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.talk_friend_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_friend_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void talk_friend_rs::Swap(talk_friend_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void talk_friend_rs::InternalSwap(talk_friend_rs* other) {
  std::swap(error_, other->error_);
  std::swap(user_talk_id_, other->user_talk_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata talk_friend_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// talk_friend_rs

// required .b_error.info error = 1;
bool talk_friend_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void talk_friend_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void talk_friend_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void talk_friend_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& talk_friend_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* talk_friend_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_relation.talk_friend_rs.error)
  return error_;
}
::b_error::info* talk_friend_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_relation.talk_friend_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void talk_friend_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.talk_friend_rs.error)
}

// required uint64 user_talk_id = 2;
bool talk_friend_rs::has_user_talk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void talk_friend_rs::set_has_user_talk_id() {
  _has_bits_[0] |= 0x00000002u;
}
void talk_friend_rs::clear_has_user_talk_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void talk_friend_rs::clear_user_talk_id() {
  user_talk_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_talk_id();
}
::google::protobuf::uint64 talk_friend_rs::user_talk_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_rs.user_talk_id)
  return user_talk_id_;
}
void talk_friend_rs::set_user_talk_id(::google::protobuf::uint64 value) {
  set_has_user_talk_id();
  user_talk_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_rs.user_talk_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int talk_friend_nt::kApplyTalkIdFieldNumber;
const int talk_friend_nt::kTalkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

talk_friend_nt::talk_friend_nt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_relation.talk_friend_nt)
}
talk_friend_nt::talk_friend_nt(const talk_friend_nt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_talking()) {
    talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
  }
  apply_talk_id_ = from.apply_talk_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_relation.talk_friend_nt)
}

void talk_friend_nt::SharedCtor() {
  _cached_size_ = 0;
  talking_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_talk_id_ = GOOGLE_ULONGLONG(0);
}

talk_friend_nt::~talk_friend_nt() {
  // @@protoc_insertion_point(destructor:c_business_relation.talk_friend_nt)
  SharedDtor();
}

void talk_friend_nt::SharedDtor() {
  talking_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void talk_friend_nt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_friend_nt::descriptor() {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const talk_friend_nt& talk_friend_nt::default_instance() {
  protobuf_c_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

talk_friend_nt* talk_friend_nt::New(::google::protobuf::Arena* arena) const {
  talk_friend_nt* n = new talk_friend_nt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void talk_friend_nt::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_relation.talk_friend_nt)
  if (has_talking()) {
    GOOGLE_DCHECK(!talking_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*talking_.UnsafeRawStringPointer())->clear();
  }
  apply_talk_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool talk_friend_nt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_relation.talk_friend_nt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 apply_talk_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_apply_talk_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_talk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string talking = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talking()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talking().data(), this->talking().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "c_business_relation.talk_friend_nt.talking");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_relation.talk_friend_nt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_relation.talk_friend_nt)
  return false;
#undef DO_
}

void talk_friend_nt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_relation.talk_friend_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 apply_talk_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apply_talk_id(), output);
  }

  // required string talking = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talking().data(), this->talking().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.talk_friend_nt.talking");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->talking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_relation.talk_friend_nt)
}

::google::protobuf::uint8* talk_friend_nt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_relation.talk_friend_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 apply_talk_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apply_talk_id(), target);
  }

  // required string talking = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talking().data(), this->talking().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "c_business_relation.talk_friend_nt.talking");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->talking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_relation.talk_friend_nt)
  return target;
}

size_t talk_friend_nt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_relation.talk_friend_nt)
  size_t total_size = 0;

  if (has_talking()) {
    // required string talking = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->talking());
  }

  if (has_apply_talk_id()) {
    // required uint64 apply_talk_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->apply_talk_id());
  }

  return total_size;
}
size_t talk_friend_nt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_relation.talk_friend_nt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string talking = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->talking());

    // required uint64 apply_talk_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->apply_talk_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_friend_nt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_relation.talk_friend_nt)
  GOOGLE_DCHECK_NE(&from, this);
  const talk_friend_nt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const talk_friend_nt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_relation.talk_friend_nt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_relation.talk_friend_nt)
    MergeFrom(*source);
  }
}

void talk_friend_nt::MergeFrom(const talk_friend_nt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_relation.talk_friend_nt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_talking();
      talking_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talking_);
    }
    if (cached_has_bits & 0x00000002u) {
      apply_talk_id_ = from.apply_talk_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void talk_friend_nt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_relation.talk_friend_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_friend_nt::CopyFrom(const talk_friend_nt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_relation.talk_friend_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_friend_nt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void talk_friend_nt::Swap(talk_friend_nt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void talk_friend_nt::InternalSwap(talk_friend_nt* other) {
  talking_.Swap(&other->talking_);
  std::swap(apply_talk_id_, other->apply_talk_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata talk_friend_nt::GetMetadata() const {
  protobuf_c_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// talk_friend_nt

// required uint64 apply_talk_id = 1;
bool talk_friend_nt::has_apply_talk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void talk_friend_nt::set_has_apply_talk_id() {
  _has_bits_[0] |= 0x00000002u;
}
void talk_friend_nt::clear_has_apply_talk_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void talk_friend_nt::clear_apply_talk_id() {
  apply_talk_id_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_talk_id();
}
::google::protobuf::uint64 talk_friend_nt::apply_talk_id() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_nt.apply_talk_id)
  return apply_talk_id_;
}
void talk_friend_nt::set_apply_talk_id(::google::protobuf::uint64 value) {
  set_has_apply_talk_id();
  apply_talk_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_nt.apply_talk_id)
}

// required string talking = 2;
bool talk_friend_nt::has_talking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void talk_friend_nt::set_has_talking() {
  _has_bits_[0] |= 0x00000001u;
}
void talk_friend_nt::clear_has_talking() {
  _has_bits_[0] &= ~0x00000001u;
}
void talk_friend_nt::clear_talking() {
  talking_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_talking();
}
const ::std::string& talk_friend_nt::talking() const {
  // @@protoc_insertion_point(field_get:c_business_relation.talk_friend_nt.talking)
  return talking_.GetNoArena();
}
void talk_friend_nt::set_talking(const ::std::string& value) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_relation.talk_friend_nt.talking)
}
#if LANG_CXX11
void talk_friend_nt::set_talking(::std::string&& value) {
  set_has_talking();
  talking_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_relation.talk_friend_nt.talking)
}
#endif
void talk_friend_nt::set_talking(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_relation.talk_friend_nt.talking)
}
void talk_friend_nt::set_talking(const char* value, size_t size) {
  set_has_talking();
  talking_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_relation.talk_friend_nt.talking)
}
::std::string* talk_friend_nt::mutable_talking() {
  set_has_talking();
  // @@protoc_insertion_point(field_mutable:c_business_relation.talk_friend_nt.talking)
  return talking_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* talk_friend_nt::release_talking() {
  // @@protoc_insertion_point(field_release:c_business_relation.talk_friend_nt.talking)
  clear_has_talking();
  return talking_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void talk_friend_nt::set_allocated_talking(::std::string* talking) {
  if (talking != NULL) {
    set_has_talking();
  } else {
    clear_has_talking();
  }
  talking_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talking);
  // @@protoc_insertion_point(field_set_allocated:c_business_relation.talk_friend_nt.talking)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace c_business_relation

// @@protoc_insertion_point(global_scope)
