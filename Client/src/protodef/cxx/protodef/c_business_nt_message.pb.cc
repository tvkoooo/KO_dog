// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_business_nt_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "c_business_nt_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace c_business_nt_message {
class nt_message_consume_by_id_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_consume_by_id_rq> {
} _nt_message_consume_by_id_rq_default_instance_;
class nt_message_consume_by_id_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_consume_by_id_rs> {
} _nt_message_consume_by_id_rs_default_instance_;
class nt_message_consume_by_maxid_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_consume_by_maxid_rq> {
} _nt_message_consume_by_maxid_rq_default_instance_;
class nt_message_consume_by_maxid_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_consume_by_maxid_rs> {
} _nt_message_consume_by_maxid_rs_default_instance_;
class nt_message_read_note_id_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_read_note_id_rq> {
} _nt_message_read_note_id_rq_default_instance_;
class nt_message_read_note_id_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_read_note_id_rs> {
} _nt_message_read_note_id_rs_default_instance_;
class nt_message_all_unread_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_all_unread_rq> {
} _nt_message_all_unread_rq_default_instance_;
class nt_message_all_unread_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_all_unread_rs> {
} _nt_message_all_unread_rs_default_instance_;
class nt_message_all_unread_ntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nt_message_all_unread_nt> {
} _nt_message_all_unread_nt_default_instance_;

namespace protobuf_c_5fbusiness_5fnt_5fmessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rq, note_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rs, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_id_rs, note_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rq, note_maxid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rs, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_consume_by_maxid_rs, note_maxid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rq, note_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rs, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_read_note_id_rs, note_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_rq, user_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_rs, user_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_nt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_nt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nt_message_all_unread_nt, user_id_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(nt_message_consume_by_id_rq)},
  { 9, 17, sizeof(nt_message_consume_by_id_rs)},
  { 20, 27, sizeof(nt_message_consume_by_maxid_rq)},
  { 29, 37, sizeof(nt_message_consume_by_maxid_rs)},
  { 40, 47, sizeof(nt_message_read_note_id_rq)},
  { 49, 57, sizeof(nt_message_read_note_id_rs)},
  { 60, 66, sizeof(nt_message_all_unread_rq)},
  { 67, 74, sizeof(nt_message_all_unread_rs)},
  { 76, 82, sizeof(nt_message_all_unread_nt)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_consume_by_id_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_consume_by_id_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_consume_by_maxid_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_consume_by_maxid_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_read_note_id_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_read_note_id_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_all_unread_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_all_unread_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nt_message_all_unread_nt_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "c_business_nt_message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _nt_message_consume_by_id_rq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _nt_message_consume_by_id_rs_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _nt_message_consume_by_maxid_rq_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _nt_message_consume_by_maxid_rs_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _nt_message_read_note_id_rq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _nt_message_read_note_id_rs_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _nt_message_all_unread_rq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _nt_message_all_unread_rs_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _nt_message_all_unread_nt_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::b_error::protobuf_b_5ferror_2eproto::InitDefaults();
  _nt_message_consume_by_id_rq_default_instance_.DefaultConstruct();
  _nt_message_consume_by_id_rs_default_instance_.DefaultConstruct();
  _nt_message_consume_by_maxid_rq_default_instance_.DefaultConstruct();
  _nt_message_consume_by_maxid_rs_default_instance_.DefaultConstruct();
  _nt_message_read_note_id_rq_default_instance_.DefaultConstruct();
  _nt_message_read_note_id_rs_default_instance_.DefaultConstruct();
  _nt_message_all_unread_rq_default_instance_.DefaultConstruct();
  _nt_message_all_unread_rs_default_instance_.DefaultConstruct();
  _nt_message_all_unread_nt_default_instance_.DefaultConstruct();
  _nt_message_consume_by_id_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _nt_message_consume_by_maxid_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _nt_message_read_note_id_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _nt_message_all_unread_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033c_business_nt_message.proto\022\025c_busines"
      "s_nt_message\032\rb_error.proto\"Q\n\033nt_messag"
      "e_consume_by_id_rq\022\017\n\007user_id\030\001 \002(\004\022\017\n\007n"
      "ote_id\030\002 \002(\004\"\020\n\003msg\022\t\n\002id\020\201\200\200\020\"o\n\033nt_mes"
      "sage_consume_by_id_rs\022\034\n\005error\030\001 \002(\0132\r.b"
      "_error.info\022\017\n\007user_id\030\002 \002(\004\022\017\n\007note_id\030"
      "\003 \002(\004\"\020\n\003msg\022\t\n\002id\020\202\200\200\020\"W\n\036nt_message_co"
      "nsume_by_maxid_rq\022\017\n\007user_id\030\001 \002(\004\022\022\n\nno"
      "te_maxid\030\002 \002(\004\"\020\n\003msg\022\t\n\002id\020\203\200\200\020\"u\n\036nt_m"
      "essage_consume_by_maxid_rs\022\034\n\005error\030\001 \002("
      "\0132\r.b_error.info\022\017\n\007user_id\030\002 \002(\004\022\022\n\nnot"
      "e_maxid\030\003 \002(\004\"\020\n\003msg\022\t\n\002id\020\204\200\200\020\"P\n\032nt_me"
      "ssage_read_note_id_rq\022\017\n\007user_id\030\001 \002(\004\022\017"
      "\n\007note_id\030\002 \002(\004\"\020\n\003msg\022\t\n\002id\020\201\200\200\020\"n\n\032nt_"
      "message_read_note_id_rs\022\034\n\005error\030\001 \002(\0132\r"
      ".b_error.info\022\017\n\007user_id\030\002 \002(\004\022\017\n\007note_i"
      "d\030\003 \002(\004\"\020\n\003msg\022\t\n\002id\020\202\200\200\020\"=\n\030nt_message_"
      "all_unread_rq\022\017\n\007user_id\030\001 \002(\004\"\020\n\003msg\022\t\n"
      "\002id\020\203\200\200\020\"[\n\030nt_message_all_unread_rs\022\034\n\005"
      "error\030\001 \002(\0132\r.b_error.info\022\017\n\007user_id\030\002 "
      "\002(\004\"\020\n\003msg\022\t\n\002id\020\204\200\200\020\"=\n\030nt_message_all_"
      "unread_nt\022\017\n\007user_id\030\002 \002(\004\"\020\n\003msg\022\t\n\002id\020"
      "\205\200\200\020*#\n\003msg\022\r\n\006min_id\020\200\200\200\020\022\r\n\006max_id\020\377\201\200"
      "\020Br\n\010protodefB\025c_business_nt_messageZ\036pr"
      "otodef/c_business_nt_message\242\002\026C_busines"
      "s_nt_message_\252\002\025c_business_nt_message"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1037);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "c_business_nt_message.proto", &protobuf_RegisterTypes);
  ::b_error::protobuf_b_5ferror_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_c_5fbusiness_5fnt_5fmessage_2eproto

const ::google::protobuf::EnumDescriptor* nt_message_consume_by_id_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[0];
}
bool nt_message_consume_by_id_rq_msg_IsValid(int value) {
  switch (value) {
    case 33554433:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_consume_by_id_rq_msg nt_message_consume_by_id_rq::id;
const nt_message_consume_by_id_rq_msg nt_message_consume_by_id_rq::msg_MIN;
const nt_message_consume_by_id_rq_msg nt_message_consume_by_id_rq::msg_MAX;
const int nt_message_consume_by_id_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nt_message_consume_by_id_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[1];
}
bool nt_message_consume_by_id_rs_msg_IsValid(int value) {
  switch (value) {
    case 33554434:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_consume_by_id_rs_msg nt_message_consume_by_id_rs::id;
const nt_message_consume_by_id_rs_msg nt_message_consume_by_id_rs::msg_MIN;
const nt_message_consume_by_id_rs_msg nt_message_consume_by_id_rs::msg_MAX;
const int nt_message_consume_by_id_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nt_message_consume_by_maxid_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[2];
}
bool nt_message_consume_by_maxid_rq_msg_IsValid(int value) {
  switch (value) {
    case 33554435:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_consume_by_maxid_rq_msg nt_message_consume_by_maxid_rq::id;
const nt_message_consume_by_maxid_rq_msg nt_message_consume_by_maxid_rq::msg_MIN;
const nt_message_consume_by_maxid_rq_msg nt_message_consume_by_maxid_rq::msg_MAX;
const int nt_message_consume_by_maxid_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nt_message_consume_by_maxid_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[3];
}
bool nt_message_consume_by_maxid_rs_msg_IsValid(int value) {
  switch (value) {
    case 33554436:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_consume_by_maxid_rs_msg nt_message_consume_by_maxid_rs::id;
const nt_message_consume_by_maxid_rs_msg nt_message_consume_by_maxid_rs::msg_MIN;
const nt_message_consume_by_maxid_rs_msg nt_message_consume_by_maxid_rs::msg_MAX;
const int nt_message_consume_by_maxid_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nt_message_read_note_id_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[4];
}
bool nt_message_read_note_id_rq_msg_IsValid(int value) {
  switch (value) {
    case 33554433:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_read_note_id_rq_msg nt_message_read_note_id_rq::id;
const nt_message_read_note_id_rq_msg nt_message_read_note_id_rq::msg_MIN;
const nt_message_read_note_id_rq_msg nt_message_read_note_id_rq::msg_MAX;
const int nt_message_read_note_id_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nt_message_read_note_id_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[5];
}
bool nt_message_read_note_id_rs_msg_IsValid(int value) {
  switch (value) {
    case 33554434:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_read_note_id_rs_msg nt_message_read_note_id_rs::id;
const nt_message_read_note_id_rs_msg nt_message_read_note_id_rs::msg_MIN;
const nt_message_read_note_id_rs_msg nt_message_read_note_id_rs::msg_MAX;
const int nt_message_read_note_id_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nt_message_all_unread_rq_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[6];
}
bool nt_message_all_unread_rq_msg_IsValid(int value) {
  switch (value) {
    case 33554435:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_all_unread_rq_msg nt_message_all_unread_rq::id;
const nt_message_all_unread_rq_msg nt_message_all_unread_rq::msg_MIN;
const nt_message_all_unread_rq_msg nt_message_all_unread_rq::msg_MAX;
const int nt_message_all_unread_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nt_message_all_unread_rs_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[7];
}
bool nt_message_all_unread_rs_msg_IsValid(int value) {
  switch (value) {
    case 33554436:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_all_unread_rs_msg nt_message_all_unread_rs::id;
const nt_message_all_unread_rs_msg nt_message_all_unread_rs::msg_MIN;
const nt_message_all_unread_rs_msg nt_message_all_unread_rs::msg_MAX;
const int nt_message_all_unread_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nt_message_all_unread_nt_msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[8];
}
bool nt_message_all_unread_nt_msg_IsValid(int value) {
  switch (value) {
    case 33554437:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nt_message_all_unread_nt_msg nt_message_all_unread_nt::id;
const nt_message_all_unread_nt_msg nt_message_all_unread_nt::msg_MIN;
const nt_message_all_unread_nt_msg nt_message_all_unread_nt::msg_MAX;
const int nt_message_all_unread_nt::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* msg_descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_enum_descriptors[9];
}
bool msg_IsValid(int value) {
  switch (value) {
    case 33554432:
    case 33554687:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_consume_by_id_rq::kUserIdFieldNumber;
const int nt_message_consume_by_id_rq::kNoteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_consume_by_id_rq::nt_message_consume_by_id_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_consume_by_id_rq)
}
nt_message_consume_by_id_rq::nt_message_consume_by_id_rq(const nt_message_consume_by_id_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&note_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_consume_by_id_rq)
}

void nt_message_consume_by_id_rq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
}

nt_message_consume_by_id_rq::~nt_message_consume_by_id_rq() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_consume_by_id_rq)
  SharedDtor();
}

void nt_message_consume_by_id_rq::SharedDtor() {
}

void nt_message_consume_by_id_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_consume_by_id_rq::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_consume_by_id_rq& nt_message_consume_by_id_rq::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_consume_by_id_rq* nt_message_consume_by_id_rq::New(::google::protobuf::Arena* arena) const {
  nt_message_consume_by_id_rq* n = new nt_message_consume_by_id_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_consume_by_id_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_consume_by_id_rq)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_id_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_consume_by_id_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_consume_by_id_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 note_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_note_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &note_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_consume_by_id_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_consume_by_id_rq)
  return false;
#undef DO_
}

void nt_message_consume_by_id_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_consume_by_id_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 note_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->note_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_consume_by_id_rq)
}

::google::protobuf::uint8* nt_message_consume_by_id_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_consume_by_id_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 note_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->note_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_consume_by_id_rq)
  return target;
}

size_t nt_message_consume_by_id_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_nt_message.nt_message_consume_by_id_rq)
  size_t total_size = 0;

  if (has_user_id()) {
    // required uint64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  if (has_note_id()) {
    // required uint64 note_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_id());
  }

  return total_size;
}
size_t nt_message_consume_by_id_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_consume_by_id_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

    // required uint64 note_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_consume_by_id_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_consume_by_id_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_consume_by_id_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_consume_by_id_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_consume_by_id_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_consume_by_id_rq)
    MergeFrom(*source);
  }
}

void nt_message_consume_by_id_rq::MergeFrom(const nt_message_consume_by_id_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_consume_by_id_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      note_id_ = from.note_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nt_message_consume_by_id_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_consume_by_id_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_consume_by_id_rq::CopyFrom(const nt_message_consume_by_id_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_consume_by_id_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_consume_by_id_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void nt_message_consume_by_id_rq::Swap(nt_message_consume_by_id_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_consume_by_id_rq::InternalSwap(nt_message_consume_by_id_rq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(note_id_, other->note_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_consume_by_id_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_consume_by_id_rq

// required uint64 user_id = 1;
bool nt_message_consume_by_id_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_consume_by_id_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_consume_by_id_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_consume_by_id_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_consume_by_id_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rq.user_id)
  return user_id_;
}
void nt_message_consume_by_id_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_id_rq.user_id)
}

// required uint64 note_id = 2;
bool nt_message_consume_by_id_rq::has_note_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nt_message_consume_by_id_rq::set_has_note_id() {
  _has_bits_[0] |= 0x00000002u;
}
void nt_message_consume_by_id_rq::clear_has_note_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void nt_message_consume_by_id_rq::clear_note_id() {
  note_id_ = GOOGLE_ULONGLONG(0);
  clear_has_note_id();
}
::google::protobuf::uint64 nt_message_consume_by_id_rq::note_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rq.note_id)
  return note_id_;
}
void nt_message_consume_by_id_rq::set_note_id(::google::protobuf::uint64 value) {
  set_has_note_id();
  note_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_id_rq.note_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_consume_by_id_rs::kErrorFieldNumber;
const int nt_message_consume_by_id_rs::kUserIdFieldNumber;
const int nt_message_consume_by_id_rs::kNoteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_consume_by_id_rs::nt_message_consume_by_id_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_consume_by_id_rs)
}
nt_message_consume_by_id_rs::nt_message_consume_by_id_rs(const nt_message_consume_by_id_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&note_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_consume_by_id_rs)
}

void nt_message_consume_by_id_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&note_id_) -
    reinterpret_cast<char*>(&error_) + sizeof(note_id_));
}

nt_message_consume_by_id_rs::~nt_message_consume_by_id_rs() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_consume_by_id_rs)
  SharedDtor();
}

void nt_message_consume_by_id_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void nt_message_consume_by_id_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_consume_by_id_rs::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_consume_by_id_rs& nt_message_consume_by_id_rs::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_consume_by_id_rs* nt_message_consume_by_id_rs::New(::google::protobuf::Arena* arena) const {
  nt_message_consume_by_id_rs* n = new nt_message_consume_by_id_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_consume_by_id_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_consume_by_id_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_id_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_consume_by_id_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_consume_by_id_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 note_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_note_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &note_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_consume_by_id_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_consume_by_id_rs)
  return false;
#undef DO_
}

void nt_message_consume_by_id_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_consume_by_id_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required uint64 note_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->note_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_consume_by_id_rs)
}

::google::protobuf::uint8* nt_message_consume_by_id_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_consume_by_id_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required uint64 note_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->note_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_consume_by_id_rs)
  return target;
}

size_t nt_message_consume_by_id_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_nt_message.nt_message_consume_by_id_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_id()) {
    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  if (has_note_id()) {
    // required uint64 note_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_id());
  }

  return total_size;
}
size_t nt_message_consume_by_id_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_consume_by_id_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

    // required uint64 note_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_consume_by_id_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_consume_by_id_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_consume_by_id_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_consume_by_id_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_consume_by_id_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_consume_by_id_rs)
    MergeFrom(*source);
  }
}

void nt_message_consume_by_id_rs::MergeFrom(const nt_message_consume_by_id_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_consume_by_id_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      note_id_ = from.note_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nt_message_consume_by_id_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_consume_by_id_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_consume_by_id_rs::CopyFrom(const nt_message_consume_by_id_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_consume_by_id_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_consume_by_id_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void nt_message_consume_by_id_rs::Swap(nt_message_consume_by_id_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_consume_by_id_rs::InternalSwap(nt_message_consume_by_id_rs* other) {
  std::swap(error_, other->error_);
  std::swap(user_id_, other->user_id_);
  std::swap(note_id_, other->note_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_consume_by_id_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_consume_by_id_rs

// required .b_error.info error = 1;
bool nt_message_consume_by_id_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_consume_by_id_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_consume_by_id_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_consume_by_id_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& nt_message_consume_by_id_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* nt_message_consume_by_id_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_nt_message.nt_message_consume_by_id_rs.error)
  return error_;
}
::b_error::info* nt_message_consume_by_id_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_nt_message.nt_message_consume_by_id_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void nt_message_consume_by_id_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_nt_message.nt_message_consume_by_id_rs.error)
}

// required uint64 user_id = 2;
bool nt_message_consume_by_id_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nt_message_consume_by_id_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void nt_message_consume_by_id_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void nt_message_consume_by_id_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_consume_by_id_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rs.user_id)
  return user_id_;
}
void nt_message_consume_by_id_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_id_rs.user_id)
}

// required uint64 note_id = 3;
bool nt_message_consume_by_id_rs::has_note_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void nt_message_consume_by_id_rs::set_has_note_id() {
  _has_bits_[0] |= 0x00000004u;
}
void nt_message_consume_by_id_rs::clear_has_note_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void nt_message_consume_by_id_rs::clear_note_id() {
  note_id_ = GOOGLE_ULONGLONG(0);
  clear_has_note_id();
}
::google::protobuf::uint64 nt_message_consume_by_id_rs::note_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rs.note_id)
  return note_id_;
}
void nt_message_consume_by_id_rs::set_note_id(::google::protobuf::uint64 value) {
  set_has_note_id();
  note_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_id_rs.note_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_consume_by_maxid_rq::kUserIdFieldNumber;
const int nt_message_consume_by_maxid_rq::kNoteMaxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_consume_by_maxid_rq::nt_message_consume_by_maxid_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_consume_by_maxid_rq)
}
nt_message_consume_by_maxid_rq::nt_message_consume_by_maxid_rq(const nt_message_consume_by_maxid_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&note_maxid_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_maxid_));
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_consume_by_maxid_rq)
}

void nt_message_consume_by_maxid_rq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_maxid_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_maxid_));
}

nt_message_consume_by_maxid_rq::~nt_message_consume_by_maxid_rq() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_consume_by_maxid_rq)
  SharedDtor();
}

void nt_message_consume_by_maxid_rq::SharedDtor() {
}

void nt_message_consume_by_maxid_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_consume_by_maxid_rq::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_consume_by_maxid_rq& nt_message_consume_by_maxid_rq::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_consume_by_maxid_rq* nt_message_consume_by_maxid_rq::New(::google::protobuf::Arena* arena) const {
  nt_message_consume_by_maxid_rq* n = new nt_message_consume_by_maxid_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_consume_by_maxid_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_maxid_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(note_maxid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_consume_by_maxid_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 note_maxid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_note_maxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &note_maxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_consume_by_maxid_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_consume_by_maxid_rq)
  return false;
#undef DO_
}

void nt_message_consume_by_maxid_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 note_maxid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->note_maxid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_consume_by_maxid_rq)
}

::google::protobuf::uint8* nt_message_consume_by_maxid_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 note_maxid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->note_maxid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_consume_by_maxid_rq)
  return target;
}

size_t nt_message_consume_by_maxid_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  size_t total_size = 0;

  if (has_user_id()) {
    // required uint64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  if (has_note_maxid()) {
    // required uint64 note_maxid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_maxid());
  }

  return total_size;
}
size_t nt_message_consume_by_maxid_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

    // required uint64 note_maxid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_maxid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_consume_by_maxid_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_consume_by_maxid_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_consume_by_maxid_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_consume_by_maxid_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_consume_by_maxid_rq)
    MergeFrom(*source);
  }
}

void nt_message_consume_by_maxid_rq::MergeFrom(const nt_message_consume_by_maxid_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      note_maxid_ = from.note_maxid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nt_message_consume_by_maxid_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_consume_by_maxid_rq::CopyFrom(const nt_message_consume_by_maxid_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_consume_by_maxid_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_consume_by_maxid_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void nt_message_consume_by_maxid_rq::Swap(nt_message_consume_by_maxid_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_consume_by_maxid_rq::InternalSwap(nt_message_consume_by_maxid_rq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(note_maxid_, other->note_maxid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_consume_by_maxid_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_consume_by_maxid_rq

// required uint64 user_id = 1;
bool nt_message_consume_by_maxid_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_consume_by_maxid_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_consume_by_maxid_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_consume_by_maxid_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_consume_by_maxid_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rq.user_id)
  return user_id_;
}
void nt_message_consume_by_maxid_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_maxid_rq.user_id)
}

// required uint64 note_maxid = 2;
bool nt_message_consume_by_maxid_rq::has_note_maxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nt_message_consume_by_maxid_rq::set_has_note_maxid() {
  _has_bits_[0] |= 0x00000002u;
}
void nt_message_consume_by_maxid_rq::clear_has_note_maxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void nt_message_consume_by_maxid_rq::clear_note_maxid() {
  note_maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_note_maxid();
}
::google::protobuf::uint64 nt_message_consume_by_maxid_rq::note_maxid() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rq.note_maxid)
  return note_maxid_;
}
void nt_message_consume_by_maxid_rq::set_note_maxid(::google::protobuf::uint64 value) {
  set_has_note_maxid();
  note_maxid_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_maxid_rq.note_maxid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_consume_by_maxid_rs::kErrorFieldNumber;
const int nt_message_consume_by_maxid_rs::kUserIdFieldNumber;
const int nt_message_consume_by_maxid_rs::kNoteMaxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_consume_by_maxid_rs::nt_message_consume_by_maxid_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_consume_by_maxid_rs)
}
nt_message_consume_by_maxid_rs::nt_message_consume_by_maxid_rs(const nt_message_consume_by_maxid_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&note_maxid_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_maxid_));
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_consume_by_maxid_rs)
}

void nt_message_consume_by_maxid_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&note_maxid_) -
    reinterpret_cast<char*>(&error_) + sizeof(note_maxid_));
}

nt_message_consume_by_maxid_rs::~nt_message_consume_by_maxid_rs() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_consume_by_maxid_rs)
  SharedDtor();
}

void nt_message_consume_by_maxid_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void nt_message_consume_by_maxid_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_consume_by_maxid_rs::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_consume_by_maxid_rs& nt_message_consume_by_maxid_rs::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_consume_by_maxid_rs* nt_message_consume_by_maxid_rs::New(::google::protobuf::Arena* arena) const {
  nt_message_consume_by_maxid_rs* n = new nt_message_consume_by_maxid_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_consume_by_maxid_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_maxid_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(note_maxid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_consume_by_maxid_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 note_maxid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_note_maxid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &note_maxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_consume_by_maxid_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_consume_by_maxid_rs)
  return false;
#undef DO_
}

void nt_message_consume_by_maxid_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required uint64 note_maxid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->note_maxid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_consume_by_maxid_rs)
}

::google::protobuf::uint8* nt_message_consume_by_maxid_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required uint64 note_maxid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->note_maxid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_consume_by_maxid_rs)
  return target;
}

size_t nt_message_consume_by_maxid_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_id()) {
    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  if (has_note_maxid()) {
    // required uint64 note_maxid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_maxid());
  }

  return total_size;
}
size_t nt_message_consume_by_maxid_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

    // required uint64 note_maxid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_maxid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_consume_by_maxid_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_consume_by_maxid_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_consume_by_maxid_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_consume_by_maxid_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_consume_by_maxid_rs)
    MergeFrom(*source);
  }
}

void nt_message_consume_by_maxid_rs::MergeFrom(const nt_message_consume_by_maxid_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      note_maxid_ = from.note_maxid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nt_message_consume_by_maxid_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_consume_by_maxid_rs::CopyFrom(const nt_message_consume_by_maxid_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_consume_by_maxid_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_consume_by_maxid_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void nt_message_consume_by_maxid_rs::Swap(nt_message_consume_by_maxid_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_consume_by_maxid_rs::InternalSwap(nt_message_consume_by_maxid_rs* other) {
  std::swap(error_, other->error_);
  std::swap(user_id_, other->user_id_);
  std::swap(note_maxid_, other->note_maxid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_consume_by_maxid_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_consume_by_maxid_rs

// required .b_error.info error = 1;
bool nt_message_consume_by_maxid_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_consume_by_maxid_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_consume_by_maxid_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_consume_by_maxid_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& nt_message_consume_by_maxid_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* nt_message_consume_by_maxid_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_nt_message.nt_message_consume_by_maxid_rs.error)
  return error_;
}
::b_error::info* nt_message_consume_by_maxid_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_nt_message.nt_message_consume_by_maxid_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void nt_message_consume_by_maxid_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_nt_message.nt_message_consume_by_maxid_rs.error)
}

// required uint64 user_id = 2;
bool nt_message_consume_by_maxid_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nt_message_consume_by_maxid_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void nt_message_consume_by_maxid_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void nt_message_consume_by_maxid_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_consume_by_maxid_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rs.user_id)
  return user_id_;
}
void nt_message_consume_by_maxid_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_maxid_rs.user_id)
}

// required uint64 note_maxid = 3;
bool nt_message_consume_by_maxid_rs::has_note_maxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void nt_message_consume_by_maxid_rs::set_has_note_maxid() {
  _has_bits_[0] |= 0x00000004u;
}
void nt_message_consume_by_maxid_rs::clear_has_note_maxid() {
  _has_bits_[0] &= ~0x00000004u;
}
void nt_message_consume_by_maxid_rs::clear_note_maxid() {
  note_maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_note_maxid();
}
::google::protobuf::uint64 nt_message_consume_by_maxid_rs::note_maxid() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rs.note_maxid)
  return note_maxid_;
}
void nt_message_consume_by_maxid_rs::set_note_maxid(::google::protobuf::uint64 value) {
  set_has_note_maxid();
  note_maxid_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_maxid_rs.note_maxid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_read_note_id_rq::kUserIdFieldNumber;
const int nt_message_read_note_id_rq::kNoteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_read_note_id_rq::nt_message_read_note_id_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_read_note_id_rq)
}
nt_message_read_note_id_rq::nt_message_read_note_id_rq(const nt_message_read_note_id_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&note_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_read_note_id_rq)
}

void nt_message_read_note_id_rq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
}

nt_message_read_note_id_rq::~nt_message_read_note_id_rq() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_read_note_id_rq)
  SharedDtor();
}

void nt_message_read_note_id_rq::SharedDtor() {
}

void nt_message_read_note_id_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_read_note_id_rq::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_read_note_id_rq& nt_message_read_note_id_rq::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_read_note_id_rq* nt_message_read_note_id_rq::New(::google::protobuf::Arena* arena) const {
  nt_message_read_note_id_rq* n = new nt_message_read_note_id_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_read_note_id_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_read_note_id_rq)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_id_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_read_note_id_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_read_note_id_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 note_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_note_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &note_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_read_note_id_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_read_note_id_rq)
  return false;
#undef DO_
}

void nt_message_read_note_id_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_read_note_id_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 note_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->note_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_read_note_id_rq)
}

::google::protobuf::uint8* nt_message_read_note_id_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_read_note_id_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 note_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->note_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_read_note_id_rq)
  return target;
}

size_t nt_message_read_note_id_rq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_nt_message.nt_message_read_note_id_rq)
  size_t total_size = 0;

  if (has_user_id()) {
    // required uint64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  if (has_note_id()) {
    // required uint64 note_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_id());
  }

  return total_size;
}
size_t nt_message_read_note_id_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_read_note_id_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

    // required uint64 note_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_read_note_id_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_read_note_id_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_read_note_id_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_read_note_id_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_read_note_id_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_read_note_id_rq)
    MergeFrom(*source);
  }
}

void nt_message_read_note_id_rq::MergeFrom(const nt_message_read_note_id_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_read_note_id_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      note_id_ = from.note_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nt_message_read_note_id_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_read_note_id_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_read_note_id_rq::CopyFrom(const nt_message_read_note_id_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_read_note_id_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_read_note_id_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void nt_message_read_note_id_rq::Swap(nt_message_read_note_id_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_read_note_id_rq::InternalSwap(nt_message_read_note_id_rq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(note_id_, other->note_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_read_note_id_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_read_note_id_rq

// required uint64 user_id = 1;
bool nt_message_read_note_id_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_read_note_id_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_read_note_id_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_read_note_id_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_read_note_id_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rq.user_id)
  return user_id_;
}
void nt_message_read_note_id_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_read_note_id_rq.user_id)
}

// required uint64 note_id = 2;
bool nt_message_read_note_id_rq::has_note_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nt_message_read_note_id_rq::set_has_note_id() {
  _has_bits_[0] |= 0x00000002u;
}
void nt_message_read_note_id_rq::clear_has_note_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void nt_message_read_note_id_rq::clear_note_id() {
  note_id_ = GOOGLE_ULONGLONG(0);
  clear_has_note_id();
}
::google::protobuf::uint64 nt_message_read_note_id_rq::note_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rq.note_id)
  return note_id_;
}
void nt_message_read_note_id_rq::set_note_id(::google::protobuf::uint64 value) {
  set_has_note_id();
  note_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_read_note_id_rq.note_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_read_note_id_rs::kErrorFieldNumber;
const int nt_message_read_note_id_rs::kUserIdFieldNumber;
const int nt_message_read_note_id_rs::kNoteIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_read_note_id_rs::nt_message_read_note_id_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_read_note_id_rs)
}
nt_message_read_note_id_rs::nt_message_read_note_id_rs(const nt_message_read_note_id_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&note_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_read_note_id_rs)
}

void nt_message_read_note_id_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&note_id_) -
    reinterpret_cast<char*>(&error_) + sizeof(note_id_));
}

nt_message_read_note_id_rs::~nt_message_read_note_id_rs() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_read_note_id_rs)
  SharedDtor();
}

void nt_message_read_note_id_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void nt_message_read_note_id_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_read_note_id_rs::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_read_note_id_rs& nt_message_read_note_id_rs::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_read_note_id_rs* nt_message_read_note_id_rs::New(::google::protobuf::Arena* arena) const {
  nt_message_read_note_id_rs* n = new nt_message_read_note_id_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_read_note_id_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_read_note_id_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&note_id_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(note_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_read_note_id_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_read_note_id_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 note_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_note_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &note_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_read_note_id_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_read_note_id_rs)
  return false;
#undef DO_
}

void nt_message_read_note_id_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_read_note_id_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required uint64 note_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->note_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_read_note_id_rs)
}

::google::protobuf::uint8* nt_message_read_note_id_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_read_note_id_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required uint64 note_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->note_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_read_note_id_rs)
  return target;
}

size_t nt_message_read_note_id_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_nt_message.nt_message_read_note_id_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_id()) {
    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  if (has_note_id()) {
    // required uint64 note_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_id());
  }

  return total_size;
}
size_t nt_message_read_note_id_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_read_note_id_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

    // required uint64 note_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->note_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_read_note_id_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_read_note_id_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_read_note_id_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_read_note_id_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_read_note_id_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_read_note_id_rs)
    MergeFrom(*source);
  }
}

void nt_message_read_note_id_rs::MergeFrom(const nt_message_read_note_id_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_read_note_id_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      note_id_ = from.note_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nt_message_read_note_id_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_read_note_id_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_read_note_id_rs::CopyFrom(const nt_message_read_note_id_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_read_note_id_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_read_note_id_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void nt_message_read_note_id_rs::Swap(nt_message_read_note_id_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_read_note_id_rs::InternalSwap(nt_message_read_note_id_rs* other) {
  std::swap(error_, other->error_);
  std::swap(user_id_, other->user_id_);
  std::swap(note_id_, other->note_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_read_note_id_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_read_note_id_rs

// required .b_error.info error = 1;
bool nt_message_read_note_id_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_read_note_id_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_read_note_id_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_read_note_id_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& nt_message_read_note_id_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* nt_message_read_note_id_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_nt_message.nt_message_read_note_id_rs.error)
  return error_;
}
::b_error::info* nt_message_read_note_id_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_nt_message.nt_message_read_note_id_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void nt_message_read_note_id_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_nt_message.nt_message_read_note_id_rs.error)
}

// required uint64 user_id = 2;
bool nt_message_read_note_id_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nt_message_read_note_id_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void nt_message_read_note_id_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void nt_message_read_note_id_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_read_note_id_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rs.user_id)
  return user_id_;
}
void nt_message_read_note_id_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_read_note_id_rs.user_id)
}

// required uint64 note_id = 3;
bool nt_message_read_note_id_rs::has_note_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void nt_message_read_note_id_rs::set_has_note_id() {
  _has_bits_[0] |= 0x00000004u;
}
void nt_message_read_note_id_rs::clear_has_note_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void nt_message_read_note_id_rs::clear_note_id() {
  note_id_ = GOOGLE_ULONGLONG(0);
  clear_has_note_id();
}
::google::protobuf::uint64 nt_message_read_note_id_rs::note_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rs.note_id)
  return note_id_;
}
void nt_message_read_note_id_rs::set_note_id(::google::protobuf::uint64 value) {
  set_has_note_id();
  note_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_read_note_id_rs.note_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_all_unread_rq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_all_unread_rq::nt_message_all_unread_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_all_unread_rq)
}
nt_message_all_unread_rq::nt_message_all_unread_rq(const nt_message_all_unread_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_all_unread_rq)
}

void nt_message_all_unread_rq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

nt_message_all_unread_rq::~nt_message_all_unread_rq() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_all_unread_rq)
  SharedDtor();
}

void nt_message_all_unread_rq::SharedDtor() {
}

void nt_message_all_unread_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_all_unread_rq::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_all_unread_rq& nt_message_all_unread_rq::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_all_unread_rq* nt_message_all_unread_rq::New(::google::protobuf::Arena* arena) const {
  nt_message_all_unread_rq* n = new nt_message_all_unread_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_all_unread_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_all_unread_rq)
  user_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_all_unread_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_all_unread_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_all_unread_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_all_unread_rq)
  return false;
#undef DO_
}

void nt_message_all_unread_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_all_unread_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_all_unread_rq)
}

::google::protobuf::uint8* nt_message_all_unread_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_all_unread_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_all_unread_rq)
  return target;
}

size_t nt_message_all_unread_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_all_unread_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_all_unread_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_all_unread_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_all_unread_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_all_unread_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_all_unread_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_all_unread_rq)
    MergeFrom(*source);
  }
}

void nt_message_all_unread_rq::MergeFrom(const nt_message_all_unread_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_all_unread_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_id()) {
    set_user_id(from.user_id());
  }
}

void nt_message_all_unread_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_all_unread_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_all_unread_rq::CopyFrom(const nt_message_all_unread_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_all_unread_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_all_unread_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void nt_message_all_unread_rq::Swap(nt_message_all_unread_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_all_unread_rq::InternalSwap(nt_message_all_unread_rq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_all_unread_rq::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_all_unread_rq

// required uint64 user_id = 1;
bool nt_message_all_unread_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_all_unread_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_all_unread_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_all_unread_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_all_unread_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_all_unread_rq.user_id)
  return user_id_;
}
void nt_message_all_unread_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_all_unread_rq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_all_unread_rs::kErrorFieldNumber;
const int nt_message_all_unread_rs::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_all_unread_rs::nt_message_all_unread_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_all_unread_rs)
}
nt_message_all_unread_rs::nt_message_all_unread_rs(const nt_message_all_unread_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_all_unread_rs)
}

void nt_message_all_unread_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&error_) + sizeof(user_id_));
}

nt_message_all_unread_rs::~nt_message_all_unread_rs() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_all_unread_rs)
  SharedDtor();
}

void nt_message_all_unread_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void nt_message_all_unread_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_all_unread_rs::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_all_unread_rs& nt_message_all_unread_rs::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_all_unread_rs* nt_message_all_unread_rs::New(::google::protobuf::Arena* arena) const {
  nt_message_all_unread_rs* n = new nt_message_all_unread_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_all_unread_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_all_unread_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  user_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_all_unread_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_all_unread_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_all_unread_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_all_unread_rs)
  return false;
#undef DO_
}

void nt_message_all_unread_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_all_unread_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_all_unread_rs)
}

::google::protobuf::uint8* nt_message_all_unread_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_all_unread_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_all_unread_rs)
  return target;
}

size_t nt_message_all_unread_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:c_business_nt_message.nt_message_all_unread_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_user_id()) {
    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  return total_size;
}
size_t nt_message_all_unread_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_all_unread_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_all_unread_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_all_unread_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_all_unread_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_all_unread_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_all_unread_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_all_unread_rs)
    MergeFrom(*source);
  }
}

void nt_message_all_unread_rs::MergeFrom(const nt_message_all_unread_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_all_unread_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nt_message_all_unread_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_all_unread_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_all_unread_rs::CopyFrom(const nt_message_all_unread_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_all_unread_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_all_unread_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void nt_message_all_unread_rs::Swap(nt_message_all_unread_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_all_unread_rs::InternalSwap(nt_message_all_unread_rs* other) {
  std::swap(error_, other->error_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_all_unread_rs::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_all_unread_rs

// required .b_error.info error = 1;
bool nt_message_all_unread_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_all_unread_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_all_unread_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_all_unread_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& nt_message_all_unread_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_all_unread_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* nt_message_all_unread_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_nt_message.nt_message_all_unread_rs.error)
  return error_;
}
::b_error::info* nt_message_all_unread_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_nt_message.nt_message_all_unread_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void nt_message_all_unread_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_nt_message.nt_message_all_unread_rs.error)
}

// required uint64 user_id = 2;
bool nt_message_all_unread_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nt_message_all_unread_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void nt_message_all_unread_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void nt_message_all_unread_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_all_unread_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_all_unread_rs.user_id)
  return user_id_;
}
void nt_message_all_unread_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_all_unread_rs.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nt_message_all_unread_nt::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nt_message_all_unread_nt::nt_message_all_unread_nt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c_business_nt_message.nt_message_all_unread_nt)
}
nt_message_all_unread_nt::nt_message_all_unread_nt(const nt_message_all_unread_nt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:c_business_nt_message.nt_message_all_unread_nt)
}

void nt_message_all_unread_nt::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

nt_message_all_unread_nt::~nt_message_all_unread_nt() {
  // @@protoc_insertion_point(destructor:c_business_nt_message.nt_message_all_unread_nt)
  SharedDtor();
}

void nt_message_all_unread_nt::SharedDtor() {
}

void nt_message_all_unread_nt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nt_message_all_unread_nt::descriptor() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nt_message_all_unread_nt& nt_message_all_unread_nt::default_instance() {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

nt_message_all_unread_nt* nt_message_all_unread_nt::New(::google::protobuf::Arena* arena) const {
  nt_message_all_unread_nt* n = new nt_message_all_unread_nt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nt_message_all_unread_nt::Clear() {
// @@protoc_insertion_point(message_clear_start:c_business_nt_message.nt_message_all_unread_nt)
  user_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nt_message_all_unread_nt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c_business_nt_message.nt_message_all_unread_nt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c_business_nt_message.nt_message_all_unread_nt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c_business_nt_message.nt_message_all_unread_nt)
  return false;
#undef DO_
}

void nt_message_all_unread_nt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c_business_nt_message.nt_message_all_unread_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:c_business_nt_message.nt_message_all_unread_nt)
}

::google::protobuf::uint8* nt_message_all_unread_nt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:c_business_nt_message.nt_message_all_unread_nt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c_business_nt_message.nt_message_all_unread_nt)
  return target;
}

size_t nt_message_all_unread_nt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c_business_nt_message.nt_message_all_unread_nt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 user_id = 2;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nt_message_all_unread_nt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c_business_nt_message.nt_message_all_unread_nt)
  GOOGLE_DCHECK_NE(&from, this);
  const nt_message_all_unread_nt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nt_message_all_unread_nt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c_business_nt_message.nt_message_all_unread_nt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c_business_nt_message.nt_message_all_unread_nt)
    MergeFrom(*source);
  }
}

void nt_message_all_unread_nt::MergeFrom(const nt_message_all_unread_nt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c_business_nt_message.nt_message_all_unread_nt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_id()) {
    set_user_id(from.user_id());
  }
}

void nt_message_all_unread_nt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c_business_nt_message.nt_message_all_unread_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nt_message_all_unread_nt::CopyFrom(const nt_message_all_unread_nt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c_business_nt_message.nt_message_all_unread_nt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nt_message_all_unread_nt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void nt_message_all_unread_nt::Swap(nt_message_all_unread_nt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nt_message_all_unread_nt::InternalSwap(nt_message_all_unread_nt* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nt_message_all_unread_nt::GetMetadata() const {
  protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_all_unread_nt

// required uint64 user_id = 2;
bool nt_message_all_unread_nt::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nt_message_all_unread_nt::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void nt_message_all_unread_nt::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void nt_message_all_unread_nt::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 nt_message_all_unread_nt::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_all_unread_nt.user_id)
  return user_id_;
}
void nt_message_all_unread_nt::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_all_unread_nt.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace c_business_nt_message

// @@protoc_insertion_point(global_scope)
