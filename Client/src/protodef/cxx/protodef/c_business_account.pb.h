// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_business_account.proto

#ifndef PROTOBUF_c_5fbusiness_5faccount_2eproto__INCLUDED
#define PROTOBUF_c_5fbusiness_5faccount_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "b_error.pb.h"
// @@protoc_insertion_point(includes)
namespace b_error {
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
}  // namespace b_error
namespace c_business_account {
class register_rq;
class register_rqDefaultTypeInternal;
extern register_rqDefaultTypeInternal _register_rq_default_instance_;
class register_rs;
class register_rsDefaultTypeInternal;
extern register_rsDefaultTypeInternal _register_rs_default_instance_;
class signed_in_rq;
class signed_in_rqDefaultTypeInternal;
extern signed_in_rqDefaultTypeInternal _signed_in_rq_default_instance_;
class signed_in_rs;
class signed_in_rsDefaultTypeInternal;
extern signed_in_rsDefaultTypeInternal _signed_in_rs_default_instance_;
}  // namespace c_business_account

namespace c_business_account {

namespace protobuf_c_5fbusiness_5faccount_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_c_5fbusiness_5faccount_2eproto

enum signed_in_rq_msg {
  signed_in_rq_msg_id = 33562640
};
bool signed_in_rq_msg_IsValid(int value);
const signed_in_rq_msg signed_in_rq_msg_msg_MIN = signed_in_rq_msg_id;
const signed_in_rq_msg signed_in_rq_msg_msg_MAX = signed_in_rq_msg_id;
const int signed_in_rq_msg_msg_ARRAYSIZE = signed_in_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* signed_in_rq_msg_descriptor();
inline const ::std::string& signed_in_rq_msg_Name(signed_in_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    signed_in_rq_msg_descriptor(), value);
}
inline bool signed_in_rq_msg_Parse(
    const ::std::string& name, signed_in_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<signed_in_rq_msg>(
    signed_in_rq_msg_descriptor(), name, value);
}
enum signed_in_rs_msg {
  signed_in_rs_msg_id = 33558545
};
bool signed_in_rs_msg_IsValid(int value);
const signed_in_rs_msg signed_in_rs_msg_msg_MIN = signed_in_rs_msg_id;
const signed_in_rs_msg signed_in_rs_msg_msg_MAX = signed_in_rs_msg_id;
const int signed_in_rs_msg_msg_ARRAYSIZE = signed_in_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* signed_in_rs_msg_descriptor();
inline const ::std::string& signed_in_rs_msg_Name(signed_in_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    signed_in_rs_msg_descriptor(), value);
}
inline bool signed_in_rs_msg_Parse(
    const ::std::string& name, signed_in_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<signed_in_rs_msg>(
    signed_in_rs_msg_descriptor(), name, value);
}
enum register_rq_msg {
  register_rq_msg_id = 33562656
};
bool register_rq_msg_IsValid(int value);
const register_rq_msg register_rq_msg_msg_MIN = register_rq_msg_id;
const register_rq_msg register_rq_msg_msg_MAX = register_rq_msg_id;
const int register_rq_msg_msg_ARRAYSIZE = register_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* register_rq_msg_descriptor();
inline const ::std::string& register_rq_msg_Name(register_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    register_rq_msg_descriptor(), value);
}
inline bool register_rq_msg_Parse(
    const ::std::string& name, register_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<register_rq_msg>(
    register_rq_msg_descriptor(), name, value);
}
enum register_rs_msg {
  register_rs_msg_id = 33558561
};
bool register_rs_msg_IsValid(int value);
const register_rs_msg register_rs_msg_msg_MIN = register_rs_msg_id;
const register_rs_msg register_rs_msg_msg_MAX = register_rs_msg_id;
const int register_rs_msg_msg_ARRAYSIZE = register_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* register_rs_msg_descriptor();
inline const ::std::string& register_rs_msg_Name(register_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    register_rs_msg_descriptor(), value);
}
inline bool register_rs_msg_Parse(
    const ::std::string& name, register_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<register_rs_msg>(
    register_rs_msg_descriptor(), name, value);
}
enum msg {
  min_id = 33562624,
  max_id = 33562879
};
bool msg_IsValid(int value);
const msg msg_MIN = min_id;
const msg msg_MAX = max_id;
const int msg_ARRAYSIZE = msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* msg_descriptor();
inline const ::std::string& msg_Name(msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    msg_descriptor(), value);
}
inline bool msg_Parse(
    const ::std::string& name, msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<msg>(
    msg_descriptor(), name, value);
}
// ===================================================================

class signed_in_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_account.signed_in_rq) */ {
 public:
  signed_in_rq();
  virtual ~signed_in_rq();

  signed_in_rq(const signed_in_rq& from);

  inline signed_in_rq& operator=(const signed_in_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const signed_in_rq& default_instance();

  static inline const signed_in_rq* internal_default_instance() {
    return reinterpret_cast<const signed_in_rq*>(
               &_signed_in_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(signed_in_rq* other);

  // implements Message ----------------------------------------------

  inline signed_in_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  signed_in_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const signed_in_rq& from);
  void MergeFrom(const signed_in_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(signed_in_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef signed_in_rq_msg msg;
  static const msg id =
    signed_in_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return signed_in_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    signed_in_rq_msg_msg_MIN;
  static const msg msg_MAX =
    signed_in_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    signed_in_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return signed_in_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return signed_in_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return signed_in_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:c_business_account.signed_in_rq)
 private:
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_password();
  void clear_has_password();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  friend struct protobuf_c_5fbusiness_5faccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class signed_in_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_account.signed_in_rs) */ {
 public:
  signed_in_rs();
  virtual ~signed_in_rs();

  signed_in_rs(const signed_in_rs& from);

  inline signed_in_rs& operator=(const signed_in_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const signed_in_rs& default_instance();

  static inline const signed_in_rs* internal_default_instance() {
    return reinterpret_cast<const signed_in_rs*>(
               &_signed_in_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(signed_in_rs* other);

  // implements Message ----------------------------------------------

  inline signed_in_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  signed_in_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const signed_in_rs& from);
  void MergeFrom(const signed_in_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(signed_in_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef signed_in_rs_msg msg;
  static const msg id =
    signed_in_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return signed_in_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    signed_in_rs_msg_msg_MIN;
  static const msg msg_MAX =
    signed_in_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    signed_in_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return signed_in_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return signed_in_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return signed_in_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_name = 2;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // required string token = 4;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_account.signed_in_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_token();
  void clear_has_token();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  friend struct protobuf_c_5fbusiness_5faccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class register_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_account.register_rq) */ {
 public:
  register_rq();
  virtual ~register_rq();

  register_rq(const register_rq& from);

  inline register_rq& operator=(const register_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const register_rq& default_instance();

  static inline const register_rq* internal_default_instance() {
    return reinterpret_cast<const register_rq*>(
               &_register_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(register_rq* other);

  // implements Message ----------------------------------------------

  inline register_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  register_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const register_rq& from);
  void MergeFrom(const register_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(register_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef register_rq_msg msg;
  static const msg id =
    register_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return register_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    register_rq_msg_msg_MIN;
  static const msg msg_MAX =
    register_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    register_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return register_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return register_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return register_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:c_business_account.register_rq)
 private:
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_password();
  void clear_has_password();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  friend struct protobuf_c_5fbusiness_5faccount_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class register_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_account.register_rs) */ {
 public:
  register_rs();
  virtual ~register_rs();

  register_rs(const register_rs& from);

  inline register_rs& operator=(const register_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const register_rs& default_instance();

  static inline const register_rs* internal_default_instance() {
    return reinterpret_cast<const register_rs*>(
               &_register_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(register_rs* other);

  // implements Message ----------------------------------------------

  inline register_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  register_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const register_rs& from);
  void MergeFrom(const register_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(register_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef register_rs_msg msg;
  static const msg id =
    register_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return register_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    register_rs_msg_msg_MIN;
  static const msg msg_MAX =
    register_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    register_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return register_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return register_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return register_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string user_name = 2;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // required string token = 4;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_account.register_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_token();
  void clear_has_token();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  friend struct protobuf_c_5fbusiness_5faccount_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// signed_in_rq

// required string user_name = 1;
inline bool signed_in_rq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void signed_in_rq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void signed_in_rq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void signed_in_rq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& signed_in_rq::user_name() const {
  // @@protoc_insertion_point(field_get:c_business_account.signed_in_rq.user_name)
  return user_name_.GetNoArena();
}
inline void signed_in_rq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_account.signed_in_rq.user_name)
}
#if LANG_CXX11
inline void signed_in_rq::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_account.signed_in_rq.user_name)
}
#endif
inline void signed_in_rq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_account.signed_in_rq.user_name)
}
inline void signed_in_rq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_account.signed_in_rq.user_name)
}
inline ::std::string* signed_in_rq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:c_business_account.signed_in_rq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signed_in_rq::release_user_name() {
  // @@protoc_insertion_point(field_release:c_business_account.signed_in_rq.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signed_in_rq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:c_business_account.signed_in_rq.user_name)
}

// required string password = 2;
inline bool signed_in_rq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void signed_in_rq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void signed_in_rq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void signed_in_rq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& signed_in_rq::password() const {
  // @@protoc_insertion_point(field_get:c_business_account.signed_in_rq.password)
  return password_.GetNoArena();
}
inline void signed_in_rq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_account.signed_in_rq.password)
}
#if LANG_CXX11
inline void signed_in_rq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_account.signed_in_rq.password)
}
#endif
inline void signed_in_rq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_account.signed_in_rq.password)
}
inline void signed_in_rq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_account.signed_in_rq.password)
}
inline ::std::string* signed_in_rq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:c_business_account.signed_in_rq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signed_in_rq::release_password() {
  // @@protoc_insertion_point(field_release:c_business_account.signed_in_rq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signed_in_rq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:c_business_account.signed_in_rq.password)
}

// -------------------------------------------------------------------

// signed_in_rs

// required .b_error.info error = 1;
inline bool signed_in_rs::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void signed_in_rs::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void signed_in_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void signed_in_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& signed_in_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_account.signed_in_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* signed_in_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_account.signed_in_rs.error)
  return error_;
}
inline ::b_error::info* signed_in_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_account.signed_in_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void signed_in_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_account.signed_in_rs.error)
}

// required string user_name = 2;
inline bool signed_in_rs::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void signed_in_rs::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void signed_in_rs::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void signed_in_rs::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& signed_in_rs::user_name() const {
  // @@protoc_insertion_point(field_get:c_business_account.signed_in_rs.user_name)
  return user_name_.GetNoArena();
}
inline void signed_in_rs::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_account.signed_in_rs.user_name)
}
#if LANG_CXX11
inline void signed_in_rs::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_account.signed_in_rs.user_name)
}
#endif
inline void signed_in_rs::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_account.signed_in_rs.user_name)
}
inline void signed_in_rs::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_account.signed_in_rs.user_name)
}
inline ::std::string* signed_in_rs::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:c_business_account.signed_in_rs.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signed_in_rs::release_user_name() {
  // @@protoc_insertion_point(field_release:c_business_account.signed_in_rs.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signed_in_rs::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:c_business_account.signed_in_rs.user_name)
}

// required uint64 user_id = 3;
inline bool signed_in_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void signed_in_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void signed_in_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void signed_in_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 signed_in_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_account.signed_in_rs.user_id)
  return user_id_;
}
inline void signed_in_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_account.signed_in_rs.user_id)
}

// required string token = 4;
inline bool signed_in_rs::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void signed_in_rs::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void signed_in_rs::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void signed_in_rs::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& signed_in_rs::token() const {
  // @@protoc_insertion_point(field_get:c_business_account.signed_in_rs.token)
  return token_.GetNoArena();
}
inline void signed_in_rs::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_account.signed_in_rs.token)
}
#if LANG_CXX11
inline void signed_in_rs::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_account.signed_in_rs.token)
}
#endif
inline void signed_in_rs::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_account.signed_in_rs.token)
}
inline void signed_in_rs::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_account.signed_in_rs.token)
}
inline ::std::string* signed_in_rs::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:c_business_account.signed_in_rs.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signed_in_rs::release_token() {
  // @@protoc_insertion_point(field_release:c_business_account.signed_in_rs.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signed_in_rs::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c_business_account.signed_in_rs.token)
}

// -------------------------------------------------------------------

// register_rq

// required string user_name = 1;
inline bool register_rq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void register_rq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void register_rq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void register_rq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& register_rq::user_name() const {
  // @@protoc_insertion_point(field_get:c_business_account.register_rq.user_name)
  return user_name_.GetNoArena();
}
inline void register_rq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_account.register_rq.user_name)
}
#if LANG_CXX11
inline void register_rq::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_account.register_rq.user_name)
}
#endif
inline void register_rq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_account.register_rq.user_name)
}
inline void register_rq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_account.register_rq.user_name)
}
inline ::std::string* register_rq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:c_business_account.register_rq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* register_rq::release_user_name() {
  // @@protoc_insertion_point(field_release:c_business_account.register_rq.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void register_rq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:c_business_account.register_rq.user_name)
}

// required string password = 2;
inline bool register_rq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void register_rq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void register_rq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void register_rq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& register_rq::password() const {
  // @@protoc_insertion_point(field_get:c_business_account.register_rq.password)
  return password_.GetNoArena();
}
inline void register_rq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_account.register_rq.password)
}
#if LANG_CXX11
inline void register_rq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_account.register_rq.password)
}
#endif
inline void register_rq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_account.register_rq.password)
}
inline void register_rq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_account.register_rq.password)
}
inline ::std::string* register_rq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:c_business_account.register_rq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* register_rq::release_password() {
  // @@protoc_insertion_point(field_release:c_business_account.register_rq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void register_rq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:c_business_account.register_rq.password)
}

// -------------------------------------------------------------------

// register_rs

// required .b_error.info error = 1;
inline bool register_rs::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void register_rs::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void register_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void register_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& register_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_account.register_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* register_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_account.register_rs.error)
  return error_;
}
inline ::b_error::info* register_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_account.register_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void register_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_account.register_rs.error)
}

// required string user_name = 2;
inline bool register_rs::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void register_rs::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void register_rs::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void register_rs::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& register_rs::user_name() const {
  // @@protoc_insertion_point(field_get:c_business_account.register_rs.user_name)
  return user_name_.GetNoArena();
}
inline void register_rs::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_account.register_rs.user_name)
}
#if LANG_CXX11
inline void register_rs::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_account.register_rs.user_name)
}
#endif
inline void register_rs::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_account.register_rs.user_name)
}
inline void register_rs::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_account.register_rs.user_name)
}
inline ::std::string* register_rs::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:c_business_account.register_rs.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* register_rs::release_user_name() {
  // @@protoc_insertion_point(field_release:c_business_account.register_rs.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void register_rs::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:c_business_account.register_rs.user_name)
}

// required uint64 user_id = 3;
inline bool register_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void register_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void register_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void register_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 register_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_account.register_rs.user_id)
  return user_id_;
}
inline void register_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_account.register_rs.user_id)
}

// required string token = 4;
inline bool register_rs::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void register_rs::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void register_rs::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void register_rs::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& register_rs::token() const {
  // @@protoc_insertion_point(field_get:c_business_account.register_rs.token)
  return token_.GetNoArena();
}
inline void register_rs::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c_business_account.register_rs.token)
}
#if LANG_CXX11
inline void register_rs::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c_business_account.register_rs.token)
}
#endif
inline void register_rs::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c_business_account.register_rs.token)
}
inline void register_rs::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c_business_account.register_rs.token)
}
inline ::std::string* register_rs::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:c_business_account.register_rs.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* register_rs::release_token() {
  // @@protoc_insertion_point(field_release:c_business_account.register_rs.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void register_rs::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:c_business_account.register_rs.token)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace c_business_account

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::c_business_account::signed_in_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_account::signed_in_rq_msg>() {
  return ::c_business_account::signed_in_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_account::signed_in_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_account::signed_in_rs_msg>() {
  return ::c_business_account::signed_in_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_account::register_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_account::register_rq_msg>() {
  return ::c_business_account::register_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_account::register_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_account::register_rs_msg>() {
  return ::c_business_account::register_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_account::msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_account::msg>() {
  return ::c_business_account::msg_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_c_5fbusiness_5faccount_2eproto__INCLUDED
