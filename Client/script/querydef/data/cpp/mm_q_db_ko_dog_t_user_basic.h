//
//	Generated by lua
//	copyright longer 2018
//  mm_q_db_ko_dog_t_user_basic.h

#ifndef __mm_q_db_ko_dog_t_user_basic_h__
#define __mm_q_db_ko_dog_t_user_basic_h__
#include "mysql/mm_db_mysql_query.h"
#include "dish/mm_package.h"
#include "core/mm_logger.h"
#include "querydef/mm_m_db_ko_dog_t_user_basic.h"

namespace mm
{
	//
	//	struct definition for p_userinfo_add	//
	struct p_userinfo_add : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		std::string name;// 用户名.
		std::string password;// 用户密码.
		std::string nick;// 昵称.
		mm_uint64_t id;// 用户id.
	public:
		virtual ~p_userinfo_add();
	public:
		p_userinfo_add();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_userinfo_check	//
	struct p_userinfo_check : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		std::string name;// 用户名.
		std::string password;// 用户密码.
		mm_uint64_t id;// 用户id.
	public:
		virtual ~p_userinfo_check();
	public:
		p_userinfo_check();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
}
#endif//__dish_q_db_ko_dog_t_user_basic_h__