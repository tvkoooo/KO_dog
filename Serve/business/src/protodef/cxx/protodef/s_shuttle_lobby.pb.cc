// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s_shuttle_lobby.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s_shuttle_lobby.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace s_shuttle_lobby {
class token_verify_evDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<token_verify_ev> {
} _token_verify_ev_default_instance_;
class heartbeat_evDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<heartbeat_ev> {
} _heartbeat_ev_default_instance_;

namespace protobuf_s_5fshuttle_5flobby_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_ev, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_ev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_ev, event_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_ev, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_ev, sid_now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(token_verify_ev, sid_old_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_ev, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_ev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_ev, event_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_ev, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_ev, timecode_native_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat_ev, coord_info_),
  1,
  2,
  3,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(token_verify_ev)},
  { 13, 22, sizeof(heartbeat_ev)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_token_verify_ev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_heartbeat_ev_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "s_shuttle_lobby.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _token_verify_ev_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _heartbeat_ev_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::b_math::protobuf_b_5fmath_2eproto::InitDefaults();
  _token_verify_ev_default_instance_.DefaultConstruct();
  _heartbeat_ev_default_instance_.DefaultConstruct();
  _heartbeat_ev_default_instance_.get_mutable()->coord_info_ = const_cast< ::b_math::coord*>(
      ::b_math::coord::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025s_shuttle_lobby.proto\022\017s_shuttle_lobby"
      "\032\014b_math.proto\"r\n\017token_verify_ev\022\025\n\neve"
      "nt_time\030\001 \002(\004:\0010\022\016\n\003uid\030\002 \002(\004:\0010\022\022\n\007sid_"
      "now\030\003 \002(\004:\0010\022\022\n\007sid_old\030\004 \002(\004:\0010\"\020\n\003msg\022"
      "\t\n\002id\020\201\242\200\010\"\206\001\n\014heartbeat_ev\022\025\n\nevent_tim"
      "e\030\001 \002(\004:\0010\022\016\n\003uid\030\002 \002(\004:\0010\022\032\n\017timecode_n"
      "ative\030\003 \002(\004:\0010\022!\n\ncoord_info\030\004 \002(\0132\r.b_m"
      "ath.coord\"\020\n\003msg\022\t\n\002id\020\202\242\200\010*#\n\003msg\022\r\n\006mi"
      "n_id\020\200\242\200\010\022\r\n\006max_id\020\377\243\200\010BZ\n\010protodefB\017s_"
      "shuttle_lobbyZ\030protodef/s_shuttle_lobby\242"
      "\002\020S_shuttle_lobby_\252\002\017s_shuttle_lobby"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s_shuttle_lobby.proto", &protobuf_RegisterTypes);
  ::b_math::protobuf_b_5fmath_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_s_5fshuttle_5flobby_2eproto

const ::google::protobuf::EnumDescriptor* token_verify_ev_msg_descriptor() {
  protobuf_s_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[0];
}
bool token_verify_ev_msg_IsValid(int value) {
  switch (value) {
    case 16781569:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const token_verify_ev_msg token_verify_ev::id;
const token_verify_ev_msg token_verify_ev::msg_MIN;
const token_verify_ev_msg token_verify_ev::msg_MAX;
const int token_verify_ev::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* heartbeat_ev_msg_descriptor() {
  protobuf_s_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[1];
}
bool heartbeat_ev_msg_IsValid(int value) {
  switch (value) {
    case 16781570:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const heartbeat_ev_msg heartbeat_ev::id;
const heartbeat_ev_msg heartbeat_ev::msg_MIN;
const heartbeat_ev_msg heartbeat_ev::msg_MAX;
const int heartbeat_ev::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* msg_descriptor() {
  protobuf_s_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fshuttle_5flobby_2eproto::file_level_enum_descriptors[2];
}
bool msg_IsValid(int value) {
  switch (value) {
    case 16781568:
    case 16781823:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int token_verify_ev::kEventTimeFieldNumber;
const int token_verify_ev::kUidFieldNumber;
const int token_verify_ev::kSidNowFieldNumber;
const int token_verify_ev::kSidOldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

token_verify_ev::token_verify_ev()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_s_5fshuttle_5flobby_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:s_shuttle_lobby.token_verify_ev)
}
token_verify_ev::token_verify_ev(const token_verify_ev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_time_, &from.event_time_,
    reinterpret_cast<char*>(&sid_old_) -
    reinterpret_cast<char*>(&event_time_) + sizeof(sid_old_));
  // @@protoc_insertion_point(copy_constructor:s_shuttle_lobby.token_verify_ev)
}

void token_verify_ev::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_time_, 0, reinterpret_cast<char*>(&sid_old_) -
    reinterpret_cast<char*>(&event_time_) + sizeof(sid_old_));
}

token_verify_ev::~token_verify_ev() {
  // @@protoc_insertion_point(destructor:s_shuttle_lobby.token_verify_ev)
  SharedDtor();
}

void token_verify_ev::SharedDtor() {
}

void token_verify_ev::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* token_verify_ev::descriptor() {
  protobuf_s_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const token_verify_ev& token_verify_ev::default_instance() {
  protobuf_s_5fshuttle_5flobby_2eproto::InitDefaults();
  return *internal_default_instance();
}

token_verify_ev* token_verify_ev::New(::google::protobuf::Arena* arena) const {
  token_verify_ev* n = new token_verify_ev;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void token_verify_ev::Clear() {
// @@protoc_insertion_point(message_clear_start:s_shuttle_lobby.token_verify_ev)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&event_time_, 0, reinterpret_cast<char*>(&sid_old_) -
      reinterpret_cast<char*>(&event_time_) + sizeof(sid_old_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool token_verify_ev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s_shuttle_lobby.token_verify_ev)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 event_time = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 uid = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 sid_now = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sid_now();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sid_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 sid_old = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sid_old();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sid_old_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s_shuttle_lobby.token_verify_ev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s_shuttle_lobby.token_verify_ev)
  return false;
#undef DO_
}

void token_verify_ev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s_shuttle_lobby.token_verify_ev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 event_time = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_time(), output);
  }

  // required uint64 uid = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required uint64 sid_now = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sid_now(), output);
  }

  // required uint64 sid_old = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sid_old(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s_shuttle_lobby.token_verify_ev)
}

::google::protobuf::uint8* token_verify_ev::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s_shuttle_lobby.token_verify_ev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 event_time = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_time(), target);
  }

  // required uint64 uid = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required uint64 sid_now = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sid_now(), target);
  }

  // required uint64 sid_old = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sid_old(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s_shuttle_lobby.token_verify_ev)
  return target;
}

size_t token_verify_ev::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:s_shuttle_lobby.token_verify_ev)
  size_t total_size = 0;

  if (has_event_time()) {
    // required uint64 event_time = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->event_time());
  }

  if (has_uid()) {
    // required uint64 uid = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  if (has_sid_now()) {
    // required uint64 sid_now = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sid_now());
  }

  if (has_sid_old()) {
    // required uint64 sid_old = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sid_old());
  }

  return total_size;
}
size_t token_verify_ev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s_shuttle_lobby.token_verify_ev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 event_time = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->event_time());

    // required uint64 uid = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

    // required uint64 sid_now = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sid_now());

    // required uint64 sid_old = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sid_old());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void token_verify_ev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s_shuttle_lobby.token_verify_ev)
  GOOGLE_DCHECK_NE(&from, this);
  const token_verify_ev* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const token_verify_ev>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s_shuttle_lobby.token_verify_ev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s_shuttle_lobby.token_verify_ev)
    MergeFrom(*source);
  }
}

void token_verify_ev::MergeFrom(const token_verify_ev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s_shuttle_lobby.token_verify_ev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      event_time_ = from.event_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sid_now_ = from.sid_now_;
    }
    if (cached_has_bits & 0x00000008u) {
      sid_old_ = from.sid_old_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void token_verify_ev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s_shuttle_lobby.token_verify_ev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void token_verify_ev::CopyFrom(const token_verify_ev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s_shuttle_lobby.token_verify_ev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool token_verify_ev::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void token_verify_ev::Swap(token_verify_ev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void token_verify_ev::InternalSwap(token_verify_ev* other) {
  std::swap(event_time_, other->event_time_);
  std::swap(uid_, other->uid_);
  std::swap(sid_now_, other->sid_now_);
  std::swap(sid_old_, other->sid_old_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata token_verify_ev::GetMetadata() const {
  protobuf_s_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// token_verify_ev

// required uint64 event_time = 1 [default = 0];
bool token_verify_ev::has_event_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void token_verify_ev::set_has_event_time() {
  _has_bits_[0] |= 0x00000001u;
}
void token_verify_ev::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void token_verify_ev::clear_event_time() {
  event_time_ = GOOGLE_ULONGLONG(0);
  clear_has_event_time();
}
::google::protobuf::uint64 token_verify_ev::event_time() const {
  // @@protoc_insertion_point(field_get:s_shuttle_lobby.token_verify_ev.event_time)
  return event_time_;
}
void token_verify_ev::set_event_time(::google::protobuf::uint64 value) {
  set_has_event_time();
  event_time_ = value;
  // @@protoc_insertion_point(field_set:s_shuttle_lobby.token_verify_ev.event_time)
}

// required uint64 uid = 2 [default = 0];
bool token_verify_ev::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void token_verify_ev::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void token_verify_ev::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void token_verify_ev::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 token_verify_ev::uid() const {
  // @@protoc_insertion_point(field_get:s_shuttle_lobby.token_verify_ev.uid)
  return uid_;
}
void token_verify_ev::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:s_shuttle_lobby.token_verify_ev.uid)
}

// required uint64 sid_now = 3 [default = 0];
bool token_verify_ev::has_sid_now() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void token_verify_ev::set_has_sid_now() {
  _has_bits_[0] |= 0x00000004u;
}
void token_verify_ev::clear_has_sid_now() {
  _has_bits_[0] &= ~0x00000004u;
}
void token_verify_ev::clear_sid_now() {
  sid_now_ = GOOGLE_ULONGLONG(0);
  clear_has_sid_now();
}
::google::protobuf::uint64 token_verify_ev::sid_now() const {
  // @@protoc_insertion_point(field_get:s_shuttle_lobby.token_verify_ev.sid_now)
  return sid_now_;
}
void token_verify_ev::set_sid_now(::google::protobuf::uint64 value) {
  set_has_sid_now();
  sid_now_ = value;
  // @@protoc_insertion_point(field_set:s_shuttle_lobby.token_verify_ev.sid_now)
}

// required uint64 sid_old = 4 [default = 0];
bool token_verify_ev::has_sid_old() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void token_verify_ev::set_has_sid_old() {
  _has_bits_[0] |= 0x00000008u;
}
void token_verify_ev::clear_has_sid_old() {
  _has_bits_[0] &= ~0x00000008u;
}
void token_verify_ev::clear_sid_old() {
  sid_old_ = GOOGLE_ULONGLONG(0);
  clear_has_sid_old();
}
::google::protobuf::uint64 token_verify_ev::sid_old() const {
  // @@protoc_insertion_point(field_get:s_shuttle_lobby.token_verify_ev.sid_old)
  return sid_old_;
}
void token_verify_ev::set_sid_old(::google::protobuf::uint64 value) {
  set_has_sid_old();
  sid_old_ = value;
  // @@protoc_insertion_point(field_set:s_shuttle_lobby.token_verify_ev.sid_old)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int heartbeat_ev::kEventTimeFieldNumber;
const int heartbeat_ev::kUidFieldNumber;
const int heartbeat_ev::kTimecodeNativeFieldNumber;
const int heartbeat_ev::kCoordInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

heartbeat_ev::heartbeat_ev()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_s_5fshuttle_5flobby_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:s_shuttle_lobby.heartbeat_ev)
}
heartbeat_ev::heartbeat_ev(const heartbeat_ev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_coord_info()) {
    coord_info_ = new ::b_math::coord(*from.coord_info_);
  } else {
    coord_info_ = NULL;
  }
  ::memcpy(&event_time_, &from.event_time_,
    reinterpret_cast<char*>(&timecode_native_) -
    reinterpret_cast<char*>(&event_time_) + sizeof(timecode_native_));
  // @@protoc_insertion_point(copy_constructor:s_shuttle_lobby.heartbeat_ev)
}

void heartbeat_ev::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&coord_info_, 0, reinterpret_cast<char*>(&timecode_native_) -
    reinterpret_cast<char*>(&coord_info_) + sizeof(timecode_native_));
}

heartbeat_ev::~heartbeat_ev() {
  // @@protoc_insertion_point(destructor:s_shuttle_lobby.heartbeat_ev)
  SharedDtor();
}

void heartbeat_ev::SharedDtor() {
  if (this != internal_default_instance()) {
    delete coord_info_;
  }
}

void heartbeat_ev::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartbeat_ev::descriptor() {
  protobuf_s_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const heartbeat_ev& heartbeat_ev::default_instance() {
  protobuf_s_5fshuttle_5flobby_2eproto::InitDefaults();
  return *internal_default_instance();
}

heartbeat_ev* heartbeat_ev::New(::google::protobuf::Arena* arena) const {
  heartbeat_ev* n = new heartbeat_ev;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void heartbeat_ev::Clear() {
// @@protoc_insertion_point(message_clear_start:s_shuttle_lobby.heartbeat_ev)
  if (has_coord_info()) {
    GOOGLE_DCHECK(coord_info_ != NULL);
    coord_info_->::b_math::coord::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&event_time_, 0, reinterpret_cast<char*>(&timecode_native_) -
      reinterpret_cast<char*>(&event_time_) + sizeof(timecode_native_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool heartbeat_ev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s_shuttle_lobby.heartbeat_ev)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 event_time = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 uid = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 timecode_native = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timecode_native();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timecode_native_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .b_math.coord coord_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s_shuttle_lobby.heartbeat_ev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s_shuttle_lobby.heartbeat_ev)
  return false;
#undef DO_
}

void heartbeat_ev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s_shuttle_lobby.heartbeat_ev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 event_time = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_time(), output);
  }

  // required uint64 uid = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required uint64 timecode_native = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timecode_native(), output);
  }

  // required .b_math.coord coord_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->coord_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s_shuttle_lobby.heartbeat_ev)
}

::google::protobuf::uint8* heartbeat_ev::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s_shuttle_lobby.heartbeat_ev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 event_time = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_time(), target);
  }

  // required uint64 uid = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required uint64 timecode_native = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timecode_native(), target);
  }

  // required .b_math.coord coord_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->coord_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s_shuttle_lobby.heartbeat_ev)
  return target;
}

size_t heartbeat_ev::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:s_shuttle_lobby.heartbeat_ev)
  size_t total_size = 0;

  if (has_coord_info()) {
    // required .b_math.coord coord_info = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_info_);
  }

  if (has_event_time()) {
    // required uint64 event_time = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->event_time());
  }

  if (has_uid()) {
    // required uint64 uid = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  if (has_timecode_native()) {
    // required uint64 timecode_native = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timecode_native());
  }

  return total_size;
}
size_t heartbeat_ev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s_shuttle_lobby.heartbeat_ev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .b_math.coord coord_info = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coord_info_);

    // required uint64 event_time = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->event_time());

    // required uint64 uid = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

    // required uint64 timecode_native = 3 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timecode_native());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartbeat_ev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s_shuttle_lobby.heartbeat_ev)
  GOOGLE_DCHECK_NE(&from, this);
  const heartbeat_ev* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const heartbeat_ev>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s_shuttle_lobby.heartbeat_ev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s_shuttle_lobby.heartbeat_ev)
    MergeFrom(*source);
  }
}

void heartbeat_ev::MergeFrom(const heartbeat_ev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s_shuttle_lobby.heartbeat_ev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_coord_info()->::b_math::coord::MergeFrom(from.coord_info());
    }
    if (cached_has_bits & 0x00000002u) {
      event_time_ = from.event_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      timecode_native_ = from.timecode_native_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void heartbeat_ev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s_shuttle_lobby.heartbeat_ev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartbeat_ev::CopyFrom(const heartbeat_ev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s_shuttle_lobby.heartbeat_ev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartbeat_ev::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_coord_info()) {
    if (!this->coord_info_->IsInitialized()) return false;
  }
  return true;
}

void heartbeat_ev::Swap(heartbeat_ev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void heartbeat_ev::InternalSwap(heartbeat_ev* other) {
  std::swap(coord_info_, other->coord_info_);
  std::swap(event_time_, other->event_time_);
  std::swap(uid_, other->uid_);
  std::swap(timecode_native_, other->timecode_native_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata heartbeat_ev::GetMetadata() const {
  protobuf_s_5fshuttle_5flobby_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fshuttle_5flobby_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// heartbeat_ev

// required uint64 event_time = 1 [default = 0];
bool heartbeat_ev::has_event_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void heartbeat_ev::set_has_event_time() {
  _has_bits_[0] |= 0x00000002u;
}
void heartbeat_ev::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void heartbeat_ev::clear_event_time() {
  event_time_ = GOOGLE_ULONGLONG(0);
  clear_has_event_time();
}
::google::protobuf::uint64 heartbeat_ev::event_time() const {
  // @@protoc_insertion_point(field_get:s_shuttle_lobby.heartbeat_ev.event_time)
  return event_time_;
}
void heartbeat_ev::set_event_time(::google::protobuf::uint64 value) {
  set_has_event_time();
  event_time_ = value;
  // @@protoc_insertion_point(field_set:s_shuttle_lobby.heartbeat_ev.event_time)
}

// required uint64 uid = 2 [default = 0];
bool heartbeat_ev::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void heartbeat_ev::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
void heartbeat_ev::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
void heartbeat_ev::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
::google::protobuf::uint64 heartbeat_ev::uid() const {
  // @@protoc_insertion_point(field_get:s_shuttle_lobby.heartbeat_ev.uid)
  return uid_;
}
void heartbeat_ev::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:s_shuttle_lobby.heartbeat_ev.uid)
}

// required uint64 timecode_native = 3 [default = 0];
bool heartbeat_ev::has_timecode_native() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void heartbeat_ev::set_has_timecode_native() {
  _has_bits_[0] |= 0x00000008u;
}
void heartbeat_ev::clear_has_timecode_native() {
  _has_bits_[0] &= ~0x00000008u;
}
void heartbeat_ev::clear_timecode_native() {
  timecode_native_ = GOOGLE_ULONGLONG(0);
  clear_has_timecode_native();
}
::google::protobuf::uint64 heartbeat_ev::timecode_native() const {
  // @@protoc_insertion_point(field_get:s_shuttle_lobby.heartbeat_ev.timecode_native)
  return timecode_native_;
}
void heartbeat_ev::set_timecode_native(::google::protobuf::uint64 value) {
  set_has_timecode_native();
  timecode_native_ = value;
  // @@protoc_insertion_point(field_set:s_shuttle_lobby.heartbeat_ev.timecode_native)
}

// required .b_math.coord coord_info = 4;
bool heartbeat_ev::has_coord_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void heartbeat_ev::set_has_coord_info() {
  _has_bits_[0] |= 0x00000001u;
}
void heartbeat_ev::clear_has_coord_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void heartbeat_ev::clear_coord_info() {
  if (coord_info_ != NULL) coord_info_->::b_math::coord::Clear();
  clear_has_coord_info();
}
const ::b_math::coord& heartbeat_ev::coord_info() const {
  // @@protoc_insertion_point(field_get:s_shuttle_lobby.heartbeat_ev.coord_info)
  return coord_info_ != NULL ? *coord_info_
                         : *::b_math::coord::internal_default_instance();
}
::b_math::coord* heartbeat_ev::mutable_coord_info() {
  set_has_coord_info();
  if (coord_info_ == NULL) {
    coord_info_ = new ::b_math::coord;
  }
  // @@protoc_insertion_point(field_mutable:s_shuttle_lobby.heartbeat_ev.coord_info)
  return coord_info_;
}
::b_math::coord* heartbeat_ev::release_coord_info() {
  // @@protoc_insertion_point(field_release:s_shuttle_lobby.heartbeat_ev.coord_info)
  clear_has_coord_info();
  ::b_math::coord* temp = coord_info_;
  coord_info_ = NULL;
  return temp;
}
void heartbeat_ev::set_allocated_coord_info(::b_math::coord* coord_info) {
  delete coord_info_;
  coord_info_ = coord_info;
  if (coord_info) {
    set_has_coord_info();
  } else {
    clear_has_coord_info();
  }
  // @@protoc_insertion_point(field_set_allocated:s_shuttle_lobby.heartbeat_ev.coord_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace s_shuttle_lobby

// @@protoc_insertion_point(global_scope)
