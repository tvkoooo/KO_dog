// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_business_nt_message.proto

#ifndef PROTOBUF_c_5fbusiness_5fnt_5fmessage_2eproto__INCLUDED
#define PROTOBUF_c_5fbusiness_5fnt_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "b_error.pb.h"
// @@protoc_insertion_point(includes)
namespace b_error {
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
}  // namespace b_error
namespace c_business_nt_message {
class nt_message_all_unread_rq;
class nt_message_all_unread_rqDefaultTypeInternal;
extern nt_message_all_unread_rqDefaultTypeInternal _nt_message_all_unread_rq_default_instance_;
class nt_message_all_unread_rs;
class nt_message_all_unread_rsDefaultTypeInternal;
extern nt_message_all_unread_rsDefaultTypeInternal _nt_message_all_unread_rs_default_instance_;
class nt_message_consume_by_id_rq;
class nt_message_consume_by_id_rqDefaultTypeInternal;
extern nt_message_consume_by_id_rqDefaultTypeInternal _nt_message_consume_by_id_rq_default_instance_;
class nt_message_consume_by_id_rs;
class nt_message_consume_by_id_rsDefaultTypeInternal;
extern nt_message_consume_by_id_rsDefaultTypeInternal _nt_message_consume_by_id_rs_default_instance_;
class nt_message_consume_by_maxid_rq;
class nt_message_consume_by_maxid_rqDefaultTypeInternal;
extern nt_message_consume_by_maxid_rqDefaultTypeInternal _nt_message_consume_by_maxid_rq_default_instance_;
class nt_message_consume_by_maxid_rs;
class nt_message_consume_by_maxid_rsDefaultTypeInternal;
extern nt_message_consume_by_maxid_rsDefaultTypeInternal _nt_message_consume_by_maxid_rs_default_instance_;
class nt_message_read_note_id_rq;
class nt_message_read_note_id_rqDefaultTypeInternal;
extern nt_message_read_note_id_rqDefaultTypeInternal _nt_message_read_note_id_rq_default_instance_;
class nt_message_read_note_id_rs;
class nt_message_read_note_id_rsDefaultTypeInternal;
extern nt_message_read_note_id_rsDefaultTypeInternal _nt_message_read_note_id_rs_default_instance_;
}  // namespace c_business_nt_message

namespace c_business_nt_message {

namespace protobuf_c_5fbusiness_5fnt_5fmessage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_c_5fbusiness_5fnt_5fmessage_2eproto

enum nt_message_consume_by_id_rq_msg {
  nt_message_consume_by_id_rq_msg_id = 33554433
};
bool nt_message_consume_by_id_rq_msg_IsValid(int value);
const nt_message_consume_by_id_rq_msg nt_message_consume_by_id_rq_msg_msg_MIN = nt_message_consume_by_id_rq_msg_id;
const nt_message_consume_by_id_rq_msg nt_message_consume_by_id_rq_msg_msg_MAX = nt_message_consume_by_id_rq_msg_id;
const int nt_message_consume_by_id_rq_msg_msg_ARRAYSIZE = nt_message_consume_by_id_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* nt_message_consume_by_id_rq_msg_descriptor();
inline const ::std::string& nt_message_consume_by_id_rq_msg_Name(nt_message_consume_by_id_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    nt_message_consume_by_id_rq_msg_descriptor(), value);
}
inline bool nt_message_consume_by_id_rq_msg_Parse(
    const ::std::string& name, nt_message_consume_by_id_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nt_message_consume_by_id_rq_msg>(
    nt_message_consume_by_id_rq_msg_descriptor(), name, value);
}
enum nt_message_consume_by_id_rs_msg {
  nt_message_consume_by_id_rs_msg_id = 33554434
};
bool nt_message_consume_by_id_rs_msg_IsValid(int value);
const nt_message_consume_by_id_rs_msg nt_message_consume_by_id_rs_msg_msg_MIN = nt_message_consume_by_id_rs_msg_id;
const nt_message_consume_by_id_rs_msg nt_message_consume_by_id_rs_msg_msg_MAX = nt_message_consume_by_id_rs_msg_id;
const int nt_message_consume_by_id_rs_msg_msg_ARRAYSIZE = nt_message_consume_by_id_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* nt_message_consume_by_id_rs_msg_descriptor();
inline const ::std::string& nt_message_consume_by_id_rs_msg_Name(nt_message_consume_by_id_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    nt_message_consume_by_id_rs_msg_descriptor(), value);
}
inline bool nt_message_consume_by_id_rs_msg_Parse(
    const ::std::string& name, nt_message_consume_by_id_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nt_message_consume_by_id_rs_msg>(
    nt_message_consume_by_id_rs_msg_descriptor(), name, value);
}
enum nt_message_consume_by_maxid_rq_msg {
  nt_message_consume_by_maxid_rq_msg_id = 33554435
};
bool nt_message_consume_by_maxid_rq_msg_IsValid(int value);
const nt_message_consume_by_maxid_rq_msg nt_message_consume_by_maxid_rq_msg_msg_MIN = nt_message_consume_by_maxid_rq_msg_id;
const nt_message_consume_by_maxid_rq_msg nt_message_consume_by_maxid_rq_msg_msg_MAX = nt_message_consume_by_maxid_rq_msg_id;
const int nt_message_consume_by_maxid_rq_msg_msg_ARRAYSIZE = nt_message_consume_by_maxid_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* nt_message_consume_by_maxid_rq_msg_descriptor();
inline const ::std::string& nt_message_consume_by_maxid_rq_msg_Name(nt_message_consume_by_maxid_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    nt_message_consume_by_maxid_rq_msg_descriptor(), value);
}
inline bool nt_message_consume_by_maxid_rq_msg_Parse(
    const ::std::string& name, nt_message_consume_by_maxid_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nt_message_consume_by_maxid_rq_msg>(
    nt_message_consume_by_maxid_rq_msg_descriptor(), name, value);
}
enum nt_message_consume_by_maxid_rs_msg {
  nt_message_consume_by_maxid_rs_msg_id = 33554436
};
bool nt_message_consume_by_maxid_rs_msg_IsValid(int value);
const nt_message_consume_by_maxid_rs_msg nt_message_consume_by_maxid_rs_msg_msg_MIN = nt_message_consume_by_maxid_rs_msg_id;
const nt_message_consume_by_maxid_rs_msg nt_message_consume_by_maxid_rs_msg_msg_MAX = nt_message_consume_by_maxid_rs_msg_id;
const int nt_message_consume_by_maxid_rs_msg_msg_ARRAYSIZE = nt_message_consume_by_maxid_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* nt_message_consume_by_maxid_rs_msg_descriptor();
inline const ::std::string& nt_message_consume_by_maxid_rs_msg_Name(nt_message_consume_by_maxid_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    nt_message_consume_by_maxid_rs_msg_descriptor(), value);
}
inline bool nt_message_consume_by_maxid_rs_msg_Parse(
    const ::std::string& name, nt_message_consume_by_maxid_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nt_message_consume_by_maxid_rs_msg>(
    nt_message_consume_by_maxid_rs_msg_descriptor(), name, value);
}
enum nt_message_read_note_id_rq_msg {
  nt_message_read_note_id_rq_msg_id = 33554433
};
bool nt_message_read_note_id_rq_msg_IsValid(int value);
const nt_message_read_note_id_rq_msg nt_message_read_note_id_rq_msg_msg_MIN = nt_message_read_note_id_rq_msg_id;
const nt_message_read_note_id_rq_msg nt_message_read_note_id_rq_msg_msg_MAX = nt_message_read_note_id_rq_msg_id;
const int nt_message_read_note_id_rq_msg_msg_ARRAYSIZE = nt_message_read_note_id_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* nt_message_read_note_id_rq_msg_descriptor();
inline const ::std::string& nt_message_read_note_id_rq_msg_Name(nt_message_read_note_id_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    nt_message_read_note_id_rq_msg_descriptor(), value);
}
inline bool nt_message_read_note_id_rq_msg_Parse(
    const ::std::string& name, nt_message_read_note_id_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nt_message_read_note_id_rq_msg>(
    nt_message_read_note_id_rq_msg_descriptor(), name, value);
}
enum nt_message_read_note_id_rs_msg {
  nt_message_read_note_id_rs_msg_id = 33554434
};
bool nt_message_read_note_id_rs_msg_IsValid(int value);
const nt_message_read_note_id_rs_msg nt_message_read_note_id_rs_msg_msg_MIN = nt_message_read_note_id_rs_msg_id;
const nt_message_read_note_id_rs_msg nt_message_read_note_id_rs_msg_msg_MAX = nt_message_read_note_id_rs_msg_id;
const int nt_message_read_note_id_rs_msg_msg_ARRAYSIZE = nt_message_read_note_id_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* nt_message_read_note_id_rs_msg_descriptor();
inline const ::std::string& nt_message_read_note_id_rs_msg_Name(nt_message_read_note_id_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    nt_message_read_note_id_rs_msg_descriptor(), value);
}
inline bool nt_message_read_note_id_rs_msg_Parse(
    const ::std::string& name, nt_message_read_note_id_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nt_message_read_note_id_rs_msg>(
    nt_message_read_note_id_rs_msg_descriptor(), name, value);
}
enum nt_message_all_unread_rq_msg {
  nt_message_all_unread_rq_msg_id = 33554435
};
bool nt_message_all_unread_rq_msg_IsValid(int value);
const nt_message_all_unread_rq_msg nt_message_all_unread_rq_msg_msg_MIN = nt_message_all_unread_rq_msg_id;
const nt_message_all_unread_rq_msg nt_message_all_unread_rq_msg_msg_MAX = nt_message_all_unread_rq_msg_id;
const int nt_message_all_unread_rq_msg_msg_ARRAYSIZE = nt_message_all_unread_rq_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* nt_message_all_unread_rq_msg_descriptor();
inline const ::std::string& nt_message_all_unread_rq_msg_Name(nt_message_all_unread_rq_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    nt_message_all_unread_rq_msg_descriptor(), value);
}
inline bool nt_message_all_unread_rq_msg_Parse(
    const ::std::string& name, nt_message_all_unread_rq_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nt_message_all_unread_rq_msg>(
    nt_message_all_unread_rq_msg_descriptor(), name, value);
}
enum nt_message_all_unread_rs_msg {
  nt_message_all_unread_rs_msg_id = 33554436
};
bool nt_message_all_unread_rs_msg_IsValid(int value);
const nt_message_all_unread_rs_msg nt_message_all_unread_rs_msg_msg_MIN = nt_message_all_unread_rs_msg_id;
const nt_message_all_unread_rs_msg nt_message_all_unread_rs_msg_msg_MAX = nt_message_all_unread_rs_msg_id;
const int nt_message_all_unread_rs_msg_msg_ARRAYSIZE = nt_message_all_unread_rs_msg_msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* nt_message_all_unread_rs_msg_descriptor();
inline const ::std::string& nt_message_all_unread_rs_msg_Name(nt_message_all_unread_rs_msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    nt_message_all_unread_rs_msg_descriptor(), value);
}
inline bool nt_message_all_unread_rs_msg_Parse(
    const ::std::string& name, nt_message_all_unread_rs_msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nt_message_all_unread_rs_msg>(
    nt_message_all_unread_rs_msg_descriptor(), name, value);
}
enum msg {
  min_id = 33554432,
  max_id = 33554687
};
bool msg_IsValid(int value);
const msg msg_MIN = min_id;
const msg msg_MAX = max_id;
const int msg_ARRAYSIZE = msg_MAX + 1;

const ::google::protobuf::EnumDescriptor* msg_descriptor();
inline const ::std::string& msg_Name(msg value) {
  return ::google::protobuf::internal::NameOfEnum(
    msg_descriptor(), value);
}
inline bool msg_Parse(
    const ::std::string& name, msg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<msg>(
    msg_descriptor(), name, value);
}
// ===================================================================

class nt_message_consume_by_id_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_nt_message.nt_message_consume_by_id_rq) */ {
 public:
  nt_message_consume_by_id_rq();
  virtual ~nt_message_consume_by_id_rq();

  nt_message_consume_by_id_rq(const nt_message_consume_by_id_rq& from);

  inline nt_message_consume_by_id_rq& operator=(const nt_message_consume_by_id_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nt_message_consume_by_id_rq& default_instance();

  static inline const nt_message_consume_by_id_rq* internal_default_instance() {
    return reinterpret_cast<const nt_message_consume_by_id_rq*>(
               &_nt_message_consume_by_id_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(nt_message_consume_by_id_rq* other);

  // implements Message ----------------------------------------------

  inline nt_message_consume_by_id_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  nt_message_consume_by_id_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nt_message_consume_by_id_rq& from);
  void MergeFrom(const nt_message_consume_by_id_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nt_message_consume_by_id_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef nt_message_consume_by_id_rq_msg msg;
  static const msg id =
    nt_message_consume_by_id_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return nt_message_consume_by_id_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    nt_message_consume_by_id_rq_msg_msg_MIN;
  static const msg msg_MAX =
    nt_message_consume_by_id_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    nt_message_consume_by_id_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return nt_message_consume_by_id_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return nt_message_consume_by_id_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return nt_message_consume_by_id_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // required uint64 note_id = 2;
  bool has_note_id() const;
  void clear_note_id();
  static const int kNoteIdFieldNumber = 2;
  ::google::protobuf::uint64 note_id() const;
  void set_note_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_nt_message.nt_message_consume_by_id_rq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_note_id();
  void clear_has_note_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 note_id_;
  friend struct protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class nt_message_consume_by_id_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_nt_message.nt_message_consume_by_id_rs) */ {
 public:
  nt_message_consume_by_id_rs();
  virtual ~nt_message_consume_by_id_rs();

  nt_message_consume_by_id_rs(const nt_message_consume_by_id_rs& from);

  inline nt_message_consume_by_id_rs& operator=(const nt_message_consume_by_id_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nt_message_consume_by_id_rs& default_instance();

  static inline const nt_message_consume_by_id_rs* internal_default_instance() {
    return reinterpret_cast<const nt_message_consume_by_id_rs*>(
               &_nt_message_consume_by_id_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(nt_message_consume_by_id_rs* other);

  // implements Message ----------------------------------------------

  inline nt_message_consume_by_id_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  nt_message_consume_by_id_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nt_message_consume_by_id_rs& from);
  void MergeFrom(const nt_message_consume_by_id_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nt_message_consume_by_id_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef nt_message_consume_by_id_rs_msg msg;
  static const msg id =
    nt_message_consume_by_id_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return nt_message_consume_by_id_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    nt_message_consume_by_id_rs_msg_msg_MIN;
  static const msg msg_MAX =
    nt_message_consume_by_id_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    nt_message_consume_by_id_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return nt_message_consume_by_id_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return nt_message_consume_by_id_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return nt_message_consume_by_id_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // required uint64 note_id = 3;
  bool has_note_id() const;
  void clear_note_id();
  static const int kNoteIdFieldNumber = 3;
  ::google::protobuf::uint64 note_id() const;
  void set_note_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_nt_message.nt_message_consume_by_id_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_note_id();
  void clear_has_note_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 note_id_;
  friend struct protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class nt_message_consume_by_maxid_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_nt_message.nt_message_consume_by_maxid_rq) */ {
 public:
  nt_message_consume_by_maxid_rq();
  virtual ~nt_message_consume_by_maxid_rq();

  nt_message_consume_by_maxid_rq(const nt_message_consume_by_maxid_rq& from);

  inline nt_message_consume_by_maxid_rq& operator=(const nt_message_consume_by_maxid_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nt_message_consume_by_maxid_rq& default_instance();

  static inline const nt_message_consume_by_maxid_rq* internal_default_instance() {
    return reinterpret_cast<const nt_message_consume_by_maxid_rq*>(
               &_nt_message_consume_by_maxid_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(nt_message_consume_by_maxid_rq* other);

  // implements Message ----------------------------------------------

  inline nt_message_consume_by_maxid_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  nt_message_consume_by_maxid_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nt_message_consume_by_maxid_rq& from);
  void MergeFrom(const nt_message_consume_by_maxid_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nt_message_consume_by_maxid_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef nt_message_consume_by_maxid_rq_msg msg;
  static const msg id =
    nt_message_consume_by_maxid_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return nt_message_consume_by_maxid_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    nt_message_consume_by_maxid_rq_msg_msg_MIN;
  static const msg msg_MAX =
    nt_message_consume_by_maxid_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    nt_message_consume_by_maxid_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return nt_message_consume_by_maxid_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return nt_message_consume_by_maxid_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return nt_message_consume_by_maxid_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // required uint64 note_maxid = 2;
  bool has_note_maxid() const;
  void clear_note_maxid();
  static const int kNoteMaxidFieldNumber = 2;
  ::google::protobuf::uint64 note_maxid() const;
  void set_note_maxid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_nt_message.nt_message_consume_by_maxid_rq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_note_maxid();
  void clear_has_note_maxid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 note_maxid_;
  friend struct protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class nt_message_consume_by_maxid_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_nt_message.nt_message_consume_by_maxid_rs) */ {
 public:
  nt_message_consume_by_maxid_rs();
  virtual ~nt_message_consume_by_maxid_rs();

  nt_message_consume_by_maxid_rs(const nt_message_consume_by_maxid_rs& from);

  inline nt_message_consume_by_maxid_rs& operator=(const nt_message_consume_by_maxid_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nt_message_consume_by_maxid_rs& default_instance();

  static inline const nt_message_consume_by_maxid_rs* internal_default_instance() {
    return reinterpret_cast<const nt_message_consume_by_maxid_rs*>(
               &_nt_message_consume_by_maxid_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(nt_message_consume_by_maxid_rs* other);

  // implements Message ----------------------------------------------

  inline nt_message_consume_by_maxid_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  nt_message_consume_by_maxid_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nt_message_consume_by_maxid_rs& from);
  void MergeFrom(const nt_message_consume_by_maxid_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nt_message_consume_by_maxid_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef nt_message_consume_by_maxid_rs_msg msg;
  static const msg id =
    nt_message_consume_by_maxid_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return nt_message_consume_by_maxid_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    nt_message_consume_by_maxid_rs_msg_msg_MIN;
  static const msg msg_MAX =
    nt_message_consume_by_maxid_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    nt_message_consume_by_maxid_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return nt_message_consume_by_maxid_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return nt_message_consume_by_maxid_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return nt_message_consume_by_maxid_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // required uint64 note_maxid = 3;
  bool has_note_maxid() const;
  void clear_note_maxid();
  static const int kNoteMaxidFieldNumber = 3;
  ::google::protobuf::uint64 note_maxid() const;
  void set_note_maxid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_nt_message.nt_message_consume_by_maxid_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_note_maxid();
  void clear_has_note_maxid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 note_maxid_;
  friend struct protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class nt_message_read_note_id_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_nt_message.nt_message_read_note_id_rq) */ {
 public:
  nt_message_read_note_id_rq();
  virtual ~nt_message_read_note_id_rq();

  nt_message_read_note_id_rq(const nt_message_read_note_id_rq& from);

  inline nt_message_read_note_id_rq& operator=(const nt_message_read_note_id_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nt_message_read_note_id_rq& default_instance();

  static inline const nt_message_read_note_id_rq* internal_default_instance() {
    return reinterpret_cast<const nt_message_read_note_id_rq*>(
               &_nt_message_read_note_id_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(nt_message_read_note_id_rq* other);

  // implements Message ----------------------------------------------

  inline nt_message_read_note_id_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  nt_message_read_note_id_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nt_message_read_note_id_rq& from);
  void MergeFrom(const nt_message_read_note_id_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nt_message_read_note_id_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef nt_message_read_note_id_rq_msg msg;
  static const msg id =
    nt_message_read_note_id_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return nt_message_read_note_id_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    nt_message_read_note_id_rq_msg_msg_MIN;
  static const msg msg_MAX =
    nt_message_read_note_id_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    nt_message_read_note_id_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return nt_message_read_note_id_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return nt_message_read_note_id_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return nt_message_read_note_id_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // required uint64 note_id = 2;
  bool has_note_id() const;
  void clear_note_id();
  static const int kNoteIdFieldNumber = 2;
  ::google::protobuf::uint64 note_id() const;
  void set_note_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_nt_message.nt_message_read_note_id_rq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_note_id();
  void clear_has_note_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 note_id_;
  friend struct protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class nt_message_read_note_id_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_nt_message.nt_message_read_note_id_rs) */ {
 public:
  nt_message_read_note_id_rs();
  virtual ~nt_message_read_note_id_rs();

  nt_message_read_note_id_rs(const nt_message_read_note_id_rs& from);

  inline nt_message_read_note_id_rs& operator=(const nt_message_read_note_id_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nt_message_read_note_id_rs& default_instance();

  static inline const nt_message_read_note_id_rs* internal_default_instance() {
    return reinterpret_cast<const nt_message_read_note_id_rs*>(
               &_nt_message_read_note_id_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(nt_message_read_note_id_rs* other);

  // implements Message ----------------------------------------------

  inline nt_message_read_note_id_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  nt_message_read_note_id_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nt_message_read_note_id_rs& from);
  void MergeFrom(const nt_message_read_note_id_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nt_message_read_note_id_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef nt_message_read_note_id_rs_msg msg;
  static const msg id =
    nt_message_read_note_id_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return nt_message_read_note_id_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    nt_message_read_note_id_rs_msg_msg_MIN;
  static const msg msg_MAX =
    nt_message_read_note_id_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    nt_message_read_note_id_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return nt_message_read_note_id_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return nt_message_read_note_id_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return nt_message_read_note_id_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // required uint64 note_id = 3;
  bool has_note_id() const;
  void clear_note_id();
  static const int kNoteIdFieldNumber = 3;
  ::google::protobuf::uint64 note_id() const;
  void set_note_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_nt_message.nt_message_read_note_id_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_note_id();
  void clear_has_note_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 note_id_;
  friend struct protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class nt_message_all_unread_rq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_nt_message.nt_message_all_unread_rq) */ {
 public:
  nt_message_all_unread_rq();
  virtual ~nt_message_all_unread_rq();

  nt_message_all_unread_rq(const nt_message_all_unread_rq& from);

  inline nt_message_all_unread_rq& operator=(const nt_message_all_unread_rq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nt_message_all_unread_rq& default_instance();

  static inline const nt_message_all_unread_rq* internal_default_instance() {
    return reinterpret_cast<const nt_message_all_unread_rq*>(
               &_nt_message_all_unread_rq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(nt_message_all_unread_rq* other);

  // implements Message ----------------------------------------------

  inline nt_message_all_unread_rq* New() const PROTOBUF_FINAL { return New(NULL); }

  nt_message_all_unread_rq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nt_message_all_unread_rq& from);
  void MergeFrom(const nt_message_all_unread_rq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nt_message_all_unread_rq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef nt_message_all_unread_rq_msg msg;
  static const msg id =
    nt_message_all_unread_rq_msg_id;
  static inline bool msg_IsValid(int value) {
    return nt_message_all_unread_rq_msg_IsValid(value);
  }
  static const msg msg_MIN =
    nt_message_all_unread_rq_msg_msg_MIN;
  static const msg msg_MAX =
    nt_message_all_unread_rq_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    nt_message_all_unread_rq_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return nt_message_all_unread_rq_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return nt_message_all_unread_rq_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return nt_message_all_unread_rq_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_nt_message.nt_message_all_unread_rq)
 private:
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  friend struct protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class nt_message_all_unread_rs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c_business_nt_message.nt_message_all_unread_rs) */ {
 public:
  nt_message_all_unread_rs();
  virtual ~nt_message_all_unread_rs();

  nt_message_all_unread_rs(const nt_message_all_unread_rs& from);

  inline nt_message_all_unread_rs& operator=(const nt_message_all_unread_rs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nt_message_all_unread_rs& default_instance();

  static inline const nt_message_all_unread_rs* internal_default_instance() {
    return reinterpret_cast<const nt_message_all_unread_rs*>(
               &_nt_message_all_unread_rs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(nt_message_all_unread_rs* other);

  // implements Message ----------------------------------------------

  inline nt_message_all_unread_rs* New() const PROTOBUF_FINAL { return New(NULL); }

  nt_message_all_unread_rs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nt_message_all_unread_rs& from);
  void MergeFrom(const nt_message_all_unread_rs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nt_message_all_unread_rs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef nt_message_all_unread_rs_msg msg;
  static const msg id =
    nt_message_all_unread_rs_msg_id;
  static inline bool msg_IsValid(int value) {
    return nt_message_all_unread_rs_msg_IsValid(value);
  }
  static const msg msg_MIN =
    nt_message_all_unread_rs_msg_msg_MIN;
  static const msg msg_MAX =
    nt_message_all_unread_rs_msg_msg_MAX;
  static const int msg_ARRAYSIZE =
    nt_message_all_unread_rs_msg_msg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_descriptor() {
    return nt_message_all_unread_rs_msg_descriptor();
  }
  static inline const ::std::string& msg_Name(msg value) {
    return nt_message_all_unread_rs_msg_Name(value);
  }
  static inline bool msg_Parse(const ::std::string& name,
      msg* value) {
    return nt_message_all_unread_rs_msg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .b_error.info error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::b_error::info& error() const;
  ::b_error::info* mutable_error();
  ::b_error::info* release_error();
  void set_allocated_error(::b_error::info* error);

  // required uint64 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:c_business_nt_message.nt_message_all_unread_rs)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_user_id();
  void clear_has_user_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::b_error::info* error_;
  ::google::protobuf::uint64 user_id_;
  friend struct protobuf_c_5fbusiness_5fnt_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// nt_message_consume_by_id_rq

// required uint64 user_id = 1;
inline bool nt_message_consume_by_id_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nt_message_consume_by_id_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nt_message_consume_by_id_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nt_message_consume_by_id_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 nt_message_consume_by_id_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rq.user_id)
  return user_id_;
}
inline void nt_message_consume_by_id_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_id_rq.user_id)
}

// required uint64 note_id = 2;
inline bool nt_message_consume_by_id_rq::has_note_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nt_message_consume_by_id_rq::set_has_note_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nt_message_consume_by_id_rq::clear_has_note_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nt_message_consume_by_id_rq::clear_note_id() {
  note_id_ = GOOGLE_ULONGLONG(0);
  clear_has_note_id();
}
inline ::google::protobuf::uint64 nt_message_consume_by_id_rq::note_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rq.note_id)
  return note_id_;
}
inline void nt_message_consume_by_id_rq::set_note_id(::google::protobuf::uint64 value) {
  set_has_note_id();
  note_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_id_rq.note_id)
}

// -------------------------------------------------------------------

// nt_message_consume_by_id_rs

// required .b_error.info error = 1;
inline bool nt_message_consume_by_id_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nt_message_consume_by_id_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nt_message_consume_by_id_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nt_message_consume_by_id_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& nt_message_consume_by_id_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* nt_message_consume_by_id_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_nt_message.nt_message_consume_by_id_rs.error)
  return error_;
}
inline ::b_error::info* nt_message_consume_by_id_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_nt_message.nt_message_consume_by_id_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void nt_message_consume_by_id_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_nt_message.nt_message_consume_by_id_rs.error)
}

// required uint64 user_id = 2;
inline bool nt_message_consume_by_id_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nt_message_consume_by_id_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nt_message_consume_by_id_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nt_message_consume_by_id_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 nt_message_consume_by_id_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rs.user_id)
  return user_id_;
}
inline void nt_message_consume_by_id_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_id_rs.user_id)
}

// required uint64 note_id = 3;
inline bool nt_message_consume_by_id_rs::has_note_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nt_message_consume_by_id_rs::set_has_note_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nt_message_consume_by_id_rs::clear_has_note_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nt_message_consume_by_id_rs::clear_note_id() {
  note_id_ = GOOGLE_ULONGLONG(0);
  clear_has_note_id();
}
inline ::google::protobuf::uint64 nt_message_consume_by_id_rs::note_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_id_rs.note_id)
  return note_id_;
}
inline void nt_message_consume_by_id_rs::set_note_id(::google::protobuf::uint64 value) {
  set_has_note_id();
  note_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_id_rs.note_id)
}

// -------------------------------------------------------------------

// nt_message_consume_by_maxid_rq

// required uint64 user_id = 1;
inline bool nt_message_consume_by_maxid_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nt_message_consume_by_maxid_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nt_message_consume_by_maxid_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nt_message_consume_by_maxid_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 nt_message_consume_by_maxid_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rq.user_id)
  return user_id_;
}
inline void nt_message_consume_by_maxid_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_maxid_rq.user_id)
}

// required uint64 note_maxid = 2;
inline bool nt_message_consume_by_maxid_rq::has_note_maxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nt_message_consume_by_maxid_rq::set_has_note_maxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nt_message_consume_by_maxid_rq::clear_has_note_maxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nt_message_consume_by_maxid_rq::clear_note_maxid() {
  note_maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_note_maxid();
}
inline ::google::protobuf::uint64 nt_message_consume_by_maxid_rq::note_maxid() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rq.note_maxid)
  return note_maxid_;
}
inline void nt_message_consume_by_maxid_rq::set_note_maxid(::google::protobuf::uint64 value) {
  set_has_note_maxid();
  note_maxid_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_maxid_rq.note_maxid)
}

// -------------------------------------------------------------------

// nt_message_consume_by_maxid_rs

// required .b_error.info error = 1;
inline bool nt_message_consume_by_maxid_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nt_message_consume_by_maxid_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nt_message_consume_by_maxid_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nt_message_consume_by_maxid_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& nt_message_consume_by_maxid_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* nt_message_consume_by_maxid_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_nt_message.nt_message_consume_by_maxid_rs.error)
  return error_;
}
inline ::b_error::info* nt_message_consume_by_maxid_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_nt_message.nt_message_consume_by_maxid_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void nt_message_consume_by_maxid_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_nt_message.nt_message_consume_by_maxid_rs.error)
}

// required uint64 user_id = 2;
inline bool nt_message_consume_by_maxid_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nt_message_consume_by_maxid_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nt_message_consume_by_maxid_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nt_message_consume_by_maxid_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 nt_message_consume_by_maxid_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rs.user_id)
  return user_id_;
}
inline void nt_message_consume_by_maxid_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_maxid_rs.user_id)
}

// required uint64 note_maxid = 3;
inline bool nt_message_consume_by_maxid_rs::has_note_maxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nt_message_consume_by_maxid_rs::set_has_note_maxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nt_message_consume_by_maxid_rs::clear_has_note_maxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nt_message_consume_by_maxid_rs::clear_note_maxid() {
  note_maxid_ = GOOGLE_ULONGLONG(0);
  clear_has_note_maxid();
}
inline ::google::protobuf::uint64 nt_message_consume_by_maxid_rs::note_maxid() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_consume_by_maxid_rs.note_maxid)
  return note_maxid_;
}
inline void nt_message_consume_by_maxid_rs::set_note_maxid(::google::protobuf::uint64 value) {
  set_has_note_maxid();
  note_maxid_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_consume_by_maxid_rs.note_maxid)
}

// -------------------------------------------------------------------

// nt_message_read_note_id_rq

// required uint64 user_id = 1;
inline bool nt_message_read_note_id_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nt_message_read_note_id_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nt_message_read_note_id_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nt_message_read_note_id_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 nt_message_read_note_id_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rq.user_id)
  return user_id_;
}
inline void nt_message_read_note_id_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_read_note_id_rq.user_id)
}

// required uint64 note_id = 2;
inline bool nt_message_read_note_id_rq::has_note_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nt_message_read_note_id_rq::set_has_note_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nt_message_read_note_id_rq::clear_has_note_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nt_message_read_note_id_rq::clear_note_id() {
  note_id_ = GOOGLE_ULONGLONG(0);
  clear_has_note_id();
}
inline ::google::protobuf::uint64 nt_message_read_note_id_rq::note_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rq.note_id)
  return note_id_;
}
inline void nt_message_read_note_id_rq::set_note_id(::google::protobuf::uint64 value) {
  set_has_note_id();
  note_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_read_note_id_rq.note_id)
}

// -------------------------------------------------------------------

// nt_message_read_note_id_rs

// required .b_error.info error = 1;
inline bool nt_message_read_note_id_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nt_message_read_note_id_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nt_message_read_note_id_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nt_message_read_note_id_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& nt_message_read_note_id_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* nt_message_read_note_id_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_nt_message.nt_message_read_note_id_rs.error)
  return error_;
}
inline ::b_error::info* nt_message_read_note_id_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_nt_message.nt_message_read_note_id_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void nt_message_read_note_id_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_nt_message.nt_message_read_note_id_rs.error)
}

// required uint64 user_id = 2;
inline bool nt_message_read_note_id_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nt_message_read_note_id_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nt_message_read_note_id_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nt_message_read_note_id_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 nt_message_read_note_id_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rs.user_id)
  return user_id_;
}
inline void nt_message_read_note_id_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_read_note_id_rs.user_id)
}

// required uint64 note_id = 3;
inline bool nt_message_read_note_id_rs::has_note_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nt_message_read_note_id_rs::set_has_note_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void nt_message_read_note_id_rs::clear_has_note_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void nt_message_read_note_id_rs::clear_note_id() {
  note_id_ = GOOGLE_ULONGLONG(0);
  clear_has_note_id();
}
inline ::google::protobuf::uint64 nt_message_read_note_id_rs::note_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_read_note_id_rs.note_id)
  return note_id_;
}
inline void nt_message_read_note_id_rs::set_note_id(::google::protobuf::uint64 value) {
  set_has_note_id();
  note_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_read_note_id_rs.note_id)
}

// -------------------------------------------------------------------

// nt_message_all_unread_rq

// required uint64 user_id = 1;
inline bool nt_message_all_unread_rq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nt_message_all_unread_rq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nt_message_all_unread_rq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nt_message_all_unread_rq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 nt_message_all_unread_rq::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_all_unread_rq.user_id)
  return user_id_;
}
inline void nt_message_all_unread_rq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_all_unread_rq.user_id)
}

// -------------------------------------------------------------------

// nt_message_all_unread_rs

// required .b_error.info error = 1;
inline bool nt_message_all_unread_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nt_message_all_unread_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nt_message_all_unread_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nt_message_all_unread_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
inline const ::b_error::info& nt_message_all_unread_rs::error() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_all_unread_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
inline ::b_error::info* nt_message_all_unread_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:c_business_nt_message.nt_message_all_unread_rs.error)
  return error_;
}
inline ::b_error::info* nt_message_all_unread_rs::release_error() {
  // @@protoc_insertion_point(field_release:c_business_nt_message.nt_message_all_unread_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
inline void nt_message_all_unread_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:c_business_nt_message.nt_message_all_unread_rs.error)
}

// required uint64 user_id = 2;
inline bool nt_message_all_unread_rs::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nt_message_all_unread_rs::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nt_message_all_unread_rs::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nt_message_all_unread_rs::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 nt_message_all_unread_rs::user_id() const {
  // @@protoc_insertion_point(field_get:c_business_nt_message.nt_message_all_unread_rs.user_id)
  return user_id_;
}
inline void nt_message_all_unread_rs::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:c_business_nt_message.nt_message_all_unread_rs.user_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace c_business_nt_message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::c_business_nt_message::nt_message_consume_by_id_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::nt_message_consume_by_id_rq_msg>() {
  return ::c_business_nt_message::nt_message_consume_by_id_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_nt_message::nt_message_consume_by_id_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::nt_message_consume_by_id_rs_msg>() {
  return ::c_business_nt_message::nt_message_consume_by_id_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_nt_message::nt_message_consume_by_maxid_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::nt_message_consume_by_maxid_rq_msg>() {
  return ::c_business_nt_message::nt_message_consume_by_maxid_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_nt_message::nt_message_consume_by_maxid_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::nt_message_consume_by_maxid_rs_msg>() {
  return ::c_business_nt_message::nt_message_consume_by_maxid_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_nt_message::nt_message_read_note_id_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::nt_message_read_note_id_rq_msg>() {
  return ::c_business_nt_message::nt_message_read_note_id_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_nt_message::nt_message_read_note_id_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::nt_message_read_note_id_rs_msg>() {
  return ::c_business_nt_message::nt_message_read_note_id_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_nt_message::nt_message_all_unread_rq_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::nt_message_all_unread_rq_msg>() {
  return ::c_business_nt_message::nt_message_all_unread_rq_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_nt_message::nt_message_all_unread_rs_msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::nt_message_all_unread_rs_msg>() {
  return ::c_business_nt_message::nt_message_all_unread_rs_msg_descriptor();
}
template <> struct is_proto_enum< ::c_business_nt_message::msg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_business_nt_message::msg>() {
  return ::c_business_nt_message::msg_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_c_5fbusiness_5fnt_5fmessage_2eproto__INCLUDED
