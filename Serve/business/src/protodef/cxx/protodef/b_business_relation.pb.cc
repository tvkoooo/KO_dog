// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: b_business_relation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "b_business_relation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace b_business_relation {
class user_relationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<user_relation> {
} _user_relation_default_instance_;
class user_relation_groupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<user_relation_group> {
} _user_relation_group_default_instance_;
class friend_applyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<friend_apply> {
} _friend_apply_default_instance_;

namespace protobuf_b_5fbusiness_5frelation_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation, friend_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation, friend_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation, friend_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation, build_friend_time_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation_group, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation_group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation_group, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation_group, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_relation_group, friend_group_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply, user_apply_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply, user_apply_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply, user_apply_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply, user_apply_create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_apply, user_apply_description_),
  3,
  0,
  1,
  4,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(user_relation)},
  { 15, 23, sizeof(user_relation_group)},
  { 26, 36, sizeof(friend_apply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_user_relation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_user_relation_group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_friend_apply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "b_business_relation.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _user_relation_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _user_relation_group_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _friend_apply_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _user_relation_default_instance_.DefaultConstruct();
  _user_relation_group_default_instance_.DefaultConstruct();
  _friend_apply_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031b_business_relation.proto\022\023b_business_"
      "relation\"~\n\ruser_relation\022\017\n\007user_id\030\001 \002"
      "(\004\022\027\n\017friend_group_id\030\002 \002(\004\022\021\n\tfriend_id"
      "\030\003 \002(\004\022\025\n\rfriend_remark\030\004 \002(\t\022\031\n\021build_f"
      "riend_time\030\005 \002(\r\"H\n\023user_relation_group\022"
      "\n\n\002id\030\001 \002(\004\022\017\n\007user_id\030\002 \002(\004\022\024\n\014friend_g"
      "roup\030\003 \002(\t\"\227\001\n\014friend_apply\022\025\n\ruser_appl"
      "y_id\030\001 \002(\004\022\027\n\017user_apply_name\030\002 \002(\t\022\027\n\017u"
      "ser_apply_nick\030\003 \002(\t\022\036\n\026user_apply_creat"
      "e_time\030\004 \002(\r\022\036\n\026user_apply_description\030\005"
      " \002(\tBj\n\010protodefB\023b_business_relationZ\034p"
      "rotodef/b_business_relation\242\002\024B_business"
      "_relation_\252\002\023b_business_relation"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "b_business_relation.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_b_5fbusiness_5frelation_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_relation::kUserIdFieldNumber;
const int user_relation::kFriendGroupIdFieldNumber;
const int user_relation::kFriendIdFieldNumber;
const int user_relation::kFriendRemarkFieldNumber;
const int user_relation::kBuildFriendTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_relation::user_relation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_b_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:b_business_relation.user_relation)
}
user_relation::user_relation(const user_relation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friend_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friend_remark()) {
    friend_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friend_remark_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&build_friend_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(build_friend_time_));
  // @@protoc_insertion_point(copy_constructor:b_business_relation.user_relation)
}

void user_relation::SharedCtor() {
  _cached_size_ = 0;
  friend_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&build_friend_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(build_friend_time_));
}

user_relation::~user_relation() {
  // @@protoc_insertion_point(destructor:b_business_relation.user_relation)
  SharedDtor();
}

void user_relation::SharedDtor() {
  friend_remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_relation::descriptor() {
  protobuf_b_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_b_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_relation& user_relation::default_instance() {
  protobuf_b_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

user_relation* user_relation::New(::google::protobuf::Arena* arena) const {
  user_relation* n = new user_relation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_relation::Clear() {
// @@protoc_insertion_point(message_clear_start:b_business_relation.user_relation)
  if (has_friend_remark()) {
    GOOGLE_DCHECK(!friend_remark_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*friend_remark_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&user_id_, 0, reinterpret_cast<char*>(&build_friend_time_) -
      reinterpret_cast<char*>(&user_id_) + sizeof(build_friend_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool user_relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b_business_relation.user_relation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 friend_group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_friend_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 friend_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_friend_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friend_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string friend_remark = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friend_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friend_remark().data(), this->friend_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "b_business_relation.user_relation.friend_remark");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 build_friend_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_build_friend_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_friend_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b_business_relation.user_relation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b_business_relation.user_relation)
  return false;
#undef DO_
}

void user_relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b_business_relation.user_relation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required uint64 friend_group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->friend_group_id(), output);
  }

  // required uint64 friend_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->friend_id(), output);
  }

  // required string friend_remark = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friend_remark().data(), this->friend_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.user_relation.friend_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->friend_remark(), output);
  }

  // required uint32 build_friend_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->build_friend_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b_business_relation.user_relation)
}

::google::protobuf::uint8* user_relation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b_business_relation.user_relation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required uint64 friend_group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->friend_group_id(), target);
  }

  // required uint64 friend_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->friend_id(), target);
  }

  // required string friend_remark = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friend_remark().data(), this->friend_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.user_relation.friend_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->friend_remark(), target);
  }

  // required uint32 build_friend_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->build_friend_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b_business_relation.user_relation)
  return target;
}

size_t user_relation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:b_business_relation.user_relation)
  size_t total_size = 0;

  if (has_friend_remark()) {
    // required string friend_remark = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friend_remark());
  }

  if (has_user_id()) {
    // required uint64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  if (has_friend_group_id()) {
    // required uint64 friend_group_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->friend_group_id());
  }

  if (has_friend_id()) {
    // required uint64 friend_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->friend_id());
  }

  if (has_build_friend_time()) {
    // required uint32 build_friend_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->build_friend_time());
  }

  return total_size;
}
size_t user_relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b_business_relation.user_relation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string friend_remark = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friend_remark());

    // required uint64 user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

    // required uint64 friend_group_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->friend_group_id());

    // required uint64 friend_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->friend_id());

    // required uint32 build_friend_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->build_friend_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_relation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b_business_relation.user_relation)
  GOOGLE_DCHECK_NE(&from, this);
  const user_relation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_relation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b_business_relation.user_relation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b_business_relation.user_relation)
    MergeFrom(*source);
  }
}

void user_relation::MergeFrom(const user_relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b_business_relation.user_relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_friend_remark();
      friend_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friend_remark_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      friend_group_id_ = from.friend_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      friend_id_ = from.friend_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      build_friend_time_ = from.build_friend_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void user_relation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b_business_relation.user_relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_relation::CopyFrom(const user_relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b_business_relation.user_relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_relation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void user_relation::Swap(user_relation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_relation::InternalSwap(user_relation* other) {
  friend_remark_.Swap(&other->friend_remark_);
  std::swap(user_id_, other->user_id_);
  std::swap(friend_group_id_, other->friend_group_id_);
  std::swap(friend_id_, other->friend_id_);
  std::swap(build_friend_time_, other->build_friend_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_relation::GetMetadata() const {
  protobuf_b_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_b_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_relation

// required uint64 user_id = 1;
bool user_relation::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void user_relation::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void user_relation::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void user_relation::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 user_relation::user_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.user_id)
  return user_id_;
}
void user_relation::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.user_id)
}

// required uint64 friend_group_id = 2;
bool user_relation::has_friend_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void user_relation::set_has_friend_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
void user_relation::clear_has_friend_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void user_relation::clear_friend_group_id() {
  friend_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_group_id();
}
::google::protobuf::uint64 user_relation::friend_group_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.friend_group_id)
  return friend_group_id_;
}
void user_relation::set_friend_group_id(::google::protobuf::uint64 value) {
  set_has_friend_group_id();
  friend_group_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.friend_group_id)
}

// required uint64 friend_id = 3;
bool user_relation::has_friend_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void user_relation::set_has_friend_id() {
  _has_bits_[0] |= 0x00000008u;
}
void user_relation::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void user_relation::clear_friend_id() {
  friend_id_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_id();
}
::google::protobuf::uint64 user_relation::friend_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.friend_id)
  return friend_id_;
}
void user_relation::set_friend_id(::google::protobuf::uint64 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.friend_id)
}

// required string friend_remark = 4;
bool user_relation::has_friend_remark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void user_relation::set_has_friend_remark() {
  _has_bits_[0] |= 0x00000001u;
}
void user_relation::clear_has_friend_remark() {
  _has_bits_[0] &= ~0x00000001u;
}
void user_relation::clear_friend_remark() {
  friend_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friend_remark();
}
const ::std::string& user_relation::friend_remark() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.friend_remark)
  return friend_remark_.GetNoArena();
}
void user_relation::set_friend_remark(const ::std::string& value) {
  set_has_friend_remark();
  friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.friend_remark)
}
#if LANG_CXX11
void user_relation::set_friend_remark(::std::string&& value) {
  set_has_friend_remark();
  friend_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.user_relation.friend_remark)
}
#endif
void user_relation::set_friend_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_friend_remark();
  friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.user_relation.friend_remark)
}
void user_relation::set_friend_remark(const char* value, size_t size) {
  set_has_friend_remark();
  friend_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.user_relation.friend_remark)
}
::std::string* user_relation::mutable_friend_remark() {
  set_has_friend_remark();
  // @@protoc_insertion_point(field_mutable:b_business_relation.user_relation.friend_remark)
  return friend_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_relation::release_friend_remark() {
  // @@protoc_insertion_point(field_release:b_business_relation.user_relation.friend_remark)
  clear_has_friend_remark();
  return friend_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_relation::set_allocated_friend_remark(::std::string* friend_remark) {
  if (friend_remark != NULL) {
    set_has_friend_remark();
  } else {
    clear_has_friend_remark();
  }
  friend_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_remark);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.user_relation.friend_remark)
}

// required uint32 build_friend_time = 5;
bool user_relation::has_build_friend_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void user_relation::set_has_build_friend_time() {
  _has_bits_[0] |= 0x00000010u;
}
void user_relation::clear_has_build_friend_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void user_relation::clear_build_friend_time() {
  build_friend_time_ = 0u;
  clear_has_build_friend_time();
}
::google::protobuf::uint32 user_relation::build_friend_time() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation.build_friend_time)
  return build_friend_time_;
}
void user_relation::set_build_friend_time(::google::protobuf::uint32 value) {
  set_has_build_friend_time();
  build_friend_time_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation.build_friend_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_relation_group::kIdFieldNumber;
const int user_relation_group::kUserIdFieldNumber;
const int user_relation_group::kFriendGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_relation_group::user_relation_group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_b_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:b_business_relation.user_relation_group)
}
user_relation_group::user_relation_group(const user_relation_group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friend_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friend_group()) {
    friend_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friend_group_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:b_business_relation.user_relation_group)
}

void user_relation_group::SharedCtor() {
  _cached_size_ = 0;
  friend_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(user_id_));
}

user_relation_group::~user_relation_group() {
  // @@protoc_insertion_point(destructor:b_business_relation.user_relation_group)
  SharedDtor();
}

void user_relation_group::SharedDtor() {
  friend_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_relation_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_relation_group::descriptor() {
  protobuf_b_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_b_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_relation_group& user_relation_group::default_instance() {
  protobuf_b_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

user_relation_group* user_relation_group::New(::google::protobuf::Arena* arena) const {
  user_relation_group* n = new user_relation_group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_relation_group::Clear() {
// @@protoc_insertion_point(message_clear_start:b_business_relation.user_relation_group)
  if (has_friend_group()) {
    GOOGLE_DCHECK(!friend_group_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*friend_group_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool user_relation_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b_business_relation.user_relation_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string friend_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friend_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friend_group().data(), this->friend_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "b_business_relation.user_relation_group.friend_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b_business_relation.user_relation_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b_business_relation.user_relation_group)
  return false;
#undef DO_
}

void user_relation_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b_business_relation.user_relation_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // required string friend_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friend_group().data(), this->friend_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.user_relation_group.friend_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->friend_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b_business_relation.user_relation_group)
}

::google::protobuf::uint8* user_relation_group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b_business_relation.user_relation_group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint64 user_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // required string friend_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friend_group().data(), this->friend_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.user_relation_group.friend_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friend_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b_business_relation.user_relation_group)
  return target;
}

size_t user_relation_group::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:b_business_relation.user_relation_group)
  size_t total_size = 0;

  if (has_friend_group()) {
    // required string friend_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friend_group());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_user_id()) {
    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  return total_size;
}
size_t user_relation_group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b_business_relation.user_relation_group)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string friend_group = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friend_group());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 user_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_relation_group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b_business_relation.user_relation_group)
  GOOGLE_DCHECK_NE(&from, this);
  const user_relation_group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_relation_group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b_business_relation.user_relation_group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b_business_relation.user_relation_group)
    MergeFrom(*source);
  }
}

void user_relation_group::MergeFrom(const user_relation_group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b_business_relation.user_relation_group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_friend_group();
      friend_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friend_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void user_relation_group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b_business_relation.user_relation_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_relation_group::CopyFrom(const user_relation_group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b_business_relation.user_relation_group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_relation_group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void user_relation_group::Swap(user_relation_group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_relation_group::InternalSwap(user_relation_group* other) {
  friend_group_.Swap(&other->friend_group_);
  std::swap(id_, other->id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_relation_group::GetMetadata() const {
  protobuf_b_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_b_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_relation_group

// required uint64 id = 1;
bool user_relation_group::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void user_relation_group::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void user_relation_group::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void user_relation_group::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 user_relation_group::id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation_group.id)
  return id_;
}
void user_relation_group::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation_group.id)
}

// required uint64 user_id = 2;
bool user_relation_group::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void user_relation_group::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void user_relation_group::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void user_relation_group::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::uint64 user_relation_group::user_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation_group.user_id)
  return user_id_;
}
void user_relation_group::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation_group.user_id)
}

// required string friend_group = 3;
bool user_relation_group::has_friend_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void user_relation_group::set_has_friend_group() {
  _has_bits_[0] |= 0x00000001u;
}
void user_relation_group::clear_has_friend_group() {
  _has_bits_[0] &= ~0x00000001u;
}
void user_relation_group::clear_friend_group() {
  friend_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friend_group();
}
const ::std::string& user_relation_group::friend_group() const {
  // @@protoc_insertion_point(field_get:b_business_relation.user_relation_group.friend_group)
  return friend_group_.GetNoArena();
}
void user_relation_group::set_friend_group(const ::std::string& value) {
  set_has_friend_group();
  friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.user_relation_group.friend_group)
}
#if LANG_CXX11
void user_relation_group::set_friend_group(::std::string&& value) {
  set_has_friend_group();
  friend_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.user_relation_group.friend_group)
}
#endif
void user_relation_group::set_friend_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_friend_group();
  friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.user_relation_group.friend_group)
}
void user_relation_group::set_friend_group(const char* value, size_t size) {
  set_has_friend_group();
  friend_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.user_relation_group.friend_group)
}
::std::string* user_relation_group::mutable_friend_group() {
  set_has_friend_group();
  // @@protoc_insertion_point(field_mutable:b_business_relation.user_relation_group.friend_group)
  return friend_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_relation_group::release_friend_group() {
  // @@protoc_insertion_point(field_release:b_business_relation.user_relation_group.friend_group)
  clear_has_friend_group();
  return friend_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_relation_group::set_allocated_friend_group(::std::string* friend_group) {
  if (friend_group != NULL) {
    set_has_friend_group();
  } else {
    clear_has_friend_group();
  }
  friend_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_group);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.user_relation_group.friend_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int friend_apply::kUserApplyIdFieldNumber;
const int friend_apply::kUserApplyNameFieldNumber;
const int friend_apply::kUserApplyNickFieldNumber;
const int friend_apply::kUserApplyCreateTimeFieldNumber;
const int friend_apply::kUserApplyDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

friend_apply::friend_apply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_b_5fbusiness_5frelation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:b_business_relation.friend_apply)
}
friend_apply::friend_apply(const friend_apply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_apply_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_apply_name()) {
    user_apply_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_apply_name_);
  }
  user_apply_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_apply_nick()) {
    user_apply_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_apply_nick_);
  }
  user_apply_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_apply_description()) {
    user_apply_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_apply_description_);
  }
  ::memcpy(&user_apply_id_, &from.user_apply_id_,
    reinterpret_cast<char*>(&user_apply_create_time_) -
    reinterpret_cast<char*>(&user_apply_id_) + sizeof(user_apply_create_time_));
  // @@protoc_insertion_point(copy_constructor:b_business_relation.friend_apply)
}

void friend_apply::SharedCtor() {
  _cached_size_ = 0;
  user_apply_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_apply_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_apply_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_apply_id_, 0, reinterpret_cast<char*>(&user_apply_create_time_) -
    reinterpret_cast<char*>(&user_apply_id_) + sizeof(user_apply_create_time_));
}

friend_apply::~friend_apply() {
  // @@protoc_insertion_point(destructor:b_business_relation.friend_apply)
  SharedDtor();
}

void friend_apply::SharedDtor() {
  user_apply_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_apply_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_apply_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void friend_apply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_apply::descriptor() {
  protobuf_b_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_b_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const friend_apply& friend_apply::default_instance() {
  protobuf_b_5fbusiness_5frelation_2eproto::InitDefaults();
  return *internal_default_instance();
}

friend_apply* friend_apply::New(::google::protobuf::Arena* arena) const {
  friend_apply* n = new friend_apply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void friend_apply::Clear() {
// @@protoc_insertion_point(message_clear_start:b_business_relation.friend_apply)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_apply_name()) {
      GOOGLE_DCHECK(!user_apply_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_apply_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_apply_nick()) {
      GOOGLE_DCHECK(!user_apply_nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_apply_nick_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_apply_description()) {
      GOOGLE_DCHECK(!user_apply_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_apply_description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&user_apply_id_, 0, reinterpret_cast<char*>(&user_apply_create_time_) -
      reinterpret_cast<char*>(&user_apply_id_) + sizeof(user_apply_create_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool friend_apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b_business_relation.friend_apply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_apply_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_user_apply_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_apply_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_apply_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_apply_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_apply_name().data(), this->user_apply_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "b_business_relation.friend_apply.user_apply_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_apply_nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_apply_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_apply_nick().data(), this->user_apply_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "b_business_relation.friend_apply.user_apply_nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 user_apply_create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_user_apply_create_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_apply_create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_apply_description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_apply_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_apply_description().data(), this->user_apply_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "b_business_relation.friend_apply.user_apply_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b_business_relation.friend_apply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b_business_relation.friend_apply)
  return false;
#undef DO_
}

void friend_apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b_business_relation.friend_apply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_apply_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_apply_id(), output);
  }

  // required string user_apply_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_apply_name().data(), this->user_apply_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.friend_apply.user_apply_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_apply_name(), output);
  }

  // required string user_apply_nick = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_apply_nick().data(), this->user_apply_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.friend_apply.user_apply_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_apply_nick(), output);
  }

  // required uint32 user_apply_create_time = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_apply_create_time(), output);
  }

  // required string user_apply_description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_apply_description().data(), this->user_apply_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.friend_apply.user_apply_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_apply_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b_business_relation.friend_apply)
}

::google::protobuf::uint8* friend_apply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b_business_relation.friend_apply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 user_apply_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_apply_id(), target);
  }

  // required string user_apply_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_apply_name().data(), this->user_apply_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.friend_apply.user_apply_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_apply_name(), target);
  }

  // required string user_apply_nick = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_apply_nick().data(), this->user_apply_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.friend_apply.user_apply_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_apply_nick(), target);
  }

  // required uint32 user_apply_create_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_apply_create_time(), target);
  }

  // required string user_apply_description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_apply_description().data(), this->user_apply_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "b_business_relation.friend_apply.user_apply_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_apply_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b_business_relation.friend_apply)
  return target;
}

size_t friend_apply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:b_business_relation.friend_apply)
  size_t total_size = 0;

  if (has_user_apply_name()) {
    // required string user_apply_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_apply_name());
  }

  if (has_user_apply_nick()) {
    // required string user_apply_nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_apply_nick());
  }

  if (has_user_apply_description()) {
    // required string user_apply_description = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_apply_description());
  }

  if (has_user_apply_id()) {
    // required uint64 user_apply_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_apply_id());
  }

  if (has_user_apply_create_time()) {
    // required uint32 user_apply_create_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_apply_create_time());
  }

  return total_size;
}
size_t friend_apply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:b_business_relation.friend_apply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string user_apply_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_apply_name());

    // required string user_apply_nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_apply_nick());

    // required string user_apply_description = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_apply_description());

    // required uint64 user_apply_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_apply_id());

    // required uint32 user_apply_create_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_apply_create_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_apply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:b_business_relation.friend_apply)
  GOOGLE_DCHECK_NE(&from, this);
  const friend_apply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const friend_apply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:b_business_relation.friend_apply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:b_business_relation.friend_apply)
    MergeFrom(*source);
  }
}

void friend_apply::MergeFrom(const friend_apply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:b_business_relation.friend_apply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_apply_name();
      user_apply_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_apply_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_apply_nick();
      user_apply_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_apply_nick_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user_apply_description();
      user_apply_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_apply_description_);
    }
    if (cached_has_bits & 0x00000008u) {
      user_apply_id_ = from.user_apply_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      user_apply_create_time_ = from.user_apply_create_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void friend_apply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:b_business_relation.friend_apply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_apply::CopyFrom(const friend_apply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:b_business_relation.friend_apply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_apply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void friend_apply::Swap(friend_apply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void friend_apply::InternalSwap(friend_apply* other) {
  user_apply_name_.Swap(&other->user_apply_name_);
  user_apply_nick_.Swap(&other->user_apply_nick_);
  user_apply_description_.Swap(&other->user_apply_description_);
  std::swap(user_apply_id_, other->user_apply_id_);
  std::swap(user_apply_create_time_, other->user_apply_create_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata friend_apply::GetMetadata() const {
  protobuf_b_5fbusiness_5frelation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_b_5fbusiness_5frelation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// friend_apply

// required uint64 user_apply_id = 1;
bool friend_apply::has_user_apply_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void friend_apply::set_has_user_apply_id() {
  _has_bits_[0] |= 0x00000008u;
}
void friend_apply::clear_has_user_apply_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void friend_apply::clear_user_apply_id() {
  user_apply_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_apply_id();
}
::google::protobuf::uint64 friend_apply::user_apply_id() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_id)
  return user_apply_id_;
}
void friend_apply::set_user_apply_id(::google::protobuf::uint64 value) {
  set_has_user_apply_id();
  user_apply_id_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_id)
}

// required string user_apply_name = 2;
bool friend_apply::has_user_apply_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void friend_apply::set_has_user_apply_name() {
  _has_bits_[0] |= 0x00000001u;
}
void friend_apply::clear_has_user_apply_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void friend_apply::clear_user_apply_name() {
  user_apply_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_apply_name();
}
const ::std::string& friend_apply::user_apply_name() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_name)
  return user_apply_name_.GetNoArena();
}
void friend_apply::set_user_apply_name(const ::std::string& value) {
  set_has_user_apply_name();
  user_apply_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_name)
}
#if LANG_CXX11
void friend_apply::set_user_apply_name(::std::string&& value) {
  set_has_user_apply_name();
  user_apply_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.friend_apply.user_apply_name)
}
#endif
void friend_apply::set_user_apply_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_apply_name();
  user_apply_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.friend_apply.user_apply_name)
}
void friend_apply::set_user_apply_name(const char* value, size_t size) {
  set_has_user_apply_name();
  user_apply_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.friend_apply.user_apply_name)
}
::std::string* friend_apply::mutable_user_apply_name() {
  set_has_user_apply_name();
  // @@protoc_insertion_point(field_mutable:b_business_relation.friend_apply.user_apply_name)
  return user_apply_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* friend_apply::release_user_apply_name() {
  // @@protoc_insertion_point(field_release:b_business_relation.friend_apply.user_apply_name)
  clear_has_user_apply_name();
  return user_apply_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void friend_apply::set_allocated_user_apply_name(::std::string* user_apply_name) {
  if (user_apply_name != NULL) {
    set_has_user_apply_name();
  } else {
    clear_has_user_apply_name();
  }
  user_apply_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_apply_name);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.friend_apply.user_apply_name)
}

// required string user_apply_nick = 3;
bool friend_apply::has_user_apply_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void friend_apply::set_has_user_apply_nick() {
  _has_bits_[0] |= 0x00000002u;
}
void friend_apply::clear_has_user_apply_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
void friend_apply::clear_user_apply_nick() {
  user_apply_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_apply_nick();
}
const ::std::string& friend_apply::user_apply_nick() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_nick)
  return user_apply_nick_.GetNoArena();
}
void friend_apply::set_user_apply_nick(const ::std::string& value) {
  set_has_user_apply_nick();
  user_apply_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_nick)
}
#if LANG_CXX11
void friend_apply::set_user_apply_nick(::std::string&& value) {
  set_has_user_apply_nick();
  user_apply_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.friend_apply.user_apply_nick)
}
#endif
void friend_apply::set_user_apply_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_apply_nick();
  user_apply_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.friend_apply.user_apply_nick)
}
void friend_apply::set_user_apply_nick(const char* value, size_t size) {
  set_has_user_apply_nick();
  user_apply_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.friend_apply.user_apply_nick)
}
::std::string* friend_apply::mutable_user_apply_nick() {
  set_has_user_apply_nick();
  // @@protoc_insertion_point(field_mutable:b_business_relation.friend_apply.user_apply_nick)
  return user_apply_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* friend_apply::release_user_apply_nick() {
  // @@protoc_insertion_point(field_release:b_business_relation.friend_apply.user_apply_nick)
  clear_has_user_apply_nick();
  return user_apply_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void friend_apply::set_allocated_user_apply_nick(::std::string* user_apply_nick) {
  if (user_apply_nick != NULL) {
    set_has_user_apply_nick();
  } else {
    clear_has_user_apply_nick();
  }
  user_apply_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_apply_nick);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.friend_apply.user_apply_nick)
}

// required uint32 user_apply_create_time = 4;
bool friend_apply::has_user_apply_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void friend_apply::set_has_user_apply_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
void friend_apply::clear_has_user_apply_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void friend_apply::clear_user_apply_create_time() {
  user_apply_create_time_ = 0u;
  clear_has_user_apply_create_time();
}
::google::protobuf::uint32 friend_apply::user_apply_create_time() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_create_time)
  return user_apply_create_time_;
}
void friend_apply::set_user_apply_create_time(::google::protobuf::uint32 value) {
  set_has_user_apply_create_time();
  user_apply_create_time_ = value;
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_create_time)
}

// required string user_apply_description = 5;
bool friend_apply::has_user_apply_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void friend_apply::set_has_user_apply_description() {
  _has_bits_[0] |= 0x00000004u;
}
void friend_apply::clear_has_user_apply_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void friend_apply::clear_user_apply_description() {
  user_apply_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_apply_description();
}
const ::std::string& friend_apply::user_apply_description() const {
  // @@protoc_insertion_point(field_get:b_business_relation.friend_apply.user_apply_description)
  return user_apply_description_.GetNoArena();
}
void friend_apply::set_user_apply_description(const ::std::string& value) {
  set_has_user_apply_description();
  user_apply_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:b_business_relation.friend_apply.user_apply_description)
}
#if LANG_CXX11
void friend_apply::set_user_apply_description(::std::string&& value) {
  set_has_user_apply_description();
  user_apply_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:b_business_relation.friend_apply.user_apply_description)
}
#endif
void friend_apply::set_user_apply_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_apply_description();
  user_apply_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:b_business_relation.friend_apply.user_apply_description)
}
void friend_apply::set_user_apply_description(const char* value, size_t size) {
  set_has_user_apply_description();
  user_apply_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:b_business_relation.friend_apply.user_apply_description)
}
::std::string* friend_apply::mutable_user_apply_description() {
  set_has_user_apply_description();
  // @@protoc_insertion_point(field_mutable:b_business_relation.friend_apply.user_apply_description)
  return user_apply_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* friend_apply::release_user_apply_description() {
  // @@protoc_insertion_point(field_release:b_business_relation.friend_apply.user_apply_description)
  clear_has_user_apply_description();
  return user_apply_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void friend_apply::set_allocated_user_apply_description(::std::string* user_apply_description) {
  if (user_apply_description != NULL) {
    set_has_user_apply_description();
  } else {
    clear_has_user_apply_description();
  }
  user_apply_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_apply_description);
  // @@protoc_insertion_point(field_set_allocated:b_business_relation.friend_apply.user_apply_description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace b_business_relation

// @@protoc_insertion_point(global_scope)
