// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: b_enum.proto

#ifndef PROTOBUF_b_5fenum_2eproto__INCLUDED
#define PROTOBUF_b_5fenum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
namespace b_enum {
}  // namespace b_enum

namespace b_enum {

namespace protobuf_b_5fenum_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_b_5fenum_2eproto

enum reply_t {
  accept = 0,
  refuse = 1
};
bool reply_t_IsValid(int value);
const reply_t reply_t_MIN = accept;
const reply_t reply_t_MAX = refuse;
const int reply_t_ARRAYSIZE = reply_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* reply_t_descriptor();
inline const ::std::string& reply_t_Name(reply_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    reply_t_descriptor(), value);
}
inline bool reply_t_Parse(
    const ::std::string& name, reply_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<reply_t>(
    reply_t_descriptor(), name, value);
}
enum operate_t {
  ensure = 0,
  cancel = 1
};
bool operate_t_IsValid(int value);
const operate_t operate_t_MIN = ensure;
const operate_t operate_t_MAX = cancel;
const int operate_t_ARRAYSIZE = operate_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* operate_t_descriptor();
inline const ::std::string& operate_t_Name(operate_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    operate_t_descriptor(), value);
}
inline bool operate_t_Parse(
    const ::std::string& name, operate_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<operate_t>(
    operate_t_descriptor(), name, value);
}
enum opcode_t {
  assign = 0,
  update = 1,
  insert = 2,
  remove = 3,
  delete_ = 4
};
bool opcode_t_IsValid(int value);
const opcode_t opcode_t_MIN = assign;
const opcode_t opcode_t_MAX = delete_;
const int opcode_t_ARRAYSIZE = opcode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* opcode_t_descriptor();
inline const ::std::string& opcode_t_Name(opcode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    opcode_t_descriptor(), value);
}
inline bool opcode_t_Parse(
    const ::std::string& name, opcode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<opcode_t>(
    opcode_t_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace b_enum

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::b_enum::reply_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::b_enum::reply_t>() {
  return ::b_enum::reply_t_descriptor();
}
template <> struct is_proto_enum< ::b_enum::operate_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::b_enum::operate_t>() {
  return ::b_enum::operate_t_descriptor();
}
template <> struct is_proto_enum< ::b_enum::opcode_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::b_enum::opcode_t>() {
  return ::b_enum::opcode_t_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_b_5fenum_2eproto__INCLUDED
