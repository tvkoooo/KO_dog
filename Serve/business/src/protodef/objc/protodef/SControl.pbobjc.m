// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s_control.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "SControl.pbobjc.h"
 #import "BError.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - S_control_SControlRoot

@implementation S_control_SControlRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - S_control_SControlRoot_FileDescriptor

static GPBFileDescriptor *S_control_SControlRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"s_control"
                                                 objcPrefix:@"S_control_"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum S_control_msg

GPBEnumDescriptor *S_control_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MinId\000MaxId\000";
    static const int32_t values[] = {
        S_control_msg_MinId,
        S_control_msg_MaxId,
    };
    static const char *extraTextFormatInfo = "\002\000#\242\000\001#\242\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(S_control_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:S_control_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL S_control_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case S_control_msg_MinId:
    case S_control_msg_MaxId:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - S_control_set_logger_rq

@implementation S_control_set_logger_rq

@dynamic hasLevel, level;

typedef struct S_control_set_logger_rq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t level;
} S_control_set_logger_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = S_control_set_logger_rq_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S_control_set_logger_rq__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S_control_set_logger_rq class]
                                     rootClass:[S_control_SControlRoot class]
                                          file:S_control_SControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S_control_set_logger_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum S_control_set_logger_rq_msg

GPBEnumDescriptor *S_control_set_logger_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        S_control_set_logger_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(S_control_set_logger_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:S_control_set_logger_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL S_control_set_logger_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case S_control_set_logger_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - S_control_set_logger_rs

@implementation S_control_set_logger_rs

@dynamic hasError, error;
@dynamic hasLevel, level;

typedef struct S_control_set_logger_rs__storage_ {
  uint32_t _has_storage_[1];
  uint32_t level;
  B_error_info *error;
} S_control_set_logger_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = S_control_set_logger_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S_control_set_logger_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = S_control_set_logger_rs_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S_control_set_logger_rs__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S_control_set_logger_rs class]
                                     rootClass:[S_control_SControlRoot class]
                                          file:S_control_SControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S_control_set_logger_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum S_control_set_logger_rs_msg

GPBEnumDescriptor *S_control_set_logger_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        S_control_set_logger_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(S_control_set_logger_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:S_control_set_logger_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL S_control_set_logger_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case S_control_set_logger_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - S_control_get_logger_rq

@implementation S_control_get_logger_rq


typedef struct S_control_get_logger_rq__storage_ {
  uint32_t _has_storage_[1];
} S_control_get_logger_rq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S_control_get_logger_rq class]
                                     rootClass:[S_control_SControlRoot class]
                                          file:S_control_SControlRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(S_control_get_logger_rq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum S_control_get_logger_rq_msg

GPBEnumDescriptor *S_control_get_logger_rq_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        S_control_get_logger_rq_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(S_control_get_logger_rq_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:S_control_get_logger_rq_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL S_control_get_logger_rq_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case S_control_get_logger_rq_msg_Id:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - S_control_get_logger_rs

@implementation S_control_get_logger_rs

@dynamic hasError, error;
@dynamic hasLevel, level;

typedef struct S_control_get_logger_rs__storage_ {
  uint32_t _has_storage_[1];
  uint32_t level;
  B_error_info *error;
} S_control_get_logger_rs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(B_error_info),
        .number = S_control_get_logger_rs_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(S_control_get_logger_rs__storage_, error),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = S_control_get_logger_rs_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(S_control_get_logger_rs__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[S_control_get_logger_rs class]
                                     rootClass:[S_control_SControlRoot class]
                                          file:S_control_SControlRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(S_control_get_logger_rs__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum S_control_get_logger_rs_msg

GPBEnumDescriptor *S_control_get_logger_rs_msg_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000";
    static const int32_t values[] = {
        S_control_get_logger_rs_msg_Id,
    };
    static const char *extraTextFormatInfo = "\001\000\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(S_control_get_logger_rs_msg)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:S_control_get_logger_rs_msg_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL S_control_get_logger_rs_msg_IsValidValue(int32_t value__) {
  switch (value__) {
    case S_control_get_logger_rs_msg_Id:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
