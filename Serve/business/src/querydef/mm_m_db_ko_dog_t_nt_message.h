//
//	Generated by lua
//	copyright longer 2019
//  mm_m_db_ko_dog_t_nt_message.h

#ifndef __mm_m_db_ko_dog_t_nt_message_h__
#define __mm_m_db_ko_dog_t_nt_message_h__

#include "dish/mm_package.h"
#include <string>

namespace mm
{
	//
	//	struct definition for t_nt_message	//
	struct t_nt_message : public mm_package
	{
	public:
		mm_uint64_t note_id;// note_id.
		mm_sint8_t read_state;// read_state.
		mm_uint64_t to_user_id;// to_user_id.
		mm_uint64_t user_id;// user_id.
		mm_uint32_t message_mid;// message_mid.
		mm_uint32_t create_time;// create_time.
		std::string nt_message;// nt_message
	public:
		virtual ~t_nt_message();
	public:
		t_nt_message();
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
	};
}
#endif//__dish_m_db_ko_dog_t_nt_message_h__