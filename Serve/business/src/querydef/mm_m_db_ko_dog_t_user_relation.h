//
//	Generated by lua
//	copyright longer 2019
//  mm_m_db_ko_dog_t_user_relation.h

#ifndef __mm_m_db_ko_dog_t_user_relation_h__
#define __mm_m_db_ko_dog_t_user_relation_h__

#include "dish/mm_package.h"
#include <string>

namespace mm
{
	//
	//	struct definition for t_user_relation	//
	struct t_user_relation : public mm_package
	{
	public:
		mm_uint64_t user_id;// user_id.
		mm_uint64_t friend_group_id;// friend_group_id.
		mm_uint64_t friend_id;// friend_id.
		std::string friend_remark;// friend_remark.
		mm_uint32_t build_friend_time;// build_friend_time
	public:
		virtual ~t_user_relation();
	public:
		t_user_relation();
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
	};
	//
	//	struct definition for t_user_relation_assist	//
	struct t_user_relation_assist : public mm_package
	{
	public:
		mm_uint64_t id;// friend_group_id.
		mm_uint64_t user_id;// user_id.
		std::string friend_group;// friend_group.
	public:
		virtual ~t_user_relation_assist();
	public:
		t_user_relation_assist();
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
	};
	//
	//	struct definition for t_user_relation_friend_apply	//
	struct t_user_relation_friend_apply : public mm_package
	{
	public:
		mm_uint64_t user_apply_id;// user_apply_id.
		std::string user_apply_name;// user_apply_name.
		std::string user_apply_nick;// user_apply_nick.
		mm_uint32_t user_apply_create_time;// user_apply_create_time
		std::string user_apply_description;// friend_group.
	public:
		virtual ~t_user_relation_friend_apply();
	public:
		t_user_relation_friend_apply();
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
	};
}
#endif//__dish_m_db_ko_dog_t_user_relation_h__