//
//	Generated by lua
//	copyright longer 2019
//  mm_q_db_ko_dog_t_nt_message.h

#ifndef __mm_q_db_ko_dog_t_nt_message_h__
#define __mm_q_db_ko_dog_t_nt_message_h__
#include "mysql/mm_db_mysql_query.h"
#include "dish/mm_package.h"
#include "core/mm_logger.h"
#include "querydef/mm_m_db_ko_dog_t_nt_message.h"
#include <vector>

namespace mm
{
	//
	//	struct definition for p_nt_message_add	//
	struct p_nt_message_add : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t user_id;// user_id
		mm_uint64_t to_user_id;// to_user_id
		mm_uint32_t message_mid;// message_mid
		std::string nt_message;// nt_message
		mm_uint64_t note_id;// note_id
	public:
		virtual ~p_nt_message_add();
	public:
		p_nt_message_add();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_nt_message_delete_by_id	//
	struct p_nt_message_delete_by_id : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t note_id;// note_id
	public:
		virtual ~p_nt_message_delete_by_id();
	public:
		p_nt_message_delete_by_id();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_nt_message_read_by_note_id	//
	struct p_nt_message_read_by_note_id : public mm_queryer
	{
	public:
		typedef std::vector<t_nt_message> nt_message_vec;
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t note_id;// note_id
		nt_message_vec nt_message_s;
	public:
		virtual ~p_nt_message_read_by_note_id();
	public:
		p_nt_message_read_by_note_id();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_nt_message_read_by_to_user_id	//
	struct p_nt_message_read_by_to_user_id : public mm_queryer
	{
	public:
		typedef std::vector<t_nt_message> nt_message_vec;
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t to_user_id;// to_user_id
		nt_message_vec nt_message_s;
	public:
		virtual ~p_nt_message_read_by_to_user_id();
	public:
		p_nt_message_read_by_to_user_id();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_nt_message_consume_by_note_id	//
	struct p_nt_message_consume_by_note_id : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t to_user_id;// to_user_id
		mm_uint64_t note_id;// note_id
	public:
		virtual ~p_nt_message_consume_by_note_id();
	public:
		p_nt_message_consume_by_note_id();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_nt_message_consume_by_max_note_id	//
	struct p_nt_message_consume_by_max_note_id : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t to_user_id;// to_user_id
		mm_uint64_t note_id;// note_id
	public:
		virtual ~p_nt_message_consume_by_max_note_id();
	public:
		p_nt_message_consume_by_max_note_id();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_nt_message_regular_clean	//
	struct p_nt_message_regular_clean : public mm_queryer
	{
	public:
		mm_uint32_t unread_day;// unread_day
		mm_uint32_t read_day;// read_day
	public:
		virtual ~p_nt_message_regular_clean();
	public:
		p_nt_message_regular_clean();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
}
#endif//__dish_q_db_ko_dog_t_nt_message_h__