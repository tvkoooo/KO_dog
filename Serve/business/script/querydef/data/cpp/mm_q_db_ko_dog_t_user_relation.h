//
//	Generated by lua
//	copyright longer 2019
//  mm_q_db_ko_dog_t_user_relation.h

#ifndef __mm_q_db_ko_dog_t_user_relation_h__
#define __mm_q_db_ko_dog_t_user_relation_h__
#include "mysql/mm_db_mysql_query.h"
#include "dish/mm_package.h"
#include "core/mm_logger.h"
#include "querydef/mm_m_db_ko_dog_t_user_relation.h"
#include <vector>

namespace mm
{
	//
	//	struct definition for p_user_relation_add_friend	//
	struct p_user_relation_add_friend : public mm_queryer
	{
	public:
		typedef std::vector<t_user_relation> user_relation_vec;
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t myself_id;// myself_id
		mm_uint64_t friend_id;// friend_id
		std::string friend_remark;// friend_remark
		user_relation_vec user_relation_s;
	public:
		virtual ~p_user_relation_add_friend();
	public:
		p_user_relation_add_friend();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_delete_friend	//
	struct p_user_relation_delete_friend : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t myself_id;// myself_id
		mm_uint64_t friend_id;// friend_id
	public:
		virtual ~p_user_relation_delete_friend();
	public:
		p_user_relation_delete_friend();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_query_friends	//
	struct p_user_relation_query_friends : public mm_queryer
	{
	public:
		typedef std::vector<t_user_relation_assist> user_relation_assist_vec;
		typedef std::vector<t_user_relation> user_relation_vec;
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t myself_id;// myself_id
		user_relation_assist_vec user_relation_assist_s;
		user_relation_vec user_relation_s;
	public:
		virtual ~p_user_relation_query_friends();
	public:
		p_user_relation_query_friends();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_add_group	//
	struct p_user_relation_add_group : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t myself_id;// myself_id
		std::string friend_group;// friend_group
		mm_uint64_t id;// 
	public:
		virtual ~p_user_relation_add_group();
	public:
		p_user_relation_add_group();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_rename_group	//
	struct p_user_relation_rename_group : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t user_id;// user_id
		mm_uint64_t friend_group_id;// friend_group_id
		std::string friend_group;// friend_group
	public:
		virtual ~p_user_relation_rename_group();
	public:
		p_user_relation_rename_group();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_delete_group	//
	struct p_user_relation_delete_group : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t myself_id;// myself_id
		mm_uint64_t friend_id;// friend_id
		mm_uint64_t friend_group_id;// friend_group_id
	public:
		virtual ~p_user_relation_delete_group();
	public:
		p_user_relation_delete_group();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_change_group	//
	struct p_user_relation_change_group : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t myself_id;// myself_id
		mm_uint64_t friend_id;// friend_id
		mm_uint64_t friend_group_id_old;// friend_group_id_old
		mm_uint64_t friend_group_id_new;// friend_group_id_new
	public:
		virtual ~p_user_relation_change_group();
	public:
		p_user_relation_change_group();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_change_remark	//
	struct p_user_relation_change_remark : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t myself_id;// myself_id
		mm_uint64_t friend_id;// friend_id
		std::string friend_remark;// friend_remark
	public:
		virtual ~p_user_relation_change_remark();
	public:
		p_user_relation_change_remark();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_add_apply	//
	struct p_user_relation_add_apply : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t user_allow_id;// user_allow_id
		mm_uint64_t user_apply_id;// user_apply_id
		std::string user_apply_description;// user_apply_description
	public:
		virtual ~p_user_relation_add_apply();
	public:
		p_user_relation_add_apply();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_respond_apply	//
	struct p_user_relation_respond_apply : public mm_queryer
	{
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t user_allow_id;// user_allow_id
		mm_uint64_t user_apply_id;// user_apply_id
	public:
		virtual ~p_user_relation_respond_apply();
	public:
		p_user_relation_respond_apply();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
	//
	//	struct definition for p_user_relation_query_friends_apply	//
	struct p_user_relation_query_friends_apply : public mm_queryer
	{
	public:
		typedef std::vector<t_user_relation_friend_apply> user_relation_friend_apply_vec;
	public:
		mm_uint32_t code;// error code for sql.
		mm_uint64_t myself_id;// myself_id
		user_relation_friend_apply_vec user_relation_friend_apply_s;
	public:
		virtual ~p_user_relation_query_friends_apply();
	public:
		p_user_relation_query_friends_apply();
		//////////////////////////////////////////////////////////////////////////
		// package
		virtual void encode(mm_o_archive& archive) const;
		virtual void decode(const mm_i_archive& archive);
		//////////////////////////////////////////////////////////////////////////
		// queryer
		virtual int query(struct mm_db_mysql* _sql, mm_uint32_t logger_level);
	};
}
#endif//__dish_q_db_ko_dog_t_user_relation_h__