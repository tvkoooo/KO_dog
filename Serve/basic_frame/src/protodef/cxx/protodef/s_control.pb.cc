// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s_control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace s_control {
class set_logger_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<set_logger_rq> {
} _set_logger_rq_default_instance_;
class set_logger_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<set_logger_rs> {
} _set_logger_rs_default_instance_;
class get_logger_rqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<get_logger_rq> {
} _get_logger_rq_default_instance_;
class get_logger_rsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<get_logger_rs> {
} _get_logger_rs_default_instance_;

namespace protobuf_s_5fcontrol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_logger_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_logger_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_logger_rq, level_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_logger_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_logger_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_logger_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_logger_rs, level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_logger_rq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_logger_rq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_logger_rs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_logger_rs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_logger_rs, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_logger_rs, level_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(set_logger_rq)},
  { 7, 14, sizeof(set_logger_rs)},
  { 16, 21, sizeof(get_logger_rq)},
  { 21, 28, sizeof(get_logger_rs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_set_logger_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_set_logger_rs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_get_logger_rq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_get_logger_rs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "s_control.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _set_logger_rq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _set_logger_rs_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _get_logger_rq_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _get_logger_rs_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::b_error::protobuf_b_5ferror_2eproto::InitDefaults();
  _set_logger_rq_default_instance_.DefaultConstruct();
  _set_logger_rs_default_instance_.DefaultConstruct();
  _get_logger_rq_default_instance_.DefaultConstruct();
  _get_logger_rs_default_instance_.DefaultConstruct();
  _set_logger_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
  _get_logger_rs_default_instance_.get_mutable()->error_ = const_cast< ::b_error::info*>(
      ::b_error::info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017s_control.proto\022\ts_control\032\rb_error.pr"
      "oto\"3\n\rset_logger_rq\022\020\n\005level\030\001 \002(\r:\0010\"\020"
      "\n\003msg\022\t\n\002id\020\200\202\200\010\"Q\n\rset_logger_rs\022\034\n\005err"
      "or\030\001 \002(\0132\r.b_error.info\022\020\n\005level\030\002 \002(\r:\001"
      "0\"\020\n\003msg\022\t\n\002id\020\201\202\200\010\"!\n\rget_logger_rq\"\020\n\003"
      "msg\022\t\n\002id\020\202\202\200\010\"Q\n\rget_logger_rs\022\034\n\005error"
      "\030\001 \002(\0132\r.b_error.info\022\020\n\005level\030\002 \002(\r:\0010\""
      "\020\n\003msg\022\t\n\002id\020\203\202\200\010*#\n\003msg\022\r\n\006min_id\020\200\202\200\010\022"
      "\r\n\006max_id\020\377\203\200\010BB\n\010protodefB\ts_controlZ\022p"
      "rotodef/s_control\242\002\nS_control_\252\002\ts_contr"
      "ol"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s_control.proto", &protobuf_RegisterTypes);
  ::b_error::protobuf_b_5ferror_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_s_5fcontrol_2eproto

const ::google::protobuf::EnumDescriptor* set_logger_rq_msg_descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_enum_descriptors[0];
}
bool set_logger_rq_msg_IsValid(int value) {
  switch (value) {
    case 16777472:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const set_logger_rq_msg set_logger_rq::id;
const set_logger_rq_msg set_logger_rq::msg_MIN;
const set_logger_rq_msg set_logger_rq::msg_MAX;
const int set_logger_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* set_logger_rs_msg_descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_enum_descriptors[1];
}
bool set_logger_rs_msg_IsValid(int value) {
  switch (value) {
    case 16777473:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const set_logger_rs_msg set_logger_rs::id;
const set_logger_rs_msg set_logger_rs::msg_MIN;
const set_logger_rs_msg set_logger_rs::msg_MAX;
const int set_logger_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* get_logger_rq_msg_descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_enum_descriptors[2];
}
bool get_logger_rq_msg_IsValid(int value) {
  switch (value) {
    case 16777474:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const get_logger_rq_msg get_logger_rq::id;
const get_logger_rq_msg get_logger_rq::msg_MIN;
const get_logger_rq_msg get_logger_rq::msg_MAX;
const int get_logger_rq::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* get_logger_rs_msg_descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_enum_descriptors[3];
}
bool get_logger_rs_msg_IsValid(int value) {
  switch (value) {
    case 16777475:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const get_logger_rs_msg get_logger_rs::id;
const get_logger_rs_msg get_logger_rs::msg_MIN;
const get_logger_rs_msg get_logger_rs::msg_MAX;
const int get_logger_rs::msg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* msg_descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_enum_descriptors[4];
}
bool msg_IsValid(int value) {
  switch (value) {
    case 16777472:
    case 16777727:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int set_logger_rq::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

set_logger_rq::set_logger_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_s_5fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:s_control.set_logger_rq)
}
set_logger_rq::set_logger_rq(const set_logger_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:s_control.set_logger_rq)
}

void set_logger_rq::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
}

set_logger_rq::~set_logger_rq() {
  // @@protoc_insertion_point(destructor:s_control.set_logger_rq)
  SharedDtor();
}

void set_logger_rq::SharedDtor() {
}

void set_logger_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_logger_rq::descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const set_logger_rq& set_logger_rq::default_instance() {
  protobuf_s_5fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

set_logger_rq* set_logger_rq::New(::google::protobuf::Arena* arena) const {
  set_logger_rq* n = new set_logger_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void set_logger_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:s_control.set_logger_rq)
  level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool set_logger_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s_control.set_logger_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s_control.set_logger_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s_control.set_logger_rq)
  return false;
#undef DO_
}

void set_logger_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s_control.set_logger_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 level = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s_control.set_logger_rq)
}

::google::protobuf::uint8* set_logger_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s_control.set_logger_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 level = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s_control.set_logger_rq)
  return target;
}

size_t set_logger_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s_control.set_logger_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 level = 1 [default = 0];
  if (has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_logger_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s_control.set_logger_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const set_logger_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const set_logger_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s_control.set_logger_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s_control.set_logger_rq)
    MergeFrom(*source);
  }
}

void set_logger_rq::MergeFrom(const set_logger_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s_control.set_logger_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_level()) {
    set_level(from.level());
  }
}

void set_logger_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s_control.set_logger_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_logger_rq::CopyFrom(const set_logger_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s_control.set_logger_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_logger_rq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void set_logger_rq::Swap(set_logger_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void set_logger_rq::InternalSwap(set_logger_rq* other) {
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata set_logger_rq::GetMetadata() const {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// set_logger_rq

// required uint32 level = 1 [default = 0];
bool set_logger_rq::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void set_logger_rq::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void set_logger_rq::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void set_logger_rq::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 set_logger_rq::level() const {
  // @@protoc_insertion_point(field_get:s_control.set_logger_rq.level)
  return level_;
}
void set_logger_rq::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:s_control.set_logger_rq.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int set_logger_rs::kErrorFieldNumber;
const int set_logger_rs::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

set_logger_rs::set_logger_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_s_5fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:s_control.set_logger_rs)
}
set_logger_rs::set_logger_rs(const set_logger_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:s_control.set_logger_rs)
}

void set_logger_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&error_) + sizeof(level_));
}

set_logger_rs::~set_logger_rs() {
  // @@protoc_insertion_point(destructor:s_control.set_logger_rs)
  SharedDtor();
}

void set_logger_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void set_logger_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_logger_rs::descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const set_logger_rs& set_logger_rs::default_instance() {
  protobuf_s_5fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

set_logger_rs* set_logger_rs::New(::google::protobuf::Arena* arena) const {
  set_logger_rs* n = new set_logger_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void set_logger_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:s_control.set_logger_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool set_logger_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s_control.set_logger_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 level = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s_control.set_logger_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s_control.set_logger_rs)
  return false;
#undef DO_
}

void set_logger_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s_control.set_logger_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s_control.set_logger_rs)
}

::google::protobuf::uint8* set_logger_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s_control.set_logger_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s_control.set_logger_rs)
  return target;
}

size_t set_logger_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:s_control.set_logger_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_level()) {
    // required uint32 level = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  return total_size;
}
size_t set_logger_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s_control.set_logger_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint32 level = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_logger_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s_control.set_logger_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const set_logger_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const set_logger_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s_control.set_logger_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s_control.set_logger_rs)
    MergeFrom(*source);
  }
}

void set_logger_rs::MergeFrom(const set_logger_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s_control.set_logger_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void set_logger_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s_control.set_logger_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_logger_rs::CopyFrom(const set_logger_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s_control.set_logger_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_logger_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void set_logger_rs::Swap(set_logger_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void set_logger_rs::InternalSwap(set_logger_rs* other) {
  std::swap(error_, other->error_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata set_logger_rs::GetMetadata() const {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// set_logger_rs

// required .b_error.info error = 1;
bool set_logger_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void set_logger_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void set_logger_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void set_logger_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& set_logger_rs::error() const {
  // @@protoc_insertion_point(field_get:s_control.set_logger_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* set_logger_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:s_control.set_logger_rs.error)
  return error_;
}
::b_error::info* set_logger_rs::release_error() {
  // @@protoc_insertion_point(field_release:s_control.set_logger_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void set_logger_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:s_control.set_logger_rs.error)
}

// required uint32 level = 2 [default = 0];
bool set_logger_rs::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void set_logger_rs::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void set_logger_rs::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void set_logger_rs::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 set_logger_rs::level() const {
  // @@protoc_insertion_point(field_get:s_control.set_logger_rs.level)
  return level_;
}
void set_logger_rs::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:s_control.set_logger_rs.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_logger_rq::get_logger_rq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_s_5fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:s_control.get_logger_rq)
}
get_logger_rq::get_logger_rq(const get_logger_rq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:s_control.get_logger_rq)
}

void get_logger_rq::SharedCtor() {
  _cached_size_ = 0;
}

get_logger_rq::~get_logger_rq() {
  // @@protoc_insertion_point(destructor:s_control.get_logger_rq)
  SharedDtor();
}

void get_logger_rq::SharedDtor() {
}

void get_logger_rq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_logger_rq::descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_logger_rq& get_logger_rq::default_instance() {
  protobuf_s_5fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

get_logger_rq* get_logger_rq::New(::google::protobuf::Arena* arena) const {
  get_logger_rq* n = new get_logger_rq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_logger_rq::Clear() {
// @@protoc_insertion_point(message_clear_start:s_control.get_logger_rq)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool get_logger_rq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s_control.get_logger_rq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:s_control.get_logger_rq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s_control.get_logger_rq)
  return false;
#undef DO_
}

void get_logger_rq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s_control.get_logger_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s_control.get_logger_rq)
}

::google::protobuf::uint8* get_logger_rq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s_control.get_logger_rq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s_control.get_logger_rq)
  return target;
}

size_t get_logger_rq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s_control.get_logger_rq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_logger_rq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s_control.get_logger_rq)
  GOOGLE_DCHECK_NE(&from, this);
  const get_logger_rq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_logger_rq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s_control.get_logger_rq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s_control.get_logger_rq)
    MergeFrom(*source);
  }
}

void get_logger_rq::MergeFrom(const get_logger_rq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s_control.get_logger_rq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_logger_rq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s_control.get_logger_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_logger_rq::CopyFrom(const get_logger_rq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s_control.get_logger_rq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_logger_rq::IsInitialized() const {
  return true;
}

void get_logger_rq::Swap(get_logger_rq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_logger_rq::InternalSwap(get_logger_rq* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_logger_rq::GetMetadata() const {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_logger_rq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_logger_rs::kErrorFieldNumber;
const int get_logger_rs::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_logger_rs::get_logger_rs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_s_5fcontrol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:s_control.get_logger_rs)
}
get_logger_rs::get_logger_rs(const get_logger_rs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::b_error::info(*from.error_);
  } else {
    error_ = NULL;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:s_control.get_logger_rs)
}

void get_logger_rs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&error_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&error_) + sizeof(level_));
}

get_logger_rs::~get_logger_rs() {
  // @@protoc_insertion_point(destructor:s_control.get_logger_rs)
  SharedDtor();
}

void get_logger_rs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void get_logger_rs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_logger_rs::descriptor() {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_logger_rs& get_logger_rs::default_instance() {
  protobuf_s_5fcontrol_2eproto::InitDefaults();
  return *internal_default_instance();
}

get_logger_rs* get_logger_rs::New(::google::protobuf::Arena* arena) const {
  get_logger_rs* n = new get_logger_rs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_logger_rs::Clear() {
// @@protoc_insertion_point(message_clear_start:s_control.get_logger_rs)
  if (has_error()) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->::b_error::info::Clear();
  }
  level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool get_logger_rs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:s_control.get_logger_rs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b_error.info error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 level = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:s_control.get_logger_rs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:s_control.get_logger_rs)
  return false;
#undef DO_
}

void get_logger_rs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:s_control.get_logger_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // required uint32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:s_control.get_logger_rs)
}

::google::protobuf::uint8* get_logger_rs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:s_control.get_logger_rs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .b_error.info error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, deterministic, target);
  }

  // required uint32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s_control.get_logger_rs)
  return target;
}

size_t get_logger_rs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:s_control.get_logger_rs)
  size_t total_size = 0;

  if (has_error()) {
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  if (has_level()) {
    // required uint32 level = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  return total_size;
}
size_t get_logger_rs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s_control.get_logger_rs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .b_error.info error = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);

    // required uint32 level = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_logger_rs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:s_control.get_logger_rs)
  GOOGLE_DCHECK_NE(&from, this);
  const get_logger_rs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_logger_rs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:s_control.get_logger_rs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:s_control.get_logger_rs)
    MergeFrom(*source);
  }
}

void get_logger_rs::MergeFrom(const get_logger_rs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s_control.get_logger_rs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::b_error::info::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void get_logger_rs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:s_control.get_logger_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_logger_rs::CopyFrom(const get_logger_rs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s_control.get_logger_rs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_logger_rs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void get_logger_rs::Swap(get_logger_rs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_logger_rs::InternalSwap(get_logger_rs* other) {
  std::swap(error_, other->error_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_logger_rs::GetMetadata() const {
  protobuf_s_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_logger_rs

// required .b_error.info error = 1;
bool get_logger_rs::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void get_logger_rs::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void get_logger_rs::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void get_logger_rs::clear_error() {
  if (error_ != NULL) error_->::b_error::info::Clear();
  clear_has_error();
}
const ::b_error::info& get_logger_rs::error() const {
  // @@protoc_insertion_point(field_get:s_control.get_logger_rs.error)
  return error_ != NULL ? *error_
                         : *::b_error::info::internal_default_instance();
}
::b_error::info* get_logger_rs::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::b_error::info;
  }
  // @@protoc_insertion_point(field_mutable:s_control.get_logger_rs.error)
  return error_;
}
::b_error::info* get_logger_rs::release_error() {
  // @@protoc_insertion_point(field_release:s_control.get_logger_rs.error)
  clear_has_error();
  ::b_error::info* temp = error_;
  error_ = NULL;
  return temp;
}
void get_logger_rs::set_allocated_error(::b_error::info* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:s_control.get_logger_rs.error)
}

// required uint32 level = 2 [default = 0];
bool get_logger_rs::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void get_logger_rs::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void get_logger_rs::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void get_logger_rs::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 get_logger_rs::level() const {
  // @@protoc_insertion_point(field_get:s_control.get_logger_rs.level)
  return level_;
}
void get_logger_rs::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:s_control.get_logger_rs.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace s_control

// @@protoc_insertion_point(global_scope)
