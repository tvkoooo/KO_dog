// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: b_math.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "BMath.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - B_math_BMathRoot

@implementation B_math_BMathRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - B_math_BMathRoot_FileDescriptor

static GPBFileDescriptor *B_math_BMathRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"b_math"
                                                 objcPrefix:@"B_math_"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - B_math_coord

@implementation B_math_coord

@dynamic hasJ, j;
@dynamic hasW, w;

typedef struct B_math_coord__storage_ {
  uint32_t _has_storage_[1];
  double j;
  double w;
} B_math_coord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "j",
        .dataTypeSpecific.className = NULL,
        .number = B_math_coord_FieldNumber_J,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(B_math_coord__storage_, j),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "w",
        .dataTypeSpecific.className = NULL,
        .number = B_math_coord_FieldNumber_W,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(B_math_coord__storage_, w),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B_math_coord class]
                                     rootClass:[B_math_BMathRoot class]
                                          file:B_math_BMathRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B_math_coord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - B_math_vec2

@implementation B_math_vec2

@dynamic hasX, x;
@dynamic hasY, y;

typedef struct B_math_vec2__storage_ {
  uint32_t _has_storage_[1];
  double x;
  double y;
} B_math_vec2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec2_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(B_math_vec2__storage_, x),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec2_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(B_math_vec2__storage_, y),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B_math_vec2 class]
                                     rootClass:[B_math_BMathRoot class]
                                          file:B_math_BMathRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B_math_vec2__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - B_math_vec3

@implementation B_math_vec3

@dynamic hasX, x;
@dynamic hasY, y;
@dynamic hasZ, z;

typedef struct B_math_vec3__storage_ {
  uint32_t _has_storage_[1];
  double x;
  double y;
  double z;
} B_math_vec3__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec3_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(B_math_vec3__storage_, x),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec3_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(B_math_vec3__storage_, y),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "z",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec3_FieldNumber_Z,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(B_math_vec3__storage_, z),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B_math_vec3 class]
                                     rootClass:[B_math_BMathRoot class]
                                          file:B_math_BMathRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B_math_vec3__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - B_math_vec4

@implementation B_math_vec4

@dynamic hasX, x;
@dynamic hasY, y;
@dynamic hasZ, z;
@dynamic hasW, w;

typedef struct B_math_vec4__storage_ {
  uint32_t _has_storage_[1];
  double x;
  double y;
  double z;
  double w;
} B_math_vec4__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec4_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(B_math_vec4__storage_, x),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec4_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(B_math_vec4__storage_, y),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "z",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec4_FieldNumber_Z,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(B_math_vec4__storage_, z),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "w",
        .dataTypeSpecific.className = NULL,
        .number = B_math_vec4_FieldNumber_W,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(B_math_vec4__storage_, w),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B_math_vec4 class]
                                     rootClass:[B_math_BMathRoot class]
                                          file:B_math_BMathRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B_math_vec4__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - B_math_mat3

@implementation B_math_mat3

@dynamic mArray, mArray_Count;

typedef struct B_math_mat3__storage_ {
  uint32_t _has_storage_[1];
  GPBDoubleArray *mArray;
} B_math_mat3__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mArray",
        .dataTypeSpecific.className = NULL,
        .number = B_math_mat3_FieldNumber_MArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(B_math_mat3__storage_, mArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B_math_mat3 class]
                                     rootClass:[B_math_BMathRoot class]
                                          file:B_math_BMathRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B_math_mat3__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - B_math_mat4

@implementation B_math_mat4

@dynamic mArray, mArray_Count;

typedef struct B_math_mat4__storage_ {
  uint32_t _has_storage_[1];
  GPBDoubleArray *mArray;
} B_math_mat4__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mArray",
        .dataTypeSpecific.className = NULL,
        .number = B_math_mat4_FieldNumber_MArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(B_math_mat4__storage_, mArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B_math_mat4 class]
                                     rootClass:[B_math_BMathRoot class]
                                          file:B_math_BMathRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B_math_mat4__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
